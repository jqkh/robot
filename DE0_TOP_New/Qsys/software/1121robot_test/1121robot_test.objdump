
1121robot_test.elf:     file format elf32-littlenios2
1121robot_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x028001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x02800000 paddr 0x02800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02800020 paddr 0x02800020 align 2**12
         filesz 0x00003ddc memsz 0x00003ddc flags r-x
    LOAD off    0x00004dfc vaddr 0x02803dfc paddr 0x02805ac8 align 2**12
         filesz 0x00001ccc memsz 0x00001ccc flags rw-
    LOAD off    0x00007794 vaddr 0x02807794 paddr 0x02807794 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02800000  02800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02800020  02800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003c0c  028001b4  028001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  02803dc0  02803dc0  00004dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ccc  02803dfc  02805ac8  00004dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  02807794  02807794  00007794  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00006ac8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000638  00000000  00000000  00006af0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000a0d  00000000  00000000  00007128  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000c8db  00000000  00000000  00007b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d19  00000000  00000000  00014410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007803  00000000  00000000  00017129  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000bf4  00000000  00000000  0001e92c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d5c  00000000  00000000  0001f520  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000145e  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000216dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000118  00000000  00000000  00021720  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002372b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  0002372e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00023736  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00023737  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00023738  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00023741  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0002374a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  00023753  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000025  00000000  00000000  0002375a  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0008d720  00000000  00000000  0002377f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02800000 l    d  .entry	00000000 .entry
02800020 l    d  .exceptions	00000000 .exceptions
028001b4 l    d  .text	00000000 .text
02803dc0 l    d  .rodata	00000000 .rodata
02803dfc l    d  .rwdata	00000000 .rwdata
02807794 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
028001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 count_binary.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 impure.c
028043a8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
02800aa0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
028047a8 l     O .rwdata	000000a4 dma_priv
0280484c l     O .rwdata	0000001c dma_tx
02804868 l     O .rwdata	0000001c dma_rx
02804884 l     O .rwdata	00001060 jtag_uart
02800c44 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
02800d9c l     F .text	000000a8 alt_avalon_dma_launch_txonly
02800e44 l     F .text	000000a8 alt_avalon_dma_launch_rxonly
02800eec l     F .text	000003a4 alt_avalon_dma_ioctl
02801640 l     F .text	000001c8 alt_avalon_dma_irq
028018b8 l     F .text	00000038 alt_dma_txchan_reg
028018f0 l     F .text	00000038 alt_dma_rxchan_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02801b30 l     F .text	00000228 altera_avalon_jtag_uart_irq
02801d58 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
02802784 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
02802800 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
028028e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
02802998 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
02802a50 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02802ef4 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
02803044 l     F .text	000000f8 alt_file_locked
028032c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
02803a5c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
02803c10 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
02803d5c l     F .text	00000040 alt_sim_halt
02800b0c g     F .text	0000006c alt_main
028077b0 g     O .bss	00000100 alt_irq
02805ac8 g       *ABS*	00000000 __flash_rwdata_start
02803dfc g     O .rwdata	000001e4 maze1
02801808 g     F .text	000000b0 alt_avalon_dma_init
00000000  w      *UND*	00000000 __errno
02800000 g     F .entry	0000000c __reset
02800020 g       *ABS*	00000000 __flash_exceptions_start
028077ac g     O .bss	00000004 errno
02807798 g     O .bss	00000004 alt_argv
0280da8c g       *ABS*	00000000 _gp
02800b78 g     F .text	00000030 usleep
028029f8 g     F .text	00000058 alt_dma_txchan_open
0280590c g     O .rwdata	00000180 alt_fd_list
02802b78 g     F .text	00000094 alt_find_dev
02803814 g     F .text	000000a0 memcpy
02802fcc g     F .text	00000078 alt_io_redirect
02803dc0 g       *ABS*	00000000 __DTOR_END__
02801f70 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02803d4c g     F .text	00000008 __udivsi3
02805aa4 g     O .rwdata	00000004 alt_max_fd
02800c7c g     F .text	00000120 alt_avalon_dma_launch_bidir
02802940 g     F .text	00000058 alt_dma_rxchan_open
02805a90 g     O .rwdata	00000004 _global_impure_ptr
02807a40 g       *ABS*	00000000 __bss_end
02802dfc g     F .text	000000f8 alt_iic_isr_register
02803438 g     F .text	0000010c alt_tick
02802db4 g     F .text	00000048 alt_ic_irq_enabled
028033a0 g     F .text	00000098 alt_alarm_stop
028077a0 g     O .bss	00000004 alt_irq_active
028000ec g     F .exceptions	000000c8 alt_irq_handler
028058e4 g     O .rwdata	00000028 alt_dev_null
028027e4 g     F .text	0000001c alt_dcache_flush_all
02805ac8 g       *ABS*	00000000 __ram_rwdata_end
02805a9c g     O .rwdata	00000008 alt_dev_list
0280146c g     F .text	00000080 alt_avalon_dma_space
02803dfc g       *ABS*	00000000 __ram_rodata_end
02803d54 g     F .text	00000008 __umodsi3
02807a40 g       *ABS*	00000000 end
02801a70 g     F .text	000000c0 altera_avalon_jtag_uart_init
02803dbc g       *ABS*	00000000 __CTOR_LIST__
03000000 g       *ABS*	00000000 __alt_stack_pointer
02802194 g     F .text	00000240 altera_avalon_jtag_uart_write
028014ec g     F .text	00000154 alt_avalon_dma_send
02803a60 g     F .text	000001b0 __call_exitprocs
02805ab0 g     O .rwdata	00000008 alt_dma_txchan_list
028001b4 g     F .text	0000003c _start
028077a4 g     O .bss	00000004 _alt_tick_rate
02800884 g     F .text	00000078 rand
028077a8 g     O .bss	00000004 _alt_nticks
02800bdc g     F .text	00000068 alt_sys_init
02803928 g     F .text	00000134 __register_exitproc
02801e08 g     F .text	00000074 altera_avalon_jtag_uart_close
02800830 g     F .text	00000038 __mulsi3
02803dfc g       *ABS*	00000000 __ram_rwdata_start
02803dc0 g       *ABS*	00000000 __ram_rodata_start
02801928 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
02803684 g     F .text	000000d0 alt_get_fd
02802528 g     F .text	0000015c alt_busy_sleep
02800000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
028037a0 g     F .text	00000074 memcmp
028019d8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
02807a40 g       *ABS*	00000000 __alt_stack_base
02801a20 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02803564 g     F .text	00000120 alt_find_file
0280282c g     F .text	000000b4 alt_dev_llist_insert
02807794 g       *ABS*	00000000 __bss_start
028001f0 g     F .text	000000c8 main
028012d4 g     F .text	00000044 alt_avalon_dma_rx_ioctl
0280779c g     O .bss	00000004 alt_envp
02801980 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
02803fe0 g     O .rwdata	000001e4 maze2
02800868 g     F .text	0000001c srand
028078b0 g     O .bss	00000190 _atexit0
02805ab8 g     O .rwdata	00000004 alt_errno
02803c8c g     F .text	00000060 __divsi3
02803dc0 g       *ABS*	00000000 __CTOR_END__
02803dc0 g       *ABS*	00000000 __flash_rodata_start
02803dc0 g       *ABS*	00000000 __DTOR_LIST__
02800ba8 g     F .text	00000034 alt_irq_init
02803328 g     F .text	00000078 alt_release_fd
02803754 g     F .text	00000014 atexit
02805a8c g     O .rwdata	00000004 _impure_ptr
02807794 g     O .bss	00000004 alt_argc
02802b14 g     F .text	00000064 _do_dtors
028002b8 g     F .text	0000048c location1
02800020 g       .exceptions	00000000 alt_irq_entry
02805a94 g     O .rwdata	00000008 alt_fs_list
028041c4 g     O .rwdata	000001e4 maze3
02800020 g       *ABS*	00000000 __ram_exceptions_start
02802c28 g     F .text	00000050 alt_ic_isr_register
02805ac8 g       *ABS*	00000000 _edata
02807a40 g       *ABS*	00000000 _end
028001b4 g       *ABS*	00000000 __ram_exceptions_end
02801e7c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
02802d14 g     F .text	000000a0 alt_ic_irq_disable
02803544 g     F .text	00000020 altera_nios2_qsys_irq_init
02803768 g     F .text	00000038 exit
02803cec g     F .text	00000060 __modsi3
03000000 g       *ABS*	00000000 __alt_data_end
02800020 g     F .exceptions	00000000 alt_exception
02803d9c g     F .text	00000020 _exit
028023d4 g     F .text	00000154 alt_alarm_start
028008fc g     F .text	00000124 __muldi3
028038b4 g     F .text	00000074 strlen
0280313c g     F .text	0000018c open
02802c0c g     F .text	0000001c alt_icache_flush_all
02805abc g     O .rwdata	00000004 alt_priority_mask
02802c78 g     F .text	0000009c alt_ic_irq_enable
02801318 g     F .text	00000154 alt_avalon_dma_prepare
02805aa8 g     O .rwdata	00000008 alt_dma_rxchan_list
02800744 g     F .text	000000ec he0
02805ac0 g     O .rwdata	00000008 alt_alarm_list
02802ab0 g     F .text	00000064 _do_ctors
02802684 g     F .text	00000100 close
02800a20 g     F .text	00000080 alt_load
02801290 g     F .text	00000044 alt_avalon_dma_tx_ioctl
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

02800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2800000:	0040a034 	movhi	at,640
    ori r1, r1, %lo(_start)
 2800004:	08406d14 	ori	at,at,436
    jmp r1
 2800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 280002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 280003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 280004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 280005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 280006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 280007c:	10000326 	beq	r2,zero,280008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2800080:	20000226 	beq	r4,zero,280008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2800084:	28000ec0 	call	28000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2800088:	00000306 	br	2800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 280008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 280009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 28000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 28000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 28000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 28000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 28000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 28000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 28000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 28000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 28000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 28000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 28000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 28000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 28000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 28000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 28000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 28000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 28000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 28000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 28000e8:	ef80083a 	eret

028000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 28000ec:	defff904 	addi	sp,sp,-28
 28000f0:	dfc00615 	stw	ra,24(sp)
 28000f4:	df000515 	stw	fp,20(sp)
 28000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 28000fc:	0005313a 	rdctl	r2,ipending
 2800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 280010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2800110:	00800044 	movi	r2,1
 2800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2800118:	e0ffff17 	ldw	r3,-4(fp)
 280011c:	e0bffe17 	ldw	r2,-8(fp)
 2800120:	1884703a 	and	r2,r3,r2
 2800124:	1005003a 	cmpeq	r2,r2,zero
 2800128:	1000161e 	bne	r2,zero,2800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 280012c:	e0bffd17 	ldw	r2,-12(fp)
 2800130:	00c0a034 	movhi	r3,640
 2800134:	18ddec04 	addi	r3,r3,30640
 2800138:	100490fa 	slli	r2,r2,3
 280013c:	10c5883a 	add	r2,r2,r3
 2800140:	11400017 	ldw	r5,0(r2)
 2800144:	e0bffd17 	ldw	r2,-12(fp)
 2800148:	00c0a034 	movhi	r3,640
 280014c:	18ddec04 	addi	r3,r3,30640
 2800150:	100490fa 	slli	r2,r2,3
 2800154:	10c5883a 	add	r2,r2,r3
 2800158:	10800104 	addi	r2,r2,4
 280015c:	11000017 	ldw	r4,0(r2)
 2800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2800164:	0005313a 	rdctl	r2,ipending
 2800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 280016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2800174:	e0bfff17 	ldw	r2,-4(fp)
 2800178:	1004c03a 	cmpne	r2,r2,zero
 280017c:	103fe31e 	bne	r2,zero,280010c <alt_irq_handler+0x20>
 2800180:	00000706 	br	28001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2800184:	e0bffe17 	ldw	r2,-8(fp)
 2800188:	1085883a 	add	r2,r2,r2
 280018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2800190:	e0bffd17 	ldw	r2,-12(fp)
 2800194:	10800044 	addi	r2,r2,1
 2800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 280019c:	003fde06 	br	2800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 28001a0:	e037883a 	mov	sp,fp
 28001a4:	dfc00117 	ldw	ra,4(sp)
 28001a8:	df000017 	ldw	fp,0(sp)
 28001ac:	dec00204 	addi	sp,sp,8
 28001b0:	f800283a 	ret

Disassembly of section .text:

028001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 28001b4:	06c0c034 	movhi	sp,768
    ori sp, sp, %lo(__alt_stack_pointer)
 28001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 28001bc:	0680a034 	movhi	gp,640
    ori gp, gp, %lo(_gp)
 28001c0:	d6b6a314 	ori	gp,gp,55948
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 28001c4:	0080a034 	movhi	r2,640
    ori r2, r2, %lo(__bss_start)
 28001c8:	109de514 	ori	r2,r2,30612

    movhi r3, %hi(__bss_end)
 28001cc:	00c0a034 	movhi	r3,640
    ori r3, r3, %lo(__bss_end)
 28001d0:	18de9014 	ori	r3,r3,31296

    beq r2, r3, 1f
 28001d4:	10c00326 	beq	r2,r3,28001e4 <_start+0x30>

0:
    stw zero, (r2)
 28001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 28001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 28001e0:	10fffd36 	bltu	r2,r3,28001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 28001e4:	2800a200 	call	2800a20 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 28001e8:	2800b0c0 	call	2800b0c <alt_main>

028001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 28001ec:	003fff06 	br	28001ec <alt_after_alt_main>

028001f0 <main>:
		{1,0,1,0,0,0,1,0,0,0,1},
		{1,0,1,0,1,0,1,0,1,1,1},
		{1,0,0,0,1,0,0,0,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1}
};
int main(){
 28001f0:	defffb04 	addi	sp,sp,-20
 28001f4:	dfc00415 	stw	ra,16(sp)
 28001f8:	df000315 	stw	fp,12(sp)
 28001fc:	df000304 	addi	fp,sp,12
	int bt,f;
	 srand(2);
 2800200:	01000084 	movi	r4,2
 2800204:	28008680 	call	2800868 <srand>
	f= rand();
 2800208:	28008840 	call	2800884 <rand>
 280020c:	e0bffd15 	stw	r2,-12(fp)
	bt=IORD(BUTTON2_BASE,0);
 2800210:	00804034 	movhi	r2,256
 2800214:	10802004 	addi	r2,r2,128
 2800218:	10800037 	ldwio	r2,0(r2)
 280021c:	e0bffe15 	stw	r2,-8(fp)
	if(bt==1)
 2800220:	e0bffe17 	ldw	r2,-8(fp)
 2800224:	10800058 	cmpnei	r2,r2,1
 2800228:	10001d1e 	bne	r2,zero,28002a0 <main+0xb0>
	{
	switch(f){
 280022c:	e0bffd17 	ldw	r2,-12(fp)
 2800230:	e0bfff15 	stw	r2,-4(fp)
 2800234:	e0ffff17 	ldw	r3,-4(fp)
 2800238:	18800060 	cmpeqi	r2,r3,1
 280023c:	10000d1e 	bne	r2,zero,2800274 <main+0x84>
 2800240:	e0ffff17 	ldw	r3,-4(fp)
 2800244:	188000a0 	cmpeqi	r2,r3,2
 2800248:	1000101e 	bne	r2,zero,280028c <main+0x9c>
 280024c:	e0ffff17 	ldw	r3,-4(fp)
 2800250:	1805003a 	cmpeq	r2,r3,zero
 2800254:	1000011e 	bne	r2,zero,280025c <main+0x6c>
 2800258:	00001106 	br	28002a0 <main+0xb0>
	case 0:
		location1(maze1[11][11]);
 280025c:	0080a034 	movhi	r2,640
 2800260:	108f7f04 	addi	r2,r2,15868
 2800264:	10808417 	ldw	r2,528(r2)
 2800268:	1009883a 	mov	r4,r2
 280026c:	28002b80 	call	28002b8 <location1>
		break;
 2800270:	00000b06 	br	28002a0 <main+0xb0>
	case 1:
		location1(maze2[11][11]);
 2800274:	0080a034 	movhi	r2,640
 2800278:	108ff804 	addi	r2,r2,16352
 280027c:	10808417 	ldw	r2,528(r2)
 2800280:	1009883a 	mov	r4,r2
 2800284:	28002b80 	call	28002b8 <location1>
		break;
 2800288:	00000506 	br	28002a0 <main+0xb0>
	case 2:
		location1(maze3[11][11]);
 280028c:	0080a034 	movhi	r2,640
 2800290:	10907104 	addi	r2,r2,16836
 2800294:	10808417 	ldw	r2,528(r2)
 2800298:	1009883a 	mov	r4,r2
 280029c:	28002b80 	call	28002b8 <location1>
		break;
	}
	}
return 0;
 28002a0:	0005883a 	mov	r2,zero
}
 28002a4:	e037883a 	mov	sp,fp
 28002a8:	dfc00117 	ldw	ra,4(sp)
 28002ac:	df000017 	ldw	fp,0(sp)
 28002b0:	dec00204 	addi	sp,sp,8
 28002b4:	f800283a 	ret

028002b8 <location1>:
void location1(int maze[11][11])
{
 28002b8:	defff004 	addi	sp,sp,-64
 28002bc:	dfc00f15 	stw	ra,60(sp)
 28002c0:	df000e15 	stw	fp,56(sp)
 28002c4:	dc400d15 	stw	r17,52(sp)
 28002c8:	dc000c15 	stw	r16,48(sp)
 28002cc:	df000c04 	addi	fp,sp,48
 28002d0:	e13fff15 	stw	r4,-4(fp)
	int x,y,a,b,c,d,i,sw,bt2,dir,led;
	x=6,y=6;
 28002d4:	00800184 	movi	r2,6
 28002d8:	e0bffe15 	stw	r2,-8(fp)
 28002dc:	00800184 	movi	r2,6
 28002e0:	e0bffd15 	stw	r2,-12(fp)
	while(i==1){
 28002e4:	00010d06 	br	280071c <location1+0x464>

			if(maze[y][x]==2)
 28002e8:	e13ffd17 	ldw	r4,-12(fp)
 28002ec:	01400b04 	movi	r5,44
 28002f0:	28008300 	call	2800830 <__mulsi3>
 28002f4:	1007883a 	mov	r3,r2
 28002f8:	e0bfff17 	ldw	r2,-4(fp)
 28002fc:	1887883a 	add	r3,r3,r2
 2800300:	e0bffe17 	ldw	r2,-8(fp)
 2800304:	1085883a 	add	r2,r2,r2
 2800308:	1085883a 	add	r2,r2,r2
 280030c:	10c5883a 	add	r2,r2,r3
 2800310:	10800017 	ldw	r2,0(r2)
 2800314:	10800098 	cmpnei	r2,r2,2
 2800318:	1000171e 	bne	r2,zero,2800378 <location1+0xc0>
				{
				for(i=0;i<2;i++)
 280031c:	e03ff815 	stw	zero,-32(fp)
 2800320:	00001106 	br	2800368 <location1+0xb0>
				{
					led = led << 1;
 2800324:	e0bff417 	ldw	r2,-48(fp)
 2800328:	1085883a 	add	r2,r2,r2
 280032c:	e0bff415 	stw	r2,-48(fp)
				    if(led > 0x100)
 2800330:	e0bff417 	ldw	r2,-48(fp)
 2800334:	10804050 	cmplti	r2,r2,257
 2800338:	1000021e 	bne	r2,zero,2800344 <location1+0x8c>
				    	{
				              led = 0x01;
 280033c:	00800044 	movi	r2,1
 2800340:	e0bff415 	stw	r2,-48(fp)
				        }
				    IOWR(LED_BASE, 0, led);
 2800344:	00c04034 	movhi	r3,256
 2800348:	18c02804 	addi	r3,r3,160
 280034c:	e0bff417 	ldw	r2,-48(fp)
 2800350:	18800035 	stwio	r2,0(r3)
				    usleep(11000);
 2800354:	010abe04 	movi	r4,11000
 2800358:	2800b780 	call	2800b78 <usleep>
	x=6,y=6;
	while(i==1){

			if(maze[y][x]==2)
				{
				for(i=0;i<2;i++)
 280035c:	e0bff817 	ldw	r2,-32(fp)
 2800360:	10800044 	addi	r2,r2,1
 2800364:	e0bff815 	stw	r2,-32(fp)
 2800368:	e0bff817 	ldw	r2,-32(fp)
 280036c:	10800090 	cmplti	r2,r2,2
 2800370:	103fec1e 	bne	r2,zero,2800324 <location1+0x6c>
				              led = 0x01;
				        }
				    IOWR(LED_BASE, 0, led);
				    usleep(11000);
				}
				break;
 2800374:	0000ec06 	br	2800728 <location1+0x470>
				}
			if(maze[y--][x]!=1){
 2800378:	e13ffd17 	ldw	r4,-12(fp)
 280037c:	01400b04 	movi	r5,44
 2800380:	28008300 	call	2800830 <__mulsi3>
 2800384:	1007883a 	mov	r3,r2
 2800388:	e0bfff17 	ldw	r2,-4(fp)
 280038c:	1887883a 	add	r3,r3,r2
 2800390:	e0bffe17 	ldw	r2,-8(fp)
 2800394:	1085883a 	add	r2,r2,r2
 2800398:	1085883a 	add	r2,r2,r2
 280039c:	10c5883a 	add	r2,r2,r3
 28003a0:	10800017 	ldw	r2,0(r2)
 28003a4:	10800058 	cmpnei	r2,r2,1
 28003a8:	1007883a 	mov	r3,r2
 28003ac:	e0bffd17 	ldw	r2,-12(fp)
 28003b0:	10bfffc4 	addi	r2,r2,-1
 28003b4:	e0bffd15 	stw	r2,-12(fp)
 28003b8:	18803fcc 	andi	r2,r3,255
 28003bc:	1005003a 	cmpeq	r2,r2,zero
 28003c0:	1000021e 	bne	r2,zero,28003cc <location1+0x114>
				a=0x0;
 28003c4:	e03ffc15 	stw	zero,-16(fp)
 28003c8:	00000206 	br	28003d4 <location1+0x11c>
			}else{
				a=0x40;
 28003cc:	00801004 	movi	r2,64
 28003d0:	e0bffc15 	stw	r2,-16(fp)
			}
			if(maze[y++][x]!=1){
 28003d4:	e13ffd17 	ldw	r4,-12(fp)
 28003d8:	01400b04 	movi	r5,44
 28003dc:	28008300 	call	2800830 <__mulsi3>
 28003e0:	1007883a 	mov	r3,r2
 28003e4:	e0bfff17 	ldw	r2,-4(fp)
 28003e8:	1887883a 	add	r3,r3,r2
 28003ec:	e0bffe17 	ldw	r2,-8(fp)
 28003f0:	1085883a 	add	r2,r2,r2
 28003f4:	1085883a 	add	r2,r2,r2
 28003f8:	10c5883a 	add	r2,r2,r3
 28003fc:	10800017 	ldw	r2,0(r2)
 2800400:	10800058 	cmpnei	r2,r2,1
 2800404:	1007883a 	mov	r3,r2
 2800408:	e0bffd17 	ldw	r2,-12(fp)
 280040c:	10800044 	addi	r2,r2,1
 2800410:	e0bffd15 	stw	r2,-12(fp)
 2800414:	18803fcc 	andi	r2,r3,255
 2800418:	1005003a 	cmpeq	r2,r2,zero
 280041c:	1000021e 	bne	r2,zero,2800428 <location1+0x170>
						b=0x0;
 2800420:	e03ffb15 	stw	zero,-20(fp)
 2800424:	00000206 	br	2800430 <location1+0x178>
					}else{
						b=0x08;
 2800428:	00800204 	movi	r2,8
 280042c:	e0bffb15 	stw	r2,-20(fp)
					}
			if(maze[y][x--]!=1){
 2800430:	e13ffd17 	ldw	r4,-12(fp)
 2800434:	01400b04 	movi	r5,44
 2800438:	28008300 	call	2800830 <__mulsi3>
 280043c:	1007883a 	mov	r3,r2
 2800440:	e0bfff17 	ldw	r2,-4(fp)
 2800444:	1887883a 	add	r3,r3,r2
 2800448:	e0bffe17 	ldw	r2,-8(fp)
 280044c:	1085883a 	add	r2,r2,r2
 2800450:	1085883a 	add	r2,r2,r2
 2800454:	10c5883a 	add	r2,r2,r3
 2800458:	10800017 	ldw	r2,0(r2)
 280045c:	10800058 	cmpnei	r2,r2,1
 2800460:	1007883a 	mov	r3,r2
 2800464:	e0bffe17 	ldw	r2,-8(fp)
 2800468:	10bfffc4 	addi	r2,r2,-1
 280046c:	e0bffe15 	stw	r2,-8(fp)
 2800470:	18803fcc 	andi	r2,r3,255
 2800474:	1005003a 	cmpeq	r2,r2,zero
 2800478:	1000021e 	bne	r2,zero,2800484 <location1+0x1cc>
						c=0x0;
 280047c:	e03ffa15 	stw	zero,-24(fp)
 2800480:	00000206 	br	280048c <location1+0x1d4>
					}else{
						c=0x30;
 2800484:	00800c04 	movi	r2,48
 2800488:	e0bffa15 	stw	r2,-24(fp)
					}
			if(maze[y][x--]!=1){
 280048c:	e13ffd17 	ldw	r4,-12(fp)
 2800490:	01400b04 	movi	r5,44
 2800494:	28008300 	call	2800830 <__mulsi3>
 2800498:	1007883a 	mov	r3,r2
 280049c:	e0bfff17 	ldw	r2,-4(fp)
 28004a0:	1887883a 	add	r3,r3,r2
 28004a4:	e0bffe17 	ldw	r2,-8(fp)
 28004a8:	1085883a 	add	r2,r2,r2
 28004ac:	1085883a 	add	r2,r2,r2
 28004b0:	10c5883a 	add	r2,r2,r3
 28004b4:	10800017 	ldw	r2,0(r2)
 28004b8:	10800058 	cmpnei	r2,r2,1
 28004bc:	1007883a 	mov	r3,r2
 28004c0:	e0bffe17 	ldw	r2,-8(fp)
 28004c4:	10bfffc4 	addi	r2,r2,-1
 28004c8:	e0bffe15 	stw	r2,-8(fp)
 28004cc:	18803fcc 	andi	r2,r3,255
 28004d0:	1005003a 	cmpeq	r2,r2,zero
 28004d4:	1000021e 	bne	r2,zero,28004e0 <location1+0x228>
						d=0x0;
 28004d8:	e03ff915 	stw	zero,-28(fp)
 28004dc:	00000206 	br	28004e8 <location1+0x230>
					}else{
						d=0x06;
 28004e0:	00800184 	movi	r2,6
 28004e4:	e0bff915 	stw	r2,-28(fp)
					}
			dir=a+b+c+d;
 28004e8:	e0fffc17 	ldw	r3,-16(fp)
 28004ec:	e0bffb17 	ldw	r2,-20(fp)
 28004f0:	1887883a 	add	r3,r3,r2
 28004f4:	e0bffa17 	ldw	r2,-24(fp)
 28004f8:	1887883a 	add	r3,r3,r2
 28004fc:	e0bff917 	ldw	r2,-28(fp)
 2800500:	1885883a 	add	r2,r3,r2
 2800504:	e0bff515 	stw	r2,-44(fp)
			IOWR(HEX3_BASE,0,~dir);
 2800508:	e0bff517 	ldw	r2,-44(fp)
 280050c:	0086303a 	nor	r3,zero,r2
 2800510:	00804034 	movhi	r2,256
 2800514:	10801004 	addi	r2,r2,64
 2800518:	10c00035 	stwio	r3,0(r2)
			bt2=IORD(BUTTON2_BASE,0);
 280051c:	00804034 	movhi	r2,256
 2800520:	10802004 	addi	r2,r2,128
 2800524:	10800037 	ldwio	r2,0(r2)
 2800528:	e0bff615 	stw	r2,-40(fp)
				if(bt2==1)
 280052c:	e0bff617 	ldw	r2,-40(fp)
 2800530:	10800058 	cmpnei	r2,r2,1
 2800534:	10006d1e 	bne	r2,zero,28006ec <location1+0x434>
				{
				sw=IORD(SW_BASE,0);
 2800538:	00804034 	movhi	r2,256
 280053c:	10802c04 	addi	r2,r2,176
 2800540:	10800037 	ldwio	r2,0(r2)
 2800544:	e0bff715 	stw	r2,-36(fp)
				if(sw&0X01)
 2800548:	e0bff717 	ldw	r2,-36(fp)
 280054c:	1080004c 	andi	r2,r2,1
 2800550:	10803fcc 	andi	r2,r2,255
 2800554:	1005003a 	cmpeq	r2,r2,zero
 2800558:	1000161e 	bne	r2,zero,28005b4 <location1+0x2fc>
					{
					if(maze1[y--][x]!=1)
 280055c:	e13ffd17 	ldw	r4,-12(fp)
 2800560:	e43ffe17 	ldw	r16,-8(fp)
 2800564:	0440a034 	movhi	r17,640
 2800568:	8c4f7f04 	addi	r17,r17,15868
 280056c:	014002c4 	movi	r5,11
 2800570:	28008300 	call	2800830 <__mulsi3>
 2800574:	1405883a 	add	r2,r2,r16
 2800578:	1085883a 	add	r2,r2,r2
 280057c:	1085883a 	add	r2,r2,r2
 2800580:	1445883a 	add	r2,r2,r17
 2800584:	10800017 	ldw	r2,0(r2)
 2800588:	10800058 	cmpnei	r2,r2,1
 280058c:	1007883a 	mov	r3,r2
 2800590:	e0bffd17 	ldw	r2,-12(fp)
 2800594:	10bfffc4 	addi	r2,r2,-1
 2800598:	e0bffd15 	stw	r2,-12(fp)
 280059c:	18803fcc 	andi	r2,r3,255
 28005a0:	1005003a 	cmpeq	r2,r2,zero
 28005a4:	1000031e 	bne	r2,zero,28005b4 <location1+0x2fc>
						{
							y--;
 28005a8:	e0bffd17 	ldw	r2,-12(fp)
 28005ac:	10bfffc4 	addi	r2,r2,-1
 28005b0:	e0bffd15 	stw	r2,-12(fp)
						}
					}
				if(sw&0X02)
 28005b4:	e0bff717 	ldw	r2,-36(fp)
 28005b8:	1080008c 	andi	r2,r2,2
 28005bc:	1005003a 	cmpeq	r2,r2,zero
 28005c0:	1000161e 	bne	r2,zero,280061c <location1+0x364>
					{
					if(maze1[y++][x]!=1)
 28005c4:	e13ffd17 	ldw	r4,-12(fp)
 28005c8:	e43ffe17 	ldw	r16,-8(fp)
 28005cc:	0440a034 	movhi	r17,640
 28005d0:	8c4f7f04 	addi	r17,r17,15868
 28005d4:	014002c4 	movi	r5,11
 28005d8:	28008300 	call	2800830 <__mulsi3>
 28005dc:	1405883a 	add	r2,r2,r16
 28005e0:	1085883a 	add	r2,r2,r2
 28005e4:	1085883a 	add	r2,r2,r2
 28005e8:	1445883a 	add	r2,r2,r17
 28005ec:	10800017 	ldw	r2,0(r2)
 28005f0:	10800058 	cmpnei	r2,r2,1
 28005f4:	1007883a 	mov	r3,r2
 28005f8:	e0bffd17 	ldw	r2,-12(fp)
 28005fc:	10800044 	addi	r2,r2,1
 2800600:	e0bffd15 	stw	r2,-12(fp)
 2800604:	18803fcc 	andi	r2,r3,255
 2800608:	1005003a 	cmpeq	r2,r2,zero
 280060c:	1000031e 	bne	r2,zero,280061c <location1+0x364>
						{
							y++;
 2800610:	e0bffd17 	ldw	r2,-12(fp)
 2800614:	10800044 	addi	r2,r2,1
 2800618:	e0bffd15 	stw	r2,-12(fp)
						}
					}
				if(sw&0X04)
 280061c:	e0bff717 	ldw	r2,-36(fp)
 2800620:	1080010c 	andi	r2,r2,4
 2800624:	1005003a 	cmpeq	r2,r2,zero
 2800628:	1000161e 	bne	r2,zero,2800684 <location1+0x3cc>
					{
					if(maze1[y][x++]!=1)
 280062c:	e13ffd17 	ldw	r4,-12(fp)
 2800630:	e43ffe17 	ldw	r16,-8(fp)
 2800634:	0440a034 	movhi	r17,640
 2800638:	8c4f7f04 	addi	r17,r17,15868
 280063c:	014002c4 	movi	r5,11
 2800640:	28008300 	call	2800830 <__mulsi3>
 2800644:	1405883a 	add	r2,r2,r16
 2800648:	1085883a 	add	r2,r2,r2
 280064c:	1085883a 	add	r2,r2,r2
 2800650:	1445883a 	add	r2,r2,r17
 2800654:	10800017 	ldw	r2,0(r2)
 2800658:	10800058 	cmpnei	r2,r2,1
 280065c:	1007883a 	mov	r3,r2
 2800660:	e0bffe17 	ldw	r2,-8(fp)
 2800664:	10800044 	addi	r2,r2,1
 2800668:	e0bffe15 	stw	r2,-8(fp)
 280066c:	18803fcc 	andi	r2,r3,255
 2800670:	1005003a 	cmpeq	r2,r2,zero
 2800674:	1000031e 	bne	r2,zero,2800684 <location1+0x3cc>
						{
							x++;
 2800678:	e0bffe17 	ldw	r2,-8(fp)
 280067c:	10800044 	addi	r2,r2,1
 2800680:	e0bffe15 	stw	r2,-8(fp)
						}
					}
				if(sw&0X08)
 2800684:	e0bff717 	ldw	r2,-36(fp)
 2800688:	1080020c 	andi	r2,r2,8
 280068c:	1005003a 	cmpeq	r2,r2,zero
 2800690:	1000161e 	bne	r2,zero,28006ec <location1+0x434>
					{
					if(maze1[y][x--]!=1)
 2800694:	e13ffd17 	ldw	r4,-12(fp)
 2800698:	e43ffe17 	ldw	r16,-8(fp)
 280069c:	0440a034 	movhi	r17,640
 28006a0:	8c4f7f04 	addi	r17,r17,15868
 28006a4:	014002c4 	movi	r5,11
 28006a8:	28008300 	call	2800830 <__mulsi3>
 28006ac:	1405883a 	add	r2,r2,r16
 28006b0:	1085883a 	add	r2,r2,r2
 28006b4:	1085883a 	add	r2,r2,r2
 28006b8:	1445883a 	add	r2,r2,r17
 28006bc:	10800017 	ldw	r2,0(r2)
 28006c0:	10800058 	cmpnei	r2,r2,1
 28006c4:	1007883a 	mov	r3,r2
 28006c8:	e0bffe17 	ldw	r2,-8(fp)
 28006cc:	10bfffc4 	addi	r2,r2,-1
 28006d0:	e0bffe15 	stw	r2,-8(fp)
 28006d4:	18803fcc 	andi	r2,r3,255
 28006d8:	1005003a 	cmpeq	r2,r2,zero
 28006dc:	1000031e 	bne	r2,zero,28006ec <location1+0x434>
						{
							x--;
 28006e0:	e0bffe17 	ldw	r2,-8(fp)
 28006e4:	10bfffc4 	addi	r2,r2,-1
 28006e8:	e0bffe15 	stw	r2,-8(fp)
						}
					}
				}
				IOWR(HEX0_BASE,0,he0(x));
 28006ec:	e13ffe17 	ldw	r4,-8(fp)
 28006f0:	28007440 	call	2800744 <he0>
 28006f4:	1007883a 	mov	r3,r2
 28006f8:	00804034 	movhi	r2,256
 28006fc:	10801c04 	addi	r2,r2,112
 2800700:	10c00035 	stwio	r3,0(r2)
				IOWR(HEX2_BASE,0,he0(y));
 2800704:	e13ffd17 	ldw	r4,-12(fp)
 2800708:	28007440 	call	2800744 <he0>
 280070c:	1007883a 	mov	r3,r2
 2800710:	00804034 	movhi	r2,256
 2800714:	10801404 	addi	r2,r2,80
 2800718:	10c00035 	stwio	r3,0(r2)
}
void location1(int maze[11][11])
{
	int x,y,a,b,c,d,i,sw,bt2,dir,led;
	x=6,y=6;
	while(i==1){
 280071c:	e0bff817 	ldw	r2,-32(fp)
 2800720:	10800060 	cmpeqi	r2,r2,1
 2800724:	103ef01e 	bne	r2,zero,28002e8 <location1+0x30>
					}
				}
				IOWR(HEX0_BASE,0,he0(x));
				IOWR(HEX2_BASE,0,he0(y));
			}
}
 2800728:	e037883a 	mov	sp,fp
 280072c:	dfc00317 	ldw	ra,12(sp)
 2800730:	df000217 	ldw	fp,8(sp)
 2800734:	dc400117 	ldw	r17,4(sp)
 2800738:	dc000017 	ldw	r16,0(sp)
 280073c:	dec00404 	addi	sp,sp,16
 2800740:	f800283a 	ret

02800744 <he0>:
int he0(int x)
{
 2800744:	defffd04 	addi	sp,sp,-12
 2800748:	df000215 	stw	fp,8(sp)
 280074c:	df000204 	addi	fp,sp,8
 2800750:	e13fff15 	stw	r4,-4(fp)
	int hex=0;
 2800754:	e03ffe15 	stw	zero,-8(fp)
	switch(x)
 2800758:	e0bfff17 	ldw	r2,-4(fp)
 280075c:	108002e8 	cmpgeui	r2,r2,11
 2800760:	10002d1e 	bne	r2,zero,2800818 <he0+0xd4>
 2800764:	e0bfff17 	ldw	r2,-4(fp)
 2800768:	1085883a 	add	r2,r2,r2
 280076c:	1087883a 	add	r3,r2,r2
 2800770:	0080a034 	movhi	r2,640
 2800774:	1081e104 	addi	r2,r2,1924
 2800778:	1885883a 	add	r2,r3,r2
 280077c:	10800017 	ldw	r2,0(r2)
 2800780:	1000683a 	jmp	r2
 2800784:	02800818 	cmpnei	r10,zero,32
 2800788:	02800818 	cmpnei	r10,zero,32
 280078c:	028007b0 	cmpltui	r10,zero,30
 2800790:	028007bc 	xorhi	r10,zero,30
 2800794:	028007c8 	cmpgei	r10,zero,31
 2800798:	028007d4 	movui	r10,31
 280079c:	028007e0 	cmpeqi	r10,zero,31
 28007a0:	028007ec 	andhi	r10,zero,31
 28007a4:	028007f8 	rdprs	r10,zero,31
 28007a8:	02800804 	movi	r10,32
 28007ac:	02800810 	cmplti	r10,zero,32
	{
		case 2:
			hex=0x5B;
 28007b0:	008016c4 	movi	r2,91
 28007b4:	e0bffe15 	stw	r2,-8(fp)
			break;
 28007b8:	00001706 	br	2800818 <he0+0xd4>
		case 3:
			hex=0x4F;
 28007bc:	008013c4 	movi	r2,79
 28007c0:	e0bffe15 	stw	r2,-8(fp)
			break;
 28007c4:	00001406 	br	2800818 <he0+0xd4>
		case 4:
			hex=0x66;
 28007c8:	00801984 	movi	r2,102
 28007cc:	e0bffe15 	stw	r2,-8(fp)
			break;
 28007d0:	00001106 	br	2800818 <he0+0xd4>
		case 5:
			hex=0x6D;
 28007d4:	00801b44 	movi	r2,109
 28007d8:	e0bffe15 	stw	r2,-8(fp)
			break;
 28007dc:	00000e06 	br	2800818 <he0+0xd4>
		case 6:
			hex=0x7D;
 28007e0:	00801f44 	movi	r2,125
 28007e4:	e0bffe15 	stw	r2,-8(fp)
			break;
 28007e8:	00000b06 	br	2800818 <he0+0xd4>
		case 7:
			hex=0x07;
 28007ec:	008001c4 	movi	r2,7
 28007f0:	e0bffe15 	stw	r2,-8(fp)
			break;
 28007f4:	00000806 	br	2800818 <he0+0xd4>
		case 8:
			hex=0x7F;
 28007f8:	00801fc4 	movi	r2,127
 28007fc:	e0bffe15 	stw	r2,-8(fp)
			break;
 2800800:	00000506 	br	2800818 <he0+0xd4>
		case 9:
			hex=0x6F;
 2800804:	00801bc4 	movi	r2,111
 2800808:	e0bffe15 	stw	r2,-8(fp)
			break;
 280080c:	00000206 	br	2800818 <he0+0xd4>
		case 10:
			hex=0x77;
 2800810:	00801dc4 	movi	r2,119
 2800814:	e0bffe15 	stw	r2,-8(fp)
			break;
	}
	return ~hex;
 2800818:	e0bffe17 	ldw	r2,-8(fp)
 280081c:	0084303a 	nor	r2,zero,r2
}
 2800820:	e037883a 	mov	sp,fp
 2800824:	df000017 	ldw	fp,0(sp)
 2800828:	dec00104 	addi	sp,sp,4
 280082c:	f800283a 	ret

02800830 <__mulsi3>:
 2800830:	20000a26 	beq	r4,zero,280085c <__mulsi3+0x2c>
 2800834:	0007883a 	mov	r3,zero
 2800838:	2080004c 	andi	r2,r4,1
 280083c:	1005003a 	cmpeq	r2,r2,zero
 2800840:	2008d07a 	srli	r4,r4,1
 2800844:	1000011e 	bne	r2,zero,280084c <__mulsi3+0x1c>
 2800848:	1947883a 	add	r3,r3,r5
 280084c:	294b883a 	add	r5,r5,r5
 2800850:	203ff91e 	bne	r4,zero,2800838 <__mulsi3+0x8>
 2800854:	1805883a 	mov	r2,r3
 2800858:	f800283a 	ret
 280085c:	0007883a 	mov	r3,zero
 2800860:	1805883a 	mov	r2,r3
 2800864:	f800283a 	ret

02800868 <srand>:
 2800868:	0080a034 	movhi	r2,640
 280086c:	1096a304 	addi	r2,r2,23180
 2800870:	11400017 	ldw	r5,0(r2)
 2800874:	0007883a 	mov	r3,zero
 2800878:	28c02a15 	stw	r3,168(r5)
 280087c:	29002915 	stw	r4,164(r5)
 2800880:	f800283a 	ret

02800884 <rand>:
 2800884:	defffe04 	addi	sp,sp,-8
 2800888:	0080a034 	movhi	r2,640
 280088c:	1096a304 	addi	r2,r2,23180
 2800890:	dc000015 	stw	r16,0(sp)
 2800894:	14000017 	ldw	r16,0(r2)
 2800898:	dfc00115 	stw	ra,4(sp)
 280089c:	00932574 	movhi	r2,19605
 28008a0:	109fcb44 	addi	r2,r2,32557
 28008a4:	82002917 	ldw	r8,164(r16)
 28008a8:	82402a17 	ldw	r9,168(r16)
 28008ac:	00d614b4 	movhi	r3,22610
 28008b0:	18fd0b44 	addi	r3,r3,-3027
 28008b4:	4009883a 	mov	r4,r8
 28008b8:	180f883a 	mov	r7,r3
 28008bc:	100d883a 	mov	r6,r2
 28008c0:	480b883a 	mov	r5,r9
 28008c4:	28008fc0 	call	28008fc <__muldi3>
 28008c8:	02000044 	movi	r8,1
 28008cc:	1209883a 	add	r4,r2,r8
 28008d0:	2095803a 	cmpltu	r10,r4,r2
 28008d4:	50d5883a 	add	r10,r10,r3
 28008d8:	81002915 	stw	r4,164(r16)
 28008dc:	01200034 	movhi	r4,32768
 28008e0:	213fffc4 	addi	r4,r4,-1
 28008e4:	2284703a 	and	r2,r4,r10
 28008e8:	82802a15 	stw	r10,168(r16)
 28008ec:	dfc00117 	ldw	ra,4(sp)
 28008f0:	dc000017 	ldw	r16,0(sp)
 28008f4:	dec00204 	addi	sp,sp,8
 28008f8:	f800283a 	ret

028008fc <__muldi3>:
 28008fc:	defff204 	addi	sp,sp,-56
 2800900:	df000c15 	stw	fp,48(sp)
 2800904:	3038d43a 	srli	fp,r6,16
 2800908:	dd000815 	stw	r20,32(sp)
 280090c:	dc400515 	stw	r17,20(sp)
 2800910:	2028d43a 	srli	r20,r4,16
 2800914:	247fffcc 	andi	r17,r4,65535
 2800918:	dc000415 	stw	r16,16(sp)
 280091c:	343fffcc 	andi	r16,r6,65535
 2800920:	dcc00715 	stw	r19,28(sp)
 2800924:	d9000015 	stw	r4,0(sp)
 2800928:	2827883a 	mov	r19,r5
 280092c:	8809883a 	mov	r4,r17
 2800930:	d9400115 	stw	r5,4(sp)
 2800934:	800b883a 	mov	r5,r16
 2800938:	d9800215 	stw	r6,8(sp)
 280093c:	dfc00d15 	stw	ra,52(sp)
 2800940:	d9c00315 	stw	r7,12(sp)
 2800944:	dd800a15 	stw	r22,40(sp)
 2800948:	dd400915 	stw	r21,36(sp)
 280094c:	302d883a 	mov	r22,r6
 2800950:	ddc00b15 	stw	r23,44(sp)
 2800954:	dc800615 	stw	r18,24(sp)
 2800958:	28008300 	call	2800830 <__mulsi3>
 280095c:	8809883a 	mov	r4,r17
 2800960:	e00b883a 	mov	r5,fp
 2800964:	102b883a 	mov	r21,r2
 2800968:	28008300 	call	2800830 <__mulsi3>
 280096c:	800b883a 	mov	r5,r16
 2800970:	a009883a 	mov	r4,r20
 2800974:	1023883a 	mov	r17,r2
 2800978:	28008300 	call	2800830 <__mulsi3>
 280097c:	a009883a 	mov	r4,r20
 2800980:	e00b883a 	mov	r5,fp
 2800984:	1021883a 	mov	r16,r2
 2800988:	28008300 	call	2800830 <__mulsi3>
 280098c:	a8ffffcc 	andi	r3,r21,65535
 2800990:	a82ad43a 	srli	r21,r21,16
 2800994:	8c23883a 	add	r17,r17,r16
 2800998:	1011883a 	mov	r8,r2
 280099c:	ac6b883a 	add	r21,r21,r17
 28009a0:	a804943a 	slli	r2,r21,16
 28009a4:	b009883a 	mov	r4,r22
 28009a8:	980b883a 	mov	r5,r19
 28009ac:	10c7883a 	add	r3,r2,r3
 28009b0:	a812d43a 	srli	r9,r21,16
 28009b4:	180d883a 	mov	r6,r3
 28009b8:	ac00022e 	bgeu	r21,r16,28009c4 <__muldi3+0xc8>
 28009bc:	00800074 	movhi	r2,1
 28009c0:	4091883a 	add	r8,r8,r2
 28009c4:	4267883a 	add	r19,r8,r9
 28009c8:	302d883a 	mov	r22,r6
 28009cc:	28008300 	call	2800830 <__mulsi3>
 28009d0:	d9400317 	ldw	r5,12(sp)
 28009d4:	d9000017 	ldw	r4,0(sp)
 28009d8:	1023883a 	mov	r17,r2
 28009dc:	28008300 	call	2800830 <__mulsi3>
 28009e0:	14cb883a 	add	r5,r2,r19
 28009e4:	894b883a 	add	r5,r17,r5
 28009e8:	b005883a 	mov	r2,r22
 28009ec:	2807883a 	mov	r3,r5
 28009f0:	dfc00d17 	ldw	ra,52(sp)
 28009f4:	df000c17 	ldw	fp,48(sp)
 28009f8:	ddc00b17 	ldw	r23,44(sp)
 28009fc:	dd800a17 	ldw	r22,40(sp)
 2800a00:	dd400917 	ldw	r21,36(sp)
 2800a04:	dd000817 	ldw	r20,32(sp)
 2800a08:	dcc00717 	ldw	r19,28(sp)
 2800a0c:	dc800617 	ldw	r18,24(sp)
 2800a10:	dc400517 	ldw	r17,20(sp)
 2800a14:	dc000417 	ldw	r16,16(sp)
 2800a18:	dec00e04 	addi	sp,sp,56
 2800a1c:	f800283a 	ret

02800a20 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2800a20:	defffe04 	addi	sp,sp,-8
 2800a24:	dfc00115 	stw	ra,4(sp)
 2800a28:	df000015 	stw	fp,0(sp)
 2800a2c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2800a30:	0100a034 	movhi	r4,640
 2800a34:	2116b204 	addi	r4,r4,23240
 2800a38:	0140a034 	movhi	r5,640
 2800a3c:	294f7f04 	addi	r5,r5,15868
 2800a40:	0180a034 	movhi	r6,640
 2800a44:	3196b204 	addi	r6,r6,23240
 2800a48:	2800aa00 	call	2800aa0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2800a4c:	0100a034 	movhi	r4,640
 2800a50:	21000804 	addi	r4,r4,32
 2800a54:	0140a034 	movhi	r5,640
 2800a58:	29400804 	addi	r5,r5,32
 2800a5c:	0180a034 	movhi	r6,640
 2800a60:	31806d04 	addi	r6,r6,436
 2800a64:	2800aa00 	call	2800aa0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2800a68:	0100a034 	movhi	r4,640
 2800a6c:	210f7004 	addi	r4,r4,15808
 2800a70:	0140a034 	movhi	r5,640
 2800a74:	294f7004 	addi	r5,r5,15808
 2800a78:	0180a034 	movhi	r6,640
 2800a7c:	318f7f04 	addi	r6,r6,15868
 2800a80:	2800aa00 	call	2800aa0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2800a84:	28027e40 	call	28027e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2800a88:	2802c0c0 	call	2802c0c <alt_icache_flush_all>
}
 2800a8c:	e037883a 	mov	sp,fp
 2800a90:	dfc00117 	ldw	ra,4(sp)
 2800a94:	df000017 	ldw	fp,0(sp)
 2800a98:	dec00204 	addi	sp,sp,8
 2800a9c:	f800283a 	ret

02800aa0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2800aa0:	defffc04 	addi	sp,sp,-16
 2800aa4:	df000315 	stw	fp,12(sp)
 2800aa8:	df000304 	addi	fp,sp,12
 2800aac:	e13ffd15 	stw	r4,-12(fp)
 2800ab0:	e17ffe15 	stw	r5,-8(fp)
 2800ab4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2800ab8:	e0fffe17 	ldw	r3,-8(fp)
 2800abc:	e0bffd17 	ldw	r2,-12(fp)
 2800ac0:	18800e26 	beq	r3,r2,2800afc <alt_load_section+0x5c>
  {
    while( to != end )
 2800ac4:	00000a06 	br	2800af0 <alt_load_section+0x50>
    {
      *to++ = *from++;
 2800ac8:	e0bffd17 	ldw	r2,-12(fp)
 2800acc:	10c00017 	ldw	r3,0(r2)
 2800ad0:	e0bffe17 	ldw	r2,-8(fp)
 2800ad4:	10c00015 	stw	r3,0(r2)
 2800ad8:	e0bffe17 	ldw	r2,-8(fp)
 2800adc:	10800104 	addi	r2,r2,4
 2800ae0:	e0bffe15 	stw	r2,-8(fp)
 2800ae4:	e0bffd17 	ldw	r2,-12(fp)
 2800ae8:	10800104 	addi	r2,r2,4
 2800aec:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2800af0:	e0fffe17 	ldw	r3,-8(fp)
 2800af4:	e0bfff17 	ldw	r2,-4(fp)
 2800af8:	18bff31e 	bne	r3,r2,2800ac8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2800afc:	e037883a 	mov	sp,fp
 2800b00:	df000017 	ldw	fp,0(sp)
 2800b04:	dec00104 	addi	sp,sp,4
 2800b08:	f800283a 	ret

02800b0c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2800b0c:	defffd04 	addi	sp,sp,-12
 2800b10:	dfc00215 	stw	ra,8(sp)
 2800b14:	df000115 	stw	fp,4(sp)
 2800b18:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2800b1c:	0009883a 	mov	r4,zero
 2800b20:	2800ba80 	call	2800ba8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2800b24:	2800bdc0 	call	2800bdc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2800b28:	0100a034 	movhi	r4,640
 2800b2c:	210f7104 	addi	r4,r4,15812
 2800b30:	0140a034 	movhi	r5,640
 2800b34:	294f7104 	addi	r5,r5,15812
 2800b38:	0180a034 	movhi	r6,640
 2800b3c:	318f7104 	addi	r6,r6,15812
 2800b40:	2802fcc0 	call	2802fcc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2800b44:	2802ab00 	call	2802ab0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2800b48:	0100a034 	movhi	r4,640
 2800b4c:	210ac504 	addi	r4,r4,11028
 2800b50:	28037540 	call	2803754 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2800b54:	d1274217 	ldw	r4,-25336(gp)
 2800b58:	d1674317 	ldw	r5,-25332(gp)
 2800b5c:	d1a74417 	ldw	r6,-25328(gp)
 2800b60:	28001f00 	call	28001f0 <main>
 2800b64:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2800b68:	01000044 	movi	r4,1
 2800b6c:	28026840 	call	2802684 <close>
  exit (result);
 2800b70:	e13fff17 	ldw	r4,-4(fp)
 2800b74:	28037680 	call	2803768 <exit>

02800b78 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 2800b78:	defffd04 	addi	sp,sp,-12
 2800b7c:	dfc00215 	stw	ra,8(sp)
 2800b80:	df000115 	stw	fp,4(sp)
 2800b84:	df000104 	addi	fp,sp,4
 2800b88:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 2800b8c:	e13fff17 	ldw	r4,-4(fp)
 2800b90:	28025280 	call	2802528 <alt_busy_sleep>
}
 2800b94:	e037883a 	mov	sp,fp
 2800b98:	dfc00117 	ldw	ra,4(sp)
 2800b9c:	df000017 	ldw	fp,0(sp)
 2800ba0:	dec00204 	addi	sp,sp,8
 2800ba4:	f800283a 	ret

02800ba8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2800ba8:	defffd04 	addi	sp,sp,-12
 2800bac:	dfc00215 	stw	ra,8(sp)
 2800bb0:	df000115 	stw	fp,4(sp)
 2800bb4:	df000104 	addi	fp,sp,4
 2800bb8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2CPU, nios2cpu);
 2800bbc:	28035440 	call	2803544 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2800bc0:	00800044 	movi	r2,1
 2800bc4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2800bc8:	e037883a 	mov	sp,fp
 2800bcc:	dfc00117 	ldw	ra,4(sp)
 2800bd0:	df000017 	ldw	fp,0(sp)
 2800bd4:	dec00204 	addi	sp,sp,8
 2800bd8:	f800283a 	ret

02800bdc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2800bdc:	defffd04 	addi	sp,sp,-12
 2800be0:	dfc00215 	stw	ra,8(sp)
 2800be4:	df000115 	stw	fp,4(sp)
 2800be8:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_DMA_INIT ( DMA, dma);
 2800bec:	d8000015 	stw	zero,0(sp)
 2800bf0:	0100a034 	movhi	r4,640
 2800bf4:	21121304 	addi	r4,r4,18508
 2800bf8:	0140a034 	movhi	r5,640
 2800bfc:	29521a04 	addi	r5,r5,18536
 2800c00:	0180c034 	movhi	r6,768
 2800c04:	31840804 	addi	r6,r6,4128
 2800c08:	000f883a 	mov	r7,zero
 2800c0c:	28018080 	call	2801808 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2800c10:	0100a034 	movhi	r4,640
 2800c14:	21122b04 	addi	r4,r4,18604
 2800c18:	000b883a 	mov	r5,zero
 2800c1c:	01800044 	movi	r6,1
 2800c20:	2801a700 	call	2801a70 <altera_avalon_jtag_uart_init>
 2800c24:	0100a034 	movhi	r4,640
 2800c28:	21122104 	addi	r4,r4,18564
 2800c2c:	2800c440 	call	2800c44 <alt_dev_reg>
}
 2800c30:	e037883a 	mov	sp,fp
 2800c34:	dfc00117 	ldw	ra,4(sp)
 2800c38:	df000017 	ldw	fp,0(sp)
 2800c3c:	dec00204 	addi	sp,sp,8
 2800c40:	f800283a 	ret

02800c44 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2800c44:	defffd04 	addi	sp,sp,-12
 2800c48:	dfc00215 	stw	ra,8(sp)
 2800c4c:	df000115 	stw	fp,4(sp)
 2800c50:	df000104 	addi	fp,sp,4
 2800c54:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2800c58:	e13fff17 	ldw	r4,-4(fp)
 2800c5c:	0140a034 	movhi	r5,640
 2800c60:	2956a704 	addi	r5,r5,23196
 2800c64:	280282c0 	call	280282c <alt_dev_llist_insert>
}
 2800c68:	e037883a 	mov	sp,fp
 2800c6c:	dfc00117 	ldw	ra,4(sp)
 2800c70:	df000017 	ldw	fp,0(sp)
 2800c74:	dec00204 	addi	sp,sp,8
 2800c78:	f800283a 	ret

02800c7c <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
 2800c7c:	defff904 	addi	sp,sp,-28
 2800c80:	df000615 	stw	fp,24(sp)
 2800c84:	df000604 	addi	fp,sp,24
 2800c88:	e13ffc15 	stw	r4,-16(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
 2800c8c:	e0bffc17 	ldw	r2,-16(fp)
 2800c90:	10c00117 	ldw	r3,4(r2)
 2800c94:	e0bffc17 	ldw	r2,-16(fp)
 2800c98:	10800217 	ldw	r2,8(r2)
 2800c9c:	18803926 	beq	r3,r2,2800d84 <alt_avalon_dma_launch_bidir+0x108>
 2800ca0:	e0bffc17 	ldw	r2,-16(fp)
 2800ca4:	10c00317 	ldw	r3,12(r2)
 2800ca8:	e0bffc17 	ldw	r2,-16(fp)
 2800cac:	10800417 	ldw	r2,16(r2)
 2800cb0:	18803426 	beq	r3,r2,2800d84 <alt_avalon_dma_launch_bidir+0x108>
  {
    priv->active = 1;
 2800cb4:	e0fffc17 	ldw	r3,-16(fp)
 2800cb8:	00800044 	movi	r2,1
 2800cbc:	18800815 	stw	r2,32(r3)

    tx_slot = &priv->tx_buf[priv->tx_start];
 2800cc0:	e0bffc17 	ldw	r2,-16(fp)
 2800cc4:	10c00904 	addi	r3,r2,36
 2800cc8:	e0bffc17 	ldw	r2,-16(fp)
 2800ccc:	10800117 	ldw	r2,4(r2)
 2800cd0:	1004913a 	slli	r2,r2,4
 2800cd4:	1885883a 	add	r2,r3,r2
 2800cd8:	e0bffb15 	stw	r2,-20(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
 2800cdc:	e0bffc17 	ldw	r2,-16(fp)
 2800ce0:	10c01904 	addi	r3,r2,100
 2800ce4:	e0bffc17 	ldw	r2,-16(fp)
 2800ce8:	10800317 	ldw	r2,12(r2)
 2800cec:	1004913a 	slli	r2,r2,4
 2800cf0:	1885883a 	add	r2,r3,r2
 2800cf4:	e0bffa15 	stw	r2,-24(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
 2800cf8:	e0bffc17 	ldw	r2,-16(fp)
 2800cfc:	10800017 	ldw	r2,0(r2)
 2800d00:	11000104 	addi	r4,r2,4
 2800d04:	e0bffb17 	ldw	r2,-20(fp)
 2800d08:	10800017 	ldw	r2,0(r2)
 2800d0c:	1007883a 	mov	r3,r2
 2800d10:	2005883a 	mov	r2,r4
 2800d14:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
 2800d18:	e0bffc17 	ldw	r2,-16(fp)
 2800d1c:	10800017 	ldw	r2,0(r2)
 2800d20:	11000204 	addi	r4,r2,8
 2800d24:	e0bffa17 	ldw	r2,-24(fp)
 2800d28:	10800017 	ldw	r2,0(r2)
 2800d2c:	1007883a 	mov	r3,r2
 2800d30:	2005883a 	mov	r2,r4
 2800d34:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
 2800d38:	e0bffc17 	ldw	r2,-16(fp)
 2800d3c:	10800017 	ldw	r2,0(r2)
 2800d40:	10800304 	addi	r2,r2,12
 2800d44:	e0bfff15 	stw	r2,-4(fp)
 2800d48:	e0bffb17 	ldw	r2,-20(fp)
 2800d4c:	10c00117 	ldw	r3,4(r2)
 2800d50:	e0bffa17 	ldw	r2,-24(fp)
 2800d54:	10800117 	ldw	r2,4(r2)
 2800d58:	e0bffe15 	stw	r2,-8(fp)
 2800d5c:	e0fffd15 	stw	r3,-12(fp)
 2800d60:	e0bffe17 	ldw	r2,-8(fp)
 2800d64:	e0fffd17 	ldw	r3,-12(fp)
 2800d68:	10c0022e 	bgeu	r2,r3,2800d74 <alt_avalon_dma_launch_bidir+0xf8>
 2800d6c:	e0bffe17 	ldw	r2,-8(fp)
 2800d70:	e0bffd15 	stw	r2,-12(fp)
 2800d74:	e0fffd17 	ldw	r3,-12(fp)
 2800d78:	e0bfff17 	ldw	r2,-4(fp)
 2800d7c:	10c00035 	stwio	r3,0(r2)
void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
 2800d80:	00000206 	br	2800d8c <alt_avalon_dma_launch_bidir+0x110>
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
 2800d84:	e0bffc17 	ldw	r2,-16(fp)
 2800d88:	10000815 	stw	zero,32(r2)
  }
}
 2800d8c:	e037883a 	mov	sp,fp
 2800d90:	df000017 	ldw	fp,0(sp)
 2800d94:	dec00104 	addi	sp,sp,4
 2800d98:	f800283a 	ret

02800d9c <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
 2800d9c:	defffd04 	addi	sp,sp,-12
 2800da0:	df000215 	stw	fp,8(sp)
 2800da4:	df000204 	addi	fp,sp,8
 2800da8:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
 2800dac:	e0bfff17 	ldw	r2,-4(fp)
 2800db0:	10c00117 	ldw	r3,4(r2)
 2800db4:	e0bfff17 	ldw	r2,-4(fp)
 2800db8:	10800217 	ldw	r2,8(r2)
 2800dbc:	18801b26 	beq	r3,r2,2800e2c <alt_avalon_dma_launch_txonly+0x90>
  {
    priv->active = 1;
 2800dc0:	e0ffff17 	ldw	r3,-4(fp)
 2800dc4:	00800044 	movi	r2,1
 2800dc8:	18800815 	stw	r2,32(r3)
    tx_slot      = &priv->tx_buf[priv->tx_start];
 2800dcc:	e0bfff17 	ldw	r2,-4(fp)
 2800dd0:	10c00904 	addi	r3,r2,36
 2800dd4:	e0bfff17 	ldw	r2,-4(fp)
 2800dd8:	10800117 	ldw	r2,4(r2)
 2800ddc:	1004913a 	slli	r2,r2,4
 2800de0:	1885883a 	add	r2,r3,r2
 2800de4:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
 2800de8:	e0bfff17 	ldw	r2,-4(fp)
 2800dec:	10800017 	ldw	r2,0(r2)
 2800df0:	11000104 	addi	r4,r2,4
 2800df4:	e0bffe17 	ldw	r2,-8(fp)
 2800df8:	10800017 	ldw	r2,0(r2)
 2800dfc:	1007883a 	mov	r3,r2
 2800e00:	2005883a 	mov	r2,r4
 2800e04:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
 2800e08:	e0bfff17 	ldw	r2,-4(fp)
 2800e0c:	10800017 	ldw	r2,0(r2)
 2800e10:	11000304 	addi	r4,r2,12
 2800e14:	e0bffe17 	ldw	r2,-8(fp)
 2800e18:	10800117 	ldw	r2,4(r2)
 2800e1c:	1007883a 	mov	r3,r2
 2800e20:	2005883a 	mov	r2,r4
 2800e24:	10c00035 	stwio	r3,0(r2)
 2800e28:	00000206 	br	2800e34 <alt_avalon_dma_launch_txonly+0x98>
  }
  else
  {
    priv->active = 0;
 2800e2c:	e0bfff17 	ldw	r2,-4(fp)
 2800e30:	10000815 	stw	zero,32(r2)
  }
}
 2800e34:	e037883a 	mov	sp,fp
 2800e38:	df000017 	ldw	fp,0(sp)
 2800e3c:	dec00104 	addi	sp,sp,4
 2800e40:	f800283a 	ret

02800e44 <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
 2800e44:	defffd04 	addi	sp,sp,-12
 2800e48:	df000215 	stw	fp,8(sp)
 2800e4c:	df000204 	addi	fp,sp,8
 2800e50:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
 2800e54:	e0bfff17 	ldw	r2,-4(fp)
 2800e58:	10c00317 	ldw	r3,12(r2)
 2800e5c:	e0bfff17 	ldw	r2,-4(fp)
 2800e60:	10800417 	ldw	r2,16(r2)
 2800e64:	18801b26 	beq	r3,r2,2800ed4 <alt_avalon_dma_launch_rxonly+0x90>
  {
    priv->active = 1;
 2800e68:	e0ffff17 	ldw	r3,-4(fp)
 2800e6c:	00800044 	movi	r2,1
 2800e70:	18800815 	stw	r2,32(r3)
    rx_slot      = &priv->rx_buf[priv->rx_start];
 2800e74:	e0bfff17 	ldw	r2,-4(fp)
 2800e78:	10c01904 	addi	r3,r2,100
 2800e7c:	e0bfff17 	ldw	r2,-4(fp)
 2800e80:	10800317 	ldw	r2,12(r2)
 2800e84:	1004913a 	slli	r2,r2,4
 2800e88:	1885883a 	add	r2,r3,r2
 2800e8c:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
 2800e90:	e0bfff17 	ldw	r2,-4(fp)
 2800e94:	10800017 	ldw	r2,0(r2)
 2800e98:	11000204 	addi	r4,r2,8
 2800e9c:	e0bffe17 	ldw	r2,-8(fp)
 2800ea0:	10800017 	ldw	r2,0(r2)
 2800ea4:	1007883a 	mov	r3,r2
 2800ea8:	2005883a 	mov	r2,r4
 2800eac:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
 2800eb0:	e0bfff17 	ldw	r2,-4(fp)
 2800eb4:	10800017 	ldw	r2,0(r2)
 2800eb8:	11000304 	addi	r4,r2,12
 2800ebc:	e0bffe17 	ldw	r2,-8(fp)
 2800ec0:	10800117 	ldw	r2,4(r2)
 2800ec4:	1007883a 	mov	r3,r2
 2800ec8:	2005883a 	mov	r2,r4
 2800ecc:	10c00035 	stwio	r3,0(r2)
 2800ed0:	00000206 	br	2800edc <alt_avalon_dma_launch_rxonly+0x98>
  }
  else
  {
    priv->active = 0;
 2800ed4:	e0bfff17 	ldw	r2,-4(fp)
 2800ed8:	10000815 	stw	zero,32(r2)
  }
}
 2800edc:	e037883a 	mov	sp,fp
 2800ee0:	df000017 	ldw	fp,0(sp)
 2800ee4:	dec00104 	addi	sp,sp,4
 2800ee8:	f800283a 	ret

02800eec <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
 2800eec:	defff804 	addi	sp,sp,-32
 2800ef0:	df000715 	stw	fp,28(sp)
 2800ef4:	df000704 	addi	fp,sp,28
 2800ef8:	e13ffb15 	stw	r4,-20(fp)
 2800efc:	e17ffc15 	stw	r5,-16(fp)
 2800f00:	e1bffd15 	stw	r6,-12(fp)
  int     status = 0;
 2800f04:	e03ffa15 	stw	zero,-24(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
 2800f08:	e0bffb17 	ldw	r2,-20(fp)
 2800f0c:	10c00117 	ldw	r3,4(r2)
 2800f10:	e0bffb17 	ldw	r2,-20(fp)
 2800f14:	10800217 	ldw	r2,8(r2)
 2800f18:	18800b1e 	bne	r3,r2,2800f48 <alt_avalon_dma_ioctl+0x5c>
 2800f1c:	e0bffb17 	ldw	r2,-20(fp)
 2800f20:	10c00317 	ldw	r3,12(r2)
 2800f24:	e0bffb17 	ldw	r2,-20(fp)
 2800f28:	10800417 	ldw	r2,16(r2)
 2800f2c:	1880061e 	bne	r3,r2,2800f48 <alt_avalon_dma_ioctl+0x5c>
 2800f30:	e0bffb17 	ldw	r2,-20(fp)
 2800f34:	10800017 	ldw	r2,0(r2)
 2800f38:	10800304 	addi	r2,r2,12
 2800f3c:	10800037 	ldwio	r2,0(r2)
 2800f40:	1005003a 	cmpeq	r2,r2,zero
 2800f44:	1000031e 	bne	r2,zero,2800f54 <alt_avalon_dma_ioctl+0x68>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
 2800f48:	00bffec4 	movi	r2,-5
 2800f4c:	e0bfff15 	stw	r2,-4(fp)
 2800f50:	0000ca06 	br	280127c <alt_avalon_dma_ioctl+0x390>
  }

  /* Now process the ioctl. */

  switch (req)
 2800f54:	e0bffc17 	ldw	r2,-16(fp)
 2800f58:	108002a8 	cmpgeui	r2,r2,10
 2800f5c:	10007d1e 	bne	r2,zero,2801154 <alt_avalon_dma_ioctl+0x268>
 2800f60:	e0bffc17 	ldw	r2,-16(fp)
 2800f64:	1085883a 	add	r2,r2,r2
 2800f68:	1087883a 	add	r3,r2,r2
 2800f6c:	0080a034 	movhi	r2,640
 2800f70:	1083e004 	addi	r2,r2,3968
 2800f74:	1885883a 	add	r2,r3,r2
 2800f78:	10800017 	ldw	r2,0(r2)
 2800f7c:	1000683a 	jmp	r2
 2800f80:	02801154 	movui	r10,69
 2800f84:	02800fa8 	cmpgeui	r10,zero,62
 2800f88:	02801004 	movi	r10,64
 2800f8c:	02801030 	cmpltui	r10,zero,64
 2800f90:	0280108c 	andi	r10,zero,66
 2800f94:	028010b8 	rdprs	r10,zero,66
 2800f98:	028010d4 	movui	r10,67
 2800f9c:	028010f4 	movhi	r10,67
 2800fa0:	02801114 	movui	r10,68
 2800fa4:	02801134 	movhi	r10,68
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
 2800fa8:	e0bffb17 	ldw	r2,-20(fp)
 2800fac:	10800517 	ldw	r2,20(r2)
 2800fb0:	1080100c 	andi	r2,r2,64
 2800fb4:	1004c03a 	cmpne	r2,r2,zero
 2800fb8:	10000f1e 	bne	r2,zero,2800ff8 <alt_avalon_dma_ioctl+0x10c>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
 2800fbc:	e0bffb17 	ldw	r2,-20(fp)
 2800fc0:	10800017 	ldw	r2,0(r2)
 2800fc4:	10800104 	addi	r2,r2,4
 2800fc8:	e0fffd17 	ldw	r3,-12(fp)
 2800fcc:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
 2800fd0:	e0bffb17 	ldw	r2,-20(fp)
 2800fd4:	10800517 	ldw	r2,20(r2)
 2800fd8:	10c00814 	ori	r3,r2,32
 2800fdc:	e0bffb17 	ldw	r2,-20(fp)
 2800fe0:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
 2800fe4:	e0fffb17 	ldw	r3,-20(fp)
 2800fe8:	0080a034 	movhi	r2,640
 2800fec:	10839104 	addi	r2,r2,3652
 2800ff0:	18800715 	stw	r2,28(r3)
 2800ff4:	00005906 	br	280115c <alt_avalon_dma_ioctl+0x270>
    }
    else
    {
      status = -EIO;
 2800ff8:	00bffec4 	movi	r2,-5
 2800ffc:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
 2801000:	00005606 	br	280115c <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
 2801004:	e0bffb17 	ldw	r2,-20(fp)
 2801008:	10c00517 	ldw	r3,20(r2)
 280100c:	00bff7c4 	movi	r2,-33
 2801010:	1886703a 	and	r3,r3,r2
 2801014:	e0bffb17 	ldw	r2,-20(fp)
 2801018:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
 280101c:	e0fffb17 	ldw	r3,-20(fp)
 2801020:	0080a034 	movhi	r2,640
 2801024:	10831f04 	addi	r2,r2,3196
 2801028:	18800715 	stw	r2,28(r3)
    break;
 280102c:	00004b06 	br	280115c <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
 2801030:	e0bffb17 	ldw	r2,-20(fp)
 2801034:	10800517 	ldw	r2,20(r2)
 2801038:	1080080c 	andi	r2,r2,32
 280103c:	1004c03a 	cmpne	r2,r2,zero
 2801040:	10000f1e 	bne	r2,zero,2801080 <alt_avalon_dma_ioctl+0x194>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
 2801044:	e0bffb17 	ldw	r2,-20(fp)
 2801048:	10800017 	ldw	r2,0(r2)
 280104c:	10800204 	addi	r2,r2,8
 2801050:	e0fffd17 	ldw	r3,-12(fp)
 2801054:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
 2801058:	e0bffb17 	ldw	r2,-20(fp)
 280105c:	10800517 	ldw	r2,20(r2)
 2801060:	10c01014 	ori	r3,r2,64
 2801064:	e0bffb17 	ldw	r2,-20(fp)
 2801068:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
 280106c:	e0fffb17 	ldw	r3,-20(fp)
 2801070:	0080a034 	movhi	r2,640
 2801074:	10836704 	addi	r2,r2,3484
 2801078:	18800715 	stw	r2,28(r3)
 280107c:	00003706 	br	280115c <alt_avalon_dma_ioctl+0x270>
    }
    else
    {
      status = -EIO;
 2801080:	00bffec4 	movi	r2,-5
 2801084:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
 2801088:	00003406 	br	280115c <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
 280108c:	e0bffb17 	ldw	r2,-20(fp)
 2801090:	10c00517 	ldw	r3,20(r2)
 2801094:	00bfefc4 	movi	r2,-65
 2801098:	1886703a 	and	r3,r3,r2
 280109c:	e0bffb17 	ldw	r2,-20(fp)
 28010a0:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
 28010a4:	e0fffb17 	ldw	r3,-20(fp)
 28010a8:	0080a034 	movhi	r2,640
 28010ac:	10831f04 	addi	r2,r2,3196
 28010b0:	18800715 	stw	r2,28(r3)
    break;
 28010b4:	00002906 	br	280115c <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 28010b8:	e0bffb17 	ldw	r2,-20(fp)
 28010bc:	10c00517 	ldw	r3,20(r2)
 28010c0:	00bffc04 	movi	r2,-16
 28010c4:	1886703a 	and	r3,r3,r2
 28010c8:	e0bffb17 	ldw	r2,-20(fp)
 28010cc:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
 28010d0:	00002206 	br	280115c <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 28010d4:	e0bffb17 	ldw	r2,-20(fp)
 28010d8:	10c00517 	ldw	r3,20(r2)
 28010dc:	00bffc04 	movi	r2,-16
 28010e0:	1884703a 	and	r2,r3,r2
 28010e4:	10c00054 	ori	r3,r2,1
 28010e8:	e0bffb17 	ldw	r2,-20(fp)
 28010ec:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
 28010f0:	00001a06 	br	280115c <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 28010f4:	e0bffb17 	ldw	r2,-20(fp)
 28010f8:	10c00517 	ldw	r3,20(r2)
 28010fc:	00bffc04 	movi	r2,-16
 2801100:	1884703a 	and	r2,r3,r2
 2801104:	10c000d4 	ori	r3,r2,3
 2801108:	e0bffb17 	ldw	r2,-20(fp)
 280110c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
 2801110:	00001206 	br	280115c <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 2801114:	e0bffb17 	ldw	r2,-20(fp)
 2801118:	10c00517 	ldw	r3,20(r2)
 280111c:	00bffc04 	movi	r2,-16
 2801120:	1884703a 	and	r2,r3,r2
 2801124:	10c001d4 	ori	r3,r2,7
 2801128:	e0bffb17 	ldw	r2,-20(fp)
 280112c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
 2801130:	00000a06 	br	280115c <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 2801134:	e0bffb17 	ldw	r2,-20(fp)
 2801138:	10c00517 	ldw	r3,20(r2)
 280113c:	00bffc04 	movi	r2,-16
 2801140:	1884703a 	and	r2,r3,r2
 2801144:	10c003d4 	ori	r3,r2,15
 2801148:	e0bffb17 	ldw	r2,-20(fp)
 280114c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
 2801150:	00000206 	br	280115c <alt_avalon_dma_ioctl+0x270>
  default:
    status = -ENOTTY;
 2801154:	00bff9c4 	movi	r2,-25
 2801158:	e0bffa15 	stw	r2,-24(fp)
  }

  if (!status)
 280115c:	e0bffa17 	ldw	r2,-24(fp)
 2801160:	1004c03a 	cmpne	r2,r2,zero
 2801164:	1000431e 	bne	r2,zero,2801274 <alt_avalon_dma_ioctl+0x388>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
 2801168:	e0bffb17 	ldw	r2,-20(fp)
 280116c:	10800517 	ldw	r2,20(r2)
 2801170:	108003cc 	andi	r2,r2,15
 2801174:	e0bffe15 	stw	r2,-8(fp)
 2801178:	e0fffe17 	ldw	r3,-8(fp)
 280117c:	18800060 	cmpeqi	r2,r3,1
 2801180:	10000d1e 	bne	r2,zero,28011b8 <alt_avalon_dma_ioctl+0x2cc>
 2801184:	e0fffe17 	ldw	r3,-8(fp)
 2801188:	18800070 	cmpltui	r2,r3,1
 280118c:	1000071e 	bne	r2,zero,28011ac <alt_avalon_dma_ioctl+0x2c0>
 2801190:	e0fffe17 	ldw	r3,-8(fp)
 2801194:	188000e0 	cmpeqi	r2,r3,3
 2801198:	10000a1e 	bne	r2,zero,28011c4 <alt_avalon_dma_ioctl+0x2d8>
 280119c:	e0fffe17 	ldw	r3,-8(fp)
 28011a0:	188001e0 	cmpeqi	r2,r3,7
 28011a4:	10000a1e 	bne	r2,zero,28011d0 <alt_avalon_dma_ioctl+0x2e4>
 28011a8:	00000c06 	br	28011dc <alt_avalon_dma_ioctl+0x2f0>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
 28011ac:	00800044 	movi	r2,1
 28011b0:	e0bff915 	stw	r2,-28(fp)
       break;
 28011b4:	00000b06 	br	28011e4 <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
 28011b8:	00800084 	movi	r2,2
 28011bc:	e0bff915 	stw	r2,-28(fp)
       break;
 28011c0:	00000806 	br	28011e4 <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
 28011c4:	00800104 	movi	r2,4
 28011c8:	e0bff915 	stw	r2,-28(fp)
       break;
 28011cc:	00000506 	br	28011e4 <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
 28011d0:	00810004 	movi	r2,1024
 28011d4:	e0bff915 	stw	r2,-28(fp)
       break;
 28011d8:	00000206 	br	28011e4 <alt_avalon_dma_ioctl+0x2f8>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
 28011dc:	00820004 	movi	r2,2048
 28011e0:	e0bff915 	stw	r2,-28(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
 28011e4:	e0bffb17 	ldw	r2,-20(fp)
 28011e8:	10800517 	ldw	r2,20(r2)
 28011ec:	1080080c 	andi	r2,r2,32
 28011f0:	1005003a 	cmpeq	r2,r2,zero
 28011f4:	1000091e 	bne	r2,zero,280121c <alt_avalon_dma_ioctl+0x330>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 28011f8:	e0bffb17 	ldw	r2,-20(fp)
 28011fc:	10800017 	ldw	r2,0(r2)
 2801200:	11000604 	addi	r4,r2,24
 2801204:	e0bff917 	ldw	r2,-28(fp)
 2801208:	10807e14 	ori	r2,r2,504
 280120c:	1007883a 	mov	r3,r2
 2801210:	2005883a 	mov	r2,r4
 2801214:	10c00035 	stwio	r3,0(r2)
 2801218:	00001606 	br	2801274 <alt_avalon_dma_ioctl+0x388>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
 280121c:	e0bffb17 	ldw	r2,-20(fp)
 2801220:	10800517 	ldw	r2,20(r2)
 2801224:	1080100c 	andi	r2,r2,64
 2801228:	1005003a 	cmpeq	r2,r2,zero
 280122c:	1000091e 	bne	r2,zero,2801254 <alt_avalon_dma_ioctl+0x368>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 2801230:	e0bffb17 	ldw	r2,-20(fp)
 2801234:	10800017 	ldw	r2,0(r2)
 2801238:	11000604 	addi	r4,r2,24
 280123c:	e0bff917 	ldw	r2,-28(fp)
 2801240:	1080be14 	ori	r2,r2,760
 2801244:	1007883a 	mov	r3,r2
 2801248:	2005883a 	mov	r2,r4
 280124c:	10c00035 	stwio	r3,0(r2)
 2801250:	00000806 	br	2801274 <alt_avalon_dma_ioctl+0x388>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 2801254:	e0bffb17 	ldw	r2,-20(fp)
 2801258:	10800017 	ldw	r2,0(r2)
 280125c:	11000604 	addi	r4,r2,24
 2801260:	e0bff917 	ldw	r2,-28(fp)
 2801264:	10803e14 	ori	r2,r2,248
 2801268:	1007883a 	mov	r3,r2
 280126c:	2005883a 	mov	r2,r4
 2801270:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
 2801274:	e0bffa17 	ldw	r2,-24(fp)
 2801278:	e0bfff15 	stw	r2,-4(fp)
 280127c:	e0bfff17 	ldw	r2,-4(fp)
}
 2801280:	e037883a 	mov	sp,fp
 2801284:	df000017 	ldw	fp,0(sp)
 2801288:	dec00104 	addi	sp,sp,4
 280128c:	f800283a 	ret

02801290 <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
 2801290:	defffb04 	addi	sp,sp,-20
 2801294:	dfc00415 	stw	ra,16(sp)
 2801298:	df000315 	stw	fp,12(sp)
 280129c:	df000304 	addi	fp,sp,12
 28012a0:	e13ffd15 	stw	r4,-12(fp)
 28012a4:	e17ffe15 	stw	r5,-8(fp)
 28012a8:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
 28012ac:	e0bffd17 	ldw	r2,-12(fp)
 28012b0:	11000617 	ldw	r4,24(r2)
 28012b4:	e17ffe17 	ldw	r5,-8(fp)
 28012b8:	e1bfff17 	ldw	r6,-4(fp)
 28012bc:	2800eec0 	call	2800eec <alt_avalon_dma_ioctl>
             req,
             arg);
}
 28012c0:	e037883a 	mov	sp,fp
 28012c4:	dfc00117 	ldw	ra,4(sp)
 28012c8:	df000017 	ldw	fp,0(sp)
 28012cc:	dec00204 	addi	sp,sp,8
 28012d0:	f800283a 	ret

028012d4 <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
 28012d4:	defffb04 	addi	sp,sp,-20
 28012d8:	dfc00415 	stw	ra,16(sp)
 28012dc:	df000315 	stw	fp,12(sp)
 28012e0:	df000304 	addi	fp,sp,12
 28012e4:	e13ffd15 	stw	r4,-12(fp)
 28012e8:	e17ffe15 	stw	r5,-8(fp)
 28012ec:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
 28012f0:	e0bffd17 	ldw	r2,-12(fp)
 28012f4:	11000617 	ldw	r4,24(r2)
 28012f8:	e17ffe17 	ldw	r5,-8(fp)
 28012fc:	e1bfff17 	ldw	r6,-4(fp)
 2801300:	2800eec0 	call	2800eec <alt_avalon_dma_ioctl>
             req,
             arg);
}
 2801304:	e037883a 	mov	sp,fp
 2801308:	dfc00117 	ldw	ra,4(sp)
 280130c:	df000017 	ldw	fp,0(sp)
 2801310:	dec00204 	addi	sp,sp,8
 2801314:	f800283a 	ret

02801318 <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
 2801318:	defff304 	addi	sp,sp,-52
 280131c:	dfc00c15 	stw	ra,48(sp)
 2801320:	df000b15 	stw	fp,44(sp)
 2801324:	df000b04 	addi	fp,sp,44
 2801328:	e13ffb15 	stw	r4,-20(fp)
 280132c:	e17ffc15 	stw	r5,-16(fp)
 2801330:	e1bffd15 	stw	r6,-12(fp)
 2801334:	e1fffe15 	stw	r7,-8(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
 2801338:	e0bffb17 	ldw	r2,-20(fp)
 280133c:	10800617 	ldw	r2,24(r2)
 2801340:	e0bff515 	stw	r2,-44(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
 2801344:	e0bff517 	ldw	r2,-44(fp)
 2801348:	10800517 	ldw	r2,20(r2)
 280134c:	108003cc 	andi	r2,r2,15
 2801350:	e0bff615 	stw	r2,-40(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
 2801354:	e0bffc17 	ldw	r2,-16(fp)
 2801358:	1007883a 	mov	r3,r2
 280135c:	e0bff617 	ldw	r2,-40(fp)
 2801360:	1884703a 	and	r2,r3,r2
 2801364:	1004c03a 	cmpne	r2,r2,zero
 2801368:	1000091e 	bne	r2,zero,2801390 <alt_avalon_dma_prepare+0x78>
 280136c:	e0fffd17 	ldw	r3,-12(fp)
 2801370:	e0bff617 	ldw	r2,-40(fp)
 2801374:	1884703a 	and	r2,r3,r2
 2801378:	1004c03a 	cmpne	r2,r2,zero
 280137c:	1000041e 	bne	r2,zero,2801390 <alt_avalon_dma_prepare+0x78>
 2801380:	e0bff517 	ldw	r2,-44(fp)
 2801384:	10c00617 	ldw	r3,24(r2)
 2801388:	e0bffd17 	ldw	r2,-12(fp)
 280138c:	1880032e 	bgeu	r3,r2,280139c <alt_avalon_dma_prepare+0x84>
     (len > priv->max_length))
  {
    return -EINVAL;
 2801390:	00bffa84 	movi	r2,-22
 2801394:	e0bfff15 	stw	r2,-4(fp)
 2801398:	00002e06 	br	2801454 <alt_avalon_dma_prepare+0x13c>
  }

  start = priv->rx_start;
 280139c:	e0bff517 	ldw	r2,-44(fp)
 28013a0:	10800317 	ldw	r2,12(r2)
 28013a4:	e0bff915 	stw	r2,-28(fp)
  end   = priv->rx_end;
 28013a8:	e0bff517 	ldw	r2,-44(fp)
 28013ac:	10800417 	ldw	r2,16(r2)
 28013b0:	e0bff815 	stw	r2,-32(fp)
  slot  = &priv->rx_buf[end];
 28013b4:	e0bff517 	ldw	r2,-44(fp)
 28013b8:	10c01904 	addi	r3,r2,100
 28013bc:	e0bff817 	ldw	r2,-32(fp)
 28013c0:	1004913a 	slli	r2,r2,4
 28013c4:	1885883a 	add	r2,r3,r2
 28013c8:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 28013cc:	e0bff817 	ldw	r2,-32(fp)
 28013d0:	10800044 	addi	r2,r2,1
 28013d4:	108000cc 	andi	r2,r2,3
 28013d8:	e0bff715 	stw	r2,-36(fp)

  if (next == start)
 28013dc:	e0fff717 	ldw	r3,-36(fp)
 28013e0:	e0bff917 	ldw	r2,-28(fp)
 28013e4:	1880031e 	bne	r3,r2,28013f4 <alt_avalon_dma_prepare+0xdc>
  {
    return -ENOSPC;
 28013e8:	00bff904 	movi	r2,-28
 28013ec:	e0bfff15 	stw	r2,-4(fp)
 28013f0:	00001806 	br	2801454 <alt_avalon_dma_prepare+0x13c>
  }

  slot->data   = data;
 28013f4:	e0fffa17 	ldw	r3,-24(fp)
 28013f8:	e0bffc17 	ldw	r2,-16(fp)
 28013fc:	18800015 	stw	r2,0(r3)
  slot->len    = len;
 2801400:	e0fffa17 	ldw	r3,-24(fp)
 2801404:	e0bffd17 	ldw	r2,-12(fp)
 2801408:	18800115 	stw	r2,4(r3)
  slot->done   = done;
 280140c:	e0fffa17 	ldw	r3,-24(fp)
 2801410:	e0bffe17 	ldw	r2,-8(fp)
 2801414:	18800215 	stw	r2,8(r3)
  slot->handle = handle;
 2801418:	e0fffa17 	ldw	r3,-24(fp)
 280141c:	e0800217 	ldw	r2,8(fp)
 2801420:	18800315 	stw	r2,12(r3)

  priv->rx_end = next;
 2801424:	e0fff517 	ldw	r3,-44(fp)
 2801428:	e0bff717 	ldw	r2,-36(fp)
 280142c:	18800415 	stw	r2,16(r3)

  if (!priv->active)
 2801430:	e0bff517 	ldw	r2,-44(fp)
 2801434:	10800817 	ldw	r2,32(r2)
 2801438:	1004c03a 	cmpne	r2,r2,zero
 280143c:	1000041e 	bne	r2,zero,2801450 <alt_avalon_dma_prepare+0x138>
  {
    priv->launch (priv);
 2801440:	e0bff517 	ldw	r2,-44(fp)
 2801444:	10800717 	ldw	r2,28(r2)
 2801448:	e13ff517 	ldw	r4,-44(fp)
 280144c:	103ee83a 	callr	r2
  }

  return 0;
 2801450:	e03fff15 	stw	zero,-4(fp)
 2801454:	e0bfff17 	ldw	r2,-4(fp)
}
 2801458:	e037883a 	mov	sp,fp
 280145c:	dfc00117 	ldw	ra,4(sp)
 2801460:	df000017 	ldw	fp,0(sp)
 2801464:	dec00204 	addi	sp,sp,8
 2801468:	f800283a 	ret

0280146c <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
 280146c:	defffa04 	addi	sp,sp,-24
 2801470:	df000515 	stw	fp,20(sp)
 2801474:	df000504 	addi	fp,sp,20
 2801478:	e13ffe15 	stw	r4,-8(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
 280147c:	e0bffe17 	ldw	r2,-8(fp)
 2801480:	10800617 	ldw	r2,24(r2)
 2801484:	e0bffd15 	stw	r2,-12(fp)

  start = priv->tx_start;
 2801488:	e0bffd17 	ldw	r2,-12(fp)
 280148c:	10800117 	ldw	r2,4(r2)
 2801490:	e0bffc15 	stw	r2,-16(fp)
  end   = priv->tx_end;
 2801494:	e0bffd17 	ldw	r2,-12(fp)
 2801498:	10800217 	ldw	r2,8(r2)
 280149c:	e0bffb15 	stw	r2,-20(fp)

  return (start > end) ? start - end - 1 :
 28014a0:	e0fffc17 	ldw	r3,-16(fp)
 28014a4:	e0bffb17 	ldw	r2,-20(fp)
 28014a8:	10c0062e 	bgeu	r2,r3,28014c4 <alt_avalon_dma_space+0x58>
 28014ac:	e0fffc17 	ldw	r3,-16(fp)
 28014b0:	e0bffb17 	ldw	r2,-20(fp)
 28014b4:	1885c83a 	sub	r2,r3,r2
 28014b8:	10bfffc4 	addi	r2,r2,-1
 28014bc:	e0bfff15 	stw	r2,-4(fp)
 28014c0:	00000506 	br	28014d8 <alt_avalon_dma_space+0x6c>
 28014c4:	e0fffc17 	ldw	r3,-16(fp)
 28014c8:	e0bffb17 	ldw	r2,-20(fp)
 28014cc:	1885c83a 	sub	r2,r3,r2
 28014d0:	108000c4 	addi	r2,r2,3
 28014d4:	e0bfff15 	stw	r2,-4(fp)
 28014d8:	e0bfff17 	ldw	r2,-4(fp)
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
}
 28014dc:	e037883a 	mov	sp,fp
 28014e0:	df000017 	ldw	fp,0(sp)
 28014e4:	dec00104 	addi	sp,sp,4
 28014e8:	f800283a 	ret

028014ec <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
 28014ec:	defff304 	addi	sp,sp,-52
 28014f0:	dfc00c15 	stw	ra,48(sp)
 28014f4:	df000b15 	stw	fp,44(sp)
 28014f8:	df000b04 	addi	fp,sp,44
 28014fc:	e13ffb15 	stw	r4,-20(fp)
 2801500:	e17ffc15 	stw	r5,-16(fp)
 2801504:	e1bffd15 	stw	r6,-12(fp)
 2801508:	e1fffe15 	stw	r7,-8(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
 280150c:	e0bffb17 	ldw	r2,-20(fp)
 2801510:	10800617 	ldw	r2,24(r2)
 2801514:	e0bff515 	stw	r2,-44(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
 2801518:	e0bff517 	ldw	r2,-44(fp)
 280151c:	10800517 	ldw	r2,20(r2)
 2801520:	108003cc 	andi	r2,r2,15
 2801524:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
 2801528:	e0bffc17 	ldw	r2,-16(fp)
 280152c:	1007883a 	mov	r3,r2
 2801530:	e0bff717 	ldw	r2,-36(fp)
 2801534:	1884703a 	and	r2,r3,r2
 2801538:	1004c03a 	cmpne	r2,r2,zero
 280153c:	1000091e 	bne	r2,zero,2801564 <alt_avalon_dma_send+0x78>
 2801540:	e0fffd17 	ldw	r3,-12(fp)
 2801544:	e0bff717 	ldw	r2,-36(fp)
 2801548:	1884703a 	and	r2,r3,r2
 280154c:	1004c03a 	cmpne	r2,r2,zero
 2801550:	1000041e 	bne	r2,zero,2801564 <alt_avalon_dma_send+0x78>
 2801554:	e0bff517 	ldw	r2,-44(fp)
 2801558:	10c00617 	ldw	r3,24(r2)
 280155c:	e0bffd17 	ldw	r2,-12(fp)
 2801560:	1880032e 	bgeu	r3,r2,2801570 <alt_avalon_dma_send+0x84>
        (len & align_mask)            ||
        (len > priv->max_length))
  {
    return -EINVAL;
 2801564:	00bffa84 	movi	r2,-22
 2801568:	e0bfff15 	stw	r2,-4(fp)
 280156c:	00002e06 	br	2801628 <alt_avalon_dma_send+0x13c>
  }

  start = priv->tx_start;
 2801570:	e0bff517 	ldw	r2,-44(fp)
 2801574:	10800117 	ldw	r2,4(r2)
 2801578:	e0bff915 	stw	r2,-28(fp)
  end   = priv->tx_end;
 280157c:	e0bff517 	ldw	r2,-44(fp)
 2801580:	10800217 	ldw	r2,8(r2)
 2801584:	e0bff815 	stw	r2,-32(fp)
  slot  = &priv->tx_buf[end];
 2801588:	e0bff517 	ldw	r2,-44(fp)
 280158c:	10c00904 	addi	r3,r2,36
 2801590:	e0bff817 	ldw	r2,-32(fp)
 2801594:	1004913a 	slli	r2,r2,4
 2801598:	1885883a 	add	r2,r3,r2
 280159c:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 28015a0:	e0bff817 	ldw	r2,-32(fp)
 28015a4:	10800044 	addi	r2,r2,1
 28015a8:	108000cc 	andi	r2,r2,3
 28015ac:	e0bff615 	stw	r2,-40(fp)

  if (next == start)
 28015b0:	e0fff617 	ldw	r3,-40(fp)
 28015b4:	e0bff917 	ldw	r2,-28(fp)
 28015b8:	1880031e 	bne	r3,r2,28015c8 <alt_avalon_dma_send+0xdc>
  {
    return -ENOSPC;
 28015bc:	00bff904 	movi	r2,-28
 28015c0:	e0bfff15 	stw	r2,-4(fp)
 28015c4:	00001806 	br	2801628 <alt_avalon_dma_send+0x13c>
  }

  /* Fill in the descriptor */

  slot->from   = from;
 28015c8:	e0fffa17 	ldw	r3,-24(fp)
 28015cc:	e0bffc17 	ldw	r2,-16(fp)
 28015d0:	18800015 	stw	r2,0(r3)
  slot->len    = len;
 28015d4:	e0fffa17 	ldw	r3,-24(fp)
 28015d8:	e0bffd17 	ldw	r2,-12(fp)
 28015dc:	18800115 	stw	r2,4(r3)
  slot->done   = done;
 28015e0:	e0fffa17 	ldw	r3,-24(fp)
 28015e4:	e0bffe17 	ldw	r2,-8(fp)
 28015e8:	18800215 	stw	r2,8(r3)
  slot->handle = handle;
 28015ec:	e0fffa17 	ldw	r3,-24(fp)
 28015f0:	e0800217 	ldw	r2,8(fp)
 28015f4:	18800315 	stw	r2,12(r3)

  priv->tx_end = next;
 28015f8:	e0fff517 	ldw	r3,-44(fp)
 28015fc:	e0bff617 	ldw	r2,-40(fp)
 2801600:	18800215 	stw	r2,8(r3)

  if (!priv->active)
 2801604:	e0bff517 	ldw	r2,-44(fp)
 2801608:	10800817 	ldw	r2,32(r2)
 280160c:	1004c03a 	cmpne	r2,r2,zero
 2801610:	1000041e 	bne	r2,zero,2801624 <alt_avalon_dma_send+0x138>
  {
    priv->launch (priv);
 2801614:	e0bff517 	ldw	r2,-44(fp)
 2801618:	10800717 	ldw	r2,28(r2)
 280161c:	e13ff517 	ldw	r4,-44(fp)
 2801620:	103ee83a 	callr	r2
  }

  return 0;
 2801624:	e03fff15 	stw	zero,-4(fp)
 2801628:	e0bfff17 	ldw	r2,-4(fp)
}
 280162c:	e037883a 	mov	sp,fp
 2801630:	dfc00117 	ldw	ra,4(sp)
 2801634:	df000017 	ldw	fp,0(sp)
 2801638:	dec00204 	addi	sp,sp,8
 280163c:	f800283a 	ret

02801640 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
 2801640:	defff104 	addi	sp,sp,-60
 2801644:	dfc00e15 	stw	ra,56(sp)
 2801648:	df000d15 	stw	fp,52(sp)
 280164c:	df000d04 	addi	fp,sp,52
 2801650:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
 2801654:	e0bfff17 	ldw	r2,-4(fp)
 2801658:	e0bffe15 	stw	r2,-8(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
 280165c:	e0bffe17 	ldw	r2,-8(fp)
 2801660:	10800517 	ldw	r2,20(r2)
 2801664:	1080080c 	andi	r2,r2,32
 2801668:	e0bff915 	stw	r2,-28(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
 280166c:	e0bffe17 	ldw	r2,-8(fp)
 2801670:	10800517 	ldw	r2,20(r2)
 2801674:	1080100c 	andi	r2,r2,64
 2801678:	e0bff815 	stw	r2,-32(fp)

  tx_start = priv->tx_start;
 280167c:	e0bffe17 	ldw	r2,-8(fp)
 2801680:	10800117 	ldw	r2,4(r2)
 2801684:	e0bffb15 	stw	r2,-20(fp)
  rx_start = priv->rx_start;
 2801688:	e0bffe17 	ldw	r2,-8(fp)
 280168c:	10800317 	ldw	r2,12(r2)
 2801690:	e0bffa15 	stw	r2,-24(fp)

  tx_slot = &priv->tx_buf[tx_start];
 2801694:	e0bffe17 	ldw	r2,-8(fp)
 2801698:	10c00904 	addi	r3,r2,36
 280169c:	e0bffb17 	ldw	r2,-20(fp)
 28016a0:	1004913a 	slli	r2,r2,4
 28016a4:	1885883a 	add	r2,r3,r2
 28016a8:	e0bffd15 	stw	r2,-12(fp)
  rx_slot = &priv->rx_buf[rx_start];
 28016ac:	e0bffe17 	ldw	r2,-8(fp)
 28016b0:	10c01904 	addi	r3,r2,100
 28016b4:	e0bffa17 	ldw	r2,-24(fp)
 28016b8:	1004913a 	slli	r2,r2,4
 28016bc:	1885883a 	add	r2,r3,r2
 28016c0:	e0bffc15 	stw	r2,-16(fp)

  /* Increment the descriptors */

  if (!stream_tx)
 28016c4:	e0bff917 	ldw	r2,-28(fp)
 28016c8:	1004c03a 	cmpne	r2,r2,zero
 28016cc:	1000051e 	bne	r2,zero,28016e4 <alt_avalon_dma_irq+0xa4>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 28016d0:	e0bffb17 	ldw	r2,-20(fp)
 28016d4:	10800044 	addi	r2,r2,1
 28016d8:	10c000cc 	andi	r3,r2,3
 28016dc:	e0bffe17 	ldw	r2,-8(fp)
 28016e0:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
 28016e4:	e0bff817 	ldw	r2,-32(fp)
 28016e8:	1004c03a 	cmpne	r2,r2,zero
 28016ec:	1000051e 	bne	r2,zero,2801704 <alt_avalon_dma_irq+0xc4>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 28016f0:	e0bffa17 	ldw	r2,-24(fp)
 28016f4:	10800044 	addi	r2,r2,1
 28016f8:	10c000cc 	andi	r3,r2,3
 28016fc:	e0bffe17 	ldw	r2,-8(fp)
 2801700:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
 2801704:	e0bffe17 	ldw	r2,-8(fp)
 2801708:	10800017 	ldw	r2,0(r2)
 280170c:	10000035 	stwio	zero,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
 2801710:	e0bffe17 	ldw	r2,-8(fp)
 2801714:	10800017 	ldw	r2,0(r2)
 2801718:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
 280171c:	e0bffe17 	ldw	r2,-8(fp)
 2801720:	10800717 	ldw	r2,28(r2)
 2801724:	e13ffe17 	ldw	r4,-8(fp)
 2801728:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
 280172c:	e0bff917 	ldw	r2,-28(fp)
 2801730:	1004c03a 	cmpne	r2,r2,zero
 2801734:	1000151e 	bne	r2,zero,280178c <alt_avalon_dma_irq+0x14c>
 2801738:	e0bffd17 	ldw	r2,-12(fp)
 280173c:	10800217 	ldw	r2,8(r2)
 2801740:	1005003a 	cmpeq	r2,r2,zero
 2801744:	1000111e 	bne	r2,zero,280178c <alt_avalon_dma_irq+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2801748:	0005303a 	rdctl	r2,status
 280174c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2801750:	e0fff617 	ldw	r3,-40(fp)
 2801754:	00bfff84 	movi	r2,-2
 2801758:	1884703a 	and	r2,r3,r2
 280175c:	1001703a 	wrctl	status,r2
  
  return context;
 2801760:	e0bff617 	ldw	r2,-40(fp)
  {
    cpu_sr = alt_irq_disable_all();
 2801764:	e0bff715 	stw	r2,-36(fp)
    tx_slot->done (tx_slot->handle);
 2801768:	e0bffd17 	ldw	r2,-12(fp)
 280176c:	10c00217 	ldw	r3,8(r2)
 2801770:	e0bffd17 	ldw	r2,-12(fp)
 2801774:	11000317 	ldw	r4,12(r2)
 2801778:	183ee83a 	callr	r3
 280177c:	e0bff717 	ldw	r2,-36(fp)
 2801780:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2801784:	e0bff517 	ldw	r2,-44(fp)
 2801788:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
 280178c:	e0bff817 	ldw	r2,-32(fp)
 2801790:	1004c03a 	cmpne	r2,r2,zero
 2801794:	1000171e 	bne	r2,zero,28017f4 <alt_avalon_dma_irq+0x1b4>
 2801798:	e0bffc17 	ldw	r2,-16(fp)
 280179c:	10800217 	ldw	r2,8(r2)
 28017a0:	1005003a 	cmpeq	r2,r2,zero
 28017a4:	1000131e 	bne	r2,zero,28017f4 <alt_avalon_dma_irq+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 28017a8:	0005303a 	rdctl	r2,status
 28017ac:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 28017b0:	e0fff417 	ldw	r3,-48(fp)
 28017b4:	00bfff84 	movi	r2,-2
 28017b8:	1884703a 	and	r2,r3,r2
 28017bc:	1001703a 	wrctl	status,r2
  
  return context;
 28017c0:	e0bff417 	ldw	r2,-48(fp)
  {
    cpu_sr = alt_irq_disable_all();
 28017c4:	e0bff715 	stw	r2,-36(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
 28017c8:	e0bffc17 	ldw	r2,-16(fp)
 28017cc:	10c00217 	ldw	r3,8(r2)
 28017d0:	e0bffc17 	ldw	r2,-16(fp)
 28017d4:	11000317 	ldw	r4,12(r2)
 28017d8:	e0bffc17 	ldw	r2,-16(fp)
 28017dc:	11400017 	ldw	r5,0(r2)
 28017e0:	183ee83a 	callr	r3
 28017e4:	e0bff717 	ldw	r2,-36(fp)
 28017e8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 28017ec:	e0bff317 	ldw	r2,-52(fp)
 28017f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 28017f4:	e037883a 	mov	sp,fp
 28017f8:	dfc00117 	ldw	ra,4(sp)
 28017fc:	df000017 	ldw	fp,0(sp)
 2801800:	dec00204 	addi	sp,sp,8
 2801804:	f800283a 	ret

02801808 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
 2801808:	defff904 	addi	sp,sp,-28
 280180c:	dfc00615 	stw	ra,24(sp)
 2801810:	df000515 	stw	fp,20(sp)
 2801814:	df000504 	addi	fp,sp,20
 2801818:	e13ffc15 	stw	r4,-16(fp)
 280181c:	e17ffd15 	stw	r5,-12(fp)
 2801820:	e1bffe15 	stw	r6,-8(fp)
 2801824:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
 2801828:	e0bffe17 	ldw	r2,-8(fp)
 280182c:	10800604 	addi	r2,r2,24
 2801830:	1007883a 	mov	r3,r2
 2801834:	00840004 	movi	r2,4096
 2801838:	18800035 	stwio	r2,0(r3)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
 280183c:	e0bffe17 	ldw	r2,-8(fp)
 2801840:	10800604 	addi	r2,r2,24
 2801844:	1007883a 	mov	r3,r2
 2801848:	00840004 	movi	r2,4096
 280184c:	18800035 	stwio	r2,0(r3)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
 2801850:	e0bffe17 	ldw	r2,-8(fp)
 2801854:	10800604 	addi	r2,r2,24
 2801858:	1007883a 	mov	r3,r2
 280185c:	00803f04 	movi	r2,252
 2801860:	18800035 	stwio	r2,0(r3)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
 2801864:	e0bffe17 	ldw	r2,-8(fp)
 2801868:	10000035 	stwio	zero,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
 280186c:	e0bffc17 	ldw	r2,-16(fp)
 2801870:	11c00617 	ldw	r7,24(r2)
 2801874:	d8000015 	stw	zero,0(sp)
 2801878:	e13fff17 	ldw	r4,-4(fp)
 280187c:	e1400217 	ldw	r5,8(fp)
 2801880:	0180a034 	movhi	r6,640
 2801884:	31859004 	addi	r6,r6,5696
 2801888:	2802c280 	call	2802c28 <alt_ic_isr_register>
 280188c:	1004803a 	cmplt	r2,r2,zero
 2801890:	1000041e 	bne	r2,zero,28018a4 <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
 2801894:	e13ffc17 	ldw	r4,-16(fp)
 2801898:	28018b80 	call	28018b8 <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
 280189c:	e13ffd17 	ldw	r4,-12(fp)
 28018a0:	28018f00 	call	28018f0 <alt_dma_rxchan_reg>
  }
}
 28018a4:	e037883a 	mov	sp,fp
 28018a8:	dfc00117 	ldw	ra,4(sp)
 28018ac:	df000017 	ldw	fp,0(sp)
 28018b0:	dec00204 	addi	sp,sp,8
 28018b4:	f800283a 	ret

028018b8 <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
 28018b8:	defffd04 	addi	sp,sp,-12
 28018bc:	dfc00215 	stw	ra,8(sp)
 28018c0:	df000115 	stw	fp,4(sp)
 28018c4:	df000104 	addi	fp,sp,4
 28018c8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
 28018cc:	e13fff17 	ldw	r4,-4(fp)
 28018d0:	0140a034 	movhi	r5,640
 28018d4:	2956ac04 	addi	r5,r5,23216
 28018d8:	280282c0 	call	280282c <alt_dev_llist_insert>
}
 28018dc:	e037883a 	mov	sp,fp
 28018e0:	dfc00117 	ldw	ra,4(sp)
 28018e4:	df000017 	ldw	fp,0(sp)
 28018e8:	dec00204 	addi	sp,sp,8
 28018ec:	f800283a 	ret

028018f0 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
 28018f0:	defffd04 	addi	sp,sp,-12
 28018f4:	dfc00215 	stw	ra,8(sp)
 28018f8:	df000115 	stw	fp,4(sp)
 28018fc:	df000104 	addi	fp,sp,4
 2801900:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
 2801904:	e13fff17 	ldw	r4,-4(fp)
 2801908:	0140a034 	movhi	r5,640
 280190c:	2956aa04 	addi	r5,r5,23208
 2801910:	280282c0 	call	280282c <alt_dev_llist_insert>
}
 2801914:	e037883a 	mov	sp,fp
 2801918:	dfc00117 	ldw	ra,4(sp)
 280191c:	df000017 	ldw	fp,0(sp)
 2801920:	dec00204 	addi	sp,sp,8
 2801924:	f800283a 	ret

02801928 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2801928:	defffa04 	addi	sp,sp,-24
 280192c:	dfc00515 	stw	ra,20(sp)
 2801930:	df000415 	stw	fp,16(sp)
 2801934:	df000404 	addi	fp,sp,16
 2801938:	e13ffd15 	stw	r4,-12(fp)
 280193c:	e17ffe15 	stw	r5,-8(fp)
 2801940:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2801944:	e0bffd17 	ldw	r2,-12(fp)
 2801948:	10800017 	ldw	r2,0(r2)
 280194c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2801950:	e0bffc17 	ldw	r2,-16(fp)
 2801954:	11000a04 	addi	r4,r2,40
 2801958:	e0bffd17 	ldw	r2,-12(fp)
 280195c:	11c00217 	ldw	r7,8(r2)
 2801960:	e17ffe17 	ldw	r5,-8(fp)
 2801964:	e1bfff17 	ldw	r6,-4(fp)
 2801968:	2801f700 	call	2801f70 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 280196c:	e037883a 	mov	sp,fp
 2801970:	dfc00117 	ldw	ra,4(sp)
 2801974:	df000017 	ldw	fp,0(sp)
 2801978:	dec00204 	addi	sp,sp,8
 280197c:	f800283a 	ret

02801980 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2801980:	defffa04 	addi	sp,sp,-24
 2801984:	dfc00515 	stw	ra,20(sp)
 2801988:	df000415 	stw	fp,16(sp)
 280198c:	df000404 	addi	fp,sp,16
 2801990:	e13ffd15 	stw	r4,-12(fp)
 2801994:	e17ffe15 	stw	r5,-8(fp)
 2801998:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 280199c:	e0bffd17 	ldw	r2,-12(fp)
 28019a0:	10800017 	ldw	r2,0(r2)
 28019a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 28019a8:	e0bffc17 	ldw	r2,-16(fp)
 28019ac:	11000a04 	addi	r4,r2,40
 28019b0:	e0bffd17 	ldw	r2,-12(fp)
 28019b4:	11c00217 	ldw	r7,8(r2)
 28019b8:	e17ffe17 	ldw	r5,-8(fp)
 28019bc:	e1bfff17 	ldw	r6,-4(fp)
 28019c0:	28021940 	call	2802194 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 28019c4:	e037883a 	mov	sp,fp
 28019c8:	dfc00117 	ldw	ra,4(sp)
 28019cc:	df000017 	ldw	fp,0(sp)
 28019d0:	dec00204 	addi	sp,sp,8
 28019d4:	f800283a 	ret

028019d8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 28019d8:	defffc04 	addi	sp,sp,-16
 28019dc:	dfc00315 	stw	ra,12(sp)
 28019e0:	df000215 	stw	fp,8(sp)
 28019e4:	df000204 	addi	fp,sp,8
 28019e8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 28019ec:	e0bfff17 	ldw	r2,-4(fp)
 28019f0:	10800017 	ldw	r2,0(r2)
 28019f4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 28019f8:	e0bffe17 	ldw	r2,-8(fp)
 28019fc:	11000a04 	addi	r4,r2,40
 2801a00:	e0bfff17 	ldw	r2,-4(fp)
 2801a04:	11400217 	ldw	r5,8(r2)
 2801a08:	2801e080 	call	2801e08 <altera_avalon_jtag_uart_close>
}
 2801a0c:	e037883a 	mov	sp,fp
 2801a10:	dfc00117 	ldw	ra,4(sp)
 2801a14:	df000017 	ldw	fp,0(sp)
 2801a18:	dec00204 	addi	sp,sp,8
 2801a1c:	f800283a 	ret

02801a20 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2801a20:	defffa04 	addi	sp,sp,-24
 2801a24:	dfc00515 	stw	ra,20(sp)
 2801a28:	df000415 	stw	fp,16(sp)
 2801a2c:	df000404 	addi	fp,sp,16
 2801a30:	e13ffd15 	stw	r4,-12(fp)
 2801a34:	e17ffe15 	stw	r5,-8(fp)
 2801a38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2801a3c:	e0bffd17 	ldw	r2,-12(fp)
 2801a40:	10800017 	ldw	r2,0(r2)
 2801a44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2801a48:	e0bffc17 	ldw	r2,-16(fp)
 2801a4c:	11000a04 	addi	r4,r2,40
 2801a50:	e17ffe17 	ldw	r5,-8(fp)
 2801a54:	e1bfff17 	ldw	r6,-4(fp)
 2801a58:	2801e7c0 	call	2801e7c <altera_avalon_jtag_uart_ioctl>
}
 2801a5c:	e037883a 	mov	sp,fp
 2801a60:	dfc00117 	ldw	ra,4(sp)
 2801a64:	df000017 	ldw	fp,0(sp)
 2801a68:	dec00204 	addi	sp,sp,8
 2801a6c:	f800283a 	ret

02801a70 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2801a70:	defffa04 	addi	sp,sp,-24
 2801a74:	dfc00515 	stw	ra,20(sp)
 2801a78:	df000415 	stw	fp,16(sp)
 2801a7c:	df000404 	addi	fp,sp,16
 2801a80:	e13ffd15 	stw	r4,-12(fp)
 2801a84:	e17ffe15 	stw	r5,-8(fp)
 2801a88:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2801a8c:	e0fffd17 	ldw	r3,-12(fp)
 2801a90:	00800044 	movi	r2,1
 2801a94:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2801a98:	e0bffd17 	ldw	r2,-12(fp)
 2801a9c:	10800017 	ldw	r2,0(r2)
 2801aa0:	11000104 	addi	r4,r2,4
 2801aa4:	e0bffd17 	ldw	r2,-12(fp)
 2801aa8:	10800817 	ldw	r2,32(r2)
 2801aac:	1007883a 	mov	r3,r2
 2801ab0:	2005883a 	mov	r2,r4
 2801ab4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2801ab8:	e13ffe17 	ldw	r4,-8(fp)
 2801abc:	e17fff17 	ldw	r5,-4(fp)
 2801ac0:	d8000015 	stw	zero,0(sp)
 2801ac4:	0180a034 	movhi	r6,640
 2801ac8:	3186cc04 	addi	r6,r6,6960
 2801acc:	e1fffd17 	ldw	r7,-12(fp)
 2801ad0:	2802c280 	call	2802c28 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2801ad4:	e0bffd17 	ldw	r2,-12(fp)
 2801ad8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2801adc:	e0bffd17 	ldw	r2,-12(fp)
 2801ae0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2801ae4:	0080a034 	movhi	r2,640
 2801ae8:	109de904 	addi	r2,r2,30628
 2801aec:	10800017 	ldw	r2,0(r2)
 2801af0:	100b883a 	mov	r5,r2
 2801af4:	0180a034 	movhi	r6,640
 2801af8:	31875604 	addi	r6,r6,7512
 2801afc:	e1fffd17 	ldw	r7,-12(fp)
 2801b00:	28023d40 	call	28023d4 <alt_alarm_start>
 2801b04:	1004403a 	cmpge	r2,r2,zero
 2801b08:	1000041e 	bne	r2,zero,2801b1c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2801b0c:	e0fffd17 	ldw	r3,-12(fp)
 2801b10:	00a00034 	movhi	r2,32768
 2801b14:	10bfffc4 	addi	r2,r2,-1
 2801b18:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2801b1c:	e037883a 	mov	sp,fp
 2801b20:	dfc00117 	ldw	ra,4(sp)
 2801b24:	df000017 	ldw	fp,0(sp)
 2801b28:	dec00204 	addi	sp,sp,8
 2801b2c:	f800283a 	ret

02801b30 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2801b30:	defff804 	addi	sp,sp,-32
 2801b34:	df000715 	stw	fp,28(sp)
 2801b38:	df000704 	addi	fp,sp,28
 2801b3c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2801b40:	e0bfff17 	ldw	r2,-4(fp)
 2801b44:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 2801b48:	e0bffe17 	ldw	r2,-8(fp)
 2801b4c:	10800017 	ldw	r2,0(r2)
 2801b50:	e0bffd15 	stw	r2,-12(fp)
 2801b54:	00000006 	br	2801b58 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2801b58:	e0bffd17 	ldw	r2,-12(fp)
 2801b5c:	10800104 	addi	r2,r2,4
 2801b60:	10800037 	ldwio	r2,0(r2)
 2801b64:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2801b68:	e0bffc17 	ldw	r2,-16(fp)
 2801b6c:	1080c00c 	andi	r2,r2,768
 2801b70:	1005003a 	cmpeq	r2,r2,zero
 2801b74:	1000741e 	bne	r2,zero,2801d48 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2801b78:	e0bffc17 	ldw	r2,-16(fp)
 2801b7c:	1080400c 	andi	r2,r2,256
 2801b80:	1005003a 	cmpeq	r2,r2,zero
 2801b84:	1000351e 	bne	r2,zero,2801c5c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2801b88:	00800074 	movhi	r2,1
 2801b8c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2801b90:	e0bffe17 	ldw	r2,-8(fp)
 2801b94:	10800a17 	ldw	r2,40(r2)
 2801b98:	10800044 	addi	r2,r2,1
 2801b9c:	1081ffcc 	andi	r2,r2,2047
 2801ba0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 2801ba4:	e0bffe17 	ldw	r2,-8(fp)
 2801ba8:	10c00b17 	ldw	r3,44(r2)
 2801bac:	e0bffa17 	ldw	r2,-24(fp)
 2801bb0:	18801626 	beq	r3,r2,2801c0c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2801bb4:	e0bffd17 	ldw	r2,-12(fp)
 2801bb8:	10800037 	ldwio	r2,0(r2)
 2801bbc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2801bc0:	e0bffb17 	ldw	r2,-20(fp)
 2801bc4:	10a0000c 	andi	r2,r2,32768
 2801bc8:	1005003a 	cmpeq	r2,r2,zero
 2801bcc:	10000f1e 	bne	r2,zero,2801c0c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2801bd0:	e0bffe17 	ldw	r2,-8(fp)
 2801bd4:	10c00a17 	ldw	r3,40(r2)
 2801bd8:	e0bffb17 	ldw	r2,-20(fp)
 2801bdc:	1009883a 	mov	r4,r2
 2801be0:	e0bffe17 	ldw	r2,-8(fp)
 2801be4:	1885883a 	add	r2,r3,r2
 2801be8:	10800e04 	addi	r2,r2,56
 2801bec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2801bf0:	e0bffe17 	ldw	r2,-8(fp)
 2801bf4:	10800a17 	ldw	r2,40(r2)
 2801bf8:	10800044 	addi	r2,r2,1
 2801bfc:	10c1ffcc 	andi	r3,r2,2047
 2801c00:	e0bffe17 	ldw	r2,-8(fp)
 2801c04:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2801c08:	003fe106 	br	2801b90 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2801c0c:	e0bffb17 	ldw	r2,-20(fp)
 2801c10:	10bfffec 	andhi	r2,r2,65535
 2801c14:	1005003a 	cmpeq	r2,r2,zero
 2801c18:	1000101e 	bne	r2,zero,2801c5c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2801c1c:	e0bffe17 	ldw	r2,-8(fp)
 2801c20:	10c00817 	ldw	r3,32(r2)
 2801c24:	00bfff84 	movi	r2,-2
 2801c28:	1886703a 	and	r3,r3,r2
 2801c2c:	e0bffe17 	ldw	r2,-8(fp)
 2801c30:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2801c34:	e0bffd17 	ldw	r2,-12(fp)
 2801c38:	11000104 	addi	r4,r2,4
 2801c3c:	e0bffe17 	ldw	r2,-8(fp)
 2801c40:	10800817 	ldw	r2,32(r2)
 2801c44:	1007883a 	mov	r3,r2
 2801c48:	2005883a 	mov	r2,r4
 2801c4c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2801c50:	e0bffd17 	ldw	r2,-12(fp)
 2801c54:	10800104 	addi	r2,r2,4
 2801c58:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2801c5c:	e0bffc17 	ldw	r2,-16(fp)
 2801c60:	1080800c 	andi	r2,r2,512
 2801c64:	1005003a 	cmpeq	r2,r2,zero
 2801c68:	103fbb1e 	bne	r2,zero,2801b58 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2801c6c:	e0bffc17 	ldw	r2,-16(fp)
 2801c70:	10bfffec 	andhi	r2,r2,65535
 2801c74:	1004d43a 	srli	r2,r2,16
 2801c78:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2801c7c:	00001506 	br	2801cd4 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2801c80:	e13ffd17 	ldw	r4,-12(fp)
 2801c84:	e0bffe17 	ldw	r2,-8(fp)
 2801c88:	10c00d17 	ldw	r3,52(r2)
 2801c8c:	e0bffe17 	ldw	r2,-8(fp)
 2801c90:	1885883a 	add	r2,r3,r2
 2801c94:	10820e04 	addi	r2,r2,2104
 2801c98:	10800003 	ldbu	r2,0(r2)
 2801c9c:	10c03fcc 	andi	r3,r2,255
 2801ca0:	18c0201c 	xori	r3,r3,128
 2801ca4:	18ffe004 	addi	r3,r3,-128
 2801ca8:	2005883a 	mov	r2,r4
 2801cac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2801cb0:	e0bffe17 	ldw	r2,-8(fp)
 2801cb4:	10800d17 	ldw	r2,52(r2)
 2801cb8:	10800044 	addi	r2,r2,1
 2801cbc:	10c1ffcc 	andi	r3,r2,2047
 2801cc0:	e0bffe17 	ldw	r2,-8(fp)
 2801cc4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2801cc8:	e0bff917 	ldw	r2,-28(fp)
 2801ccc:	10bfffc4 	addi	r2,r2,-1
 2801cd0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2801cd4:	e0bff917 	ldw	r2,-28(fp)
 2801cd8:	1005003a 	cmpeq	r2,r2,zero
 2801cdc:	1000051e 	bne	r2,zero,2801cf4 <altera_avalon_jtag_uart_irq+0x1c4>
 2801ce0:	e0bffe17 	ldw	r2,-8(fp)
 2801ce4:	10c00d17 	ldw	r3,52(r2)
 2801ce8:	e0bffe17 	ldw	r2,-8(fp)
 2801cec:	10800c17 	ldw	r2,48(r2)
 2801cf0:	18bfe31e 	bne	r3,r2,2801c80 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2801cf4:	e0bff917 	ldw	r2,-28(fp)
 2801cf8:	1005003a 	cmpeq	r2,r2,zero
 2801cfc:	103f961e 	bne	r2,zero,2801b58 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2801d00:	e0bffe17 	ldw	r2,-8(fp)
 2801d04:	10c00817 	ldw	r3,32(r2)
 2801d08:	00bfff44 	movi	r2,-3
 2801d0c:	1886703a 	and	r3,r3,r2
 2801d10:	e0bffe17 	ldw	r2,-8(fp)
 2801d14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2801d18:	e0bffe17 	ldw	r2,-8(fp)
 2801d1c:	10800017 	ldw	r2,0(r2)
 2801d20:	11000104 	addi	r4,r2,4
 2801d24:	e0bffe17 	ldw	r2,-8(fp)
 2801d28:	10800817 	ldw	r2,32(r2)
 2801d2c:	1007883a 	mov	r3,r2
 2801d30:	2005883a 	mov	r2,r4
 2801d34:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2801d38:	e0bffd17 	ldw	r2,-12(fp)
 2801d3c:	10800104 	addi	r2,r2,4
 2801d40:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2801d44:	003f8406 	br	2801b58 <altera_avalon_jtag_uart_irq+0x28>
}
 2801d48:	e037883a 	mov	sp,fp
 2801d4c:	df000017 	ldw	fp,0(sp)
 2801d50:	dec00104 	addi	sp,sp,4
 2801d54:	f800283a 	ret

02801d58 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2801d58:	defffc04 	addi	sp,sp,-16
 2801d5c:	df000315 	stw	fp,12(sp)
 2801d60:	df000304 	addi	fp,sp,12
 2801d64:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2801d68:	e0bfff17 	ldw	r2,-4(fp)
 2801d6c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2801d70:	e0bffe17 	ldw	r2,-8(fp)
 2801d74:	10800017 	ldw	r2,0(r2)
 2801d78:	10800104 	addi	r2,r2,4
 2801d7c:	10800037 	ldwio	r2,0(r2)
 2801d80:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2801d84:	e0bffd17 	ldw	r2,-12(fp)
 2801d88:	1081000c 	andi	r2,r2,1024
 2801d8c:	1005003a 	cmpeq	r2,r2,zero
 2801d90:	10000c1e 	bne	r2,zero,2801dc4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2801d94:	e0bffe17 	ldw	r2,-8(fp)
 2801d98:	10800017 	ldw	r2,0(r2)
 2801d9c:	11000104 	addi	r4,r2,4
 2801da0:	e0bffe17 	ldw	r2,-8(fp)
 2801da4:	10800817 	ldw	r2,32(r2)
 2801da8:	10810014 	ori	r2,r2,1024
 2801dac:	1007883a 	mov	r3,r2
 2801db0:	2005883a 	mov	r2,r4
 2801db4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 2801db8:	e0bffe17 	ldw	r2,-8(fp)
 2801dbc:	10000915 	stw	zero,36(r2)
 2801dc0:	00000a06 	br	2801dec <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2801dc4:	e0bffe17 	ldw	r2,-8(fp)
 2801dc8:	10c00917 	ldw	r3,36(r2)
 2801dcc:	00a00034 	movhi	r2,32768
 2801dd0:	10bfff04 	addi	r2,r2,-4
 2801dd4:	10c00536 	bltu	r2,r3,2801dec <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 2801dd8:	e0bffe17 	ldw	r2,-8(fp)
 2801ddc:	10800917 	ldw	r2,36(r2)
 2801de0:	10c00044 	addi	r3,r2,1
 2801de4:	e0bffe17 	ldw	r2,-8(fp)
 2801de8:	10c00915 	stw	r3,36(r2)
 2801dec:	0080a034 	movhi	r2,640
 2801df0:	109de904 	addi	r2,r2,30628
 2801df4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2801df8:	e037883a 	mov	sp,fp
 2801dfc:	df000017 	ldw	fp,0(sp)
 2801e00:	dec00104 	addi	sp,sp,4
 2801e04:	f800283a 	ret

02801e08 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2801e08:	defffc04 	addi	sp,sp,-16
 2801e0c:	df000315 	stw	fp,12(sp)
 2801e10:	df000304 	addi	fp,sp,12
 2801e14:	e13ffd15 	stw	r4,-12(fp)
 2801e18:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2801e1c:	00000706 	br	2801e3c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 2801e20:	e0bffe17 	ldw	r2,-8(fp)
 2801e24:	1090000c 	andi	r2,r2,16384
 2801e28:	1005003a 	cmpeq	r2,r2,zero
 2801e2c:	1000031e 	bne	r2,zero,2801e3c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 2801e30:	00bffd44 	movi	r2,-11
 2801e34:	e0bfff15 	stw	r2,-4(fp)
 2801e38:	00000b06 	br	2801e68 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2801e3c:	e0bffd17 	ldw	r2,-12(fp)
 2801e40:	10c00d17 	ldw	r3,52(r2)
 2801e44:	e0bffd17 	ldw	r2,-12(fp)
 2801e48:	10800c17 	ldw	r2,48(r2)
 2801e4c:	18800526 	beq	r3,r2,2801e64 <altera_avalon_jtag_uart_close+0x5c>
 2801e50:	e0bffd17 	ldw	r2,-12(fp)
 2801e54:	10c00917 	ldw	r3,36(r2)
 2801e58:	e0bffd17 	ldw	r2,-12(fp)
 2801e5c:	10800117 	ldw	r2,4(r2)
 2801e60:	18bfef36 	bltu	r3,r2,2801e20 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2801e64:	e03fff15 	stw	zero,-4(fp)
 2801e68:	e0bfff17 	ldw	r2,-4(fp)
}
 2801e6c:	e037883a 	mov	sp,fp
 2801e70:	df000017 	ldw	fp,0(sp)
 2801e74:	dec00104 	addi	sp,sp,4
 2801e78:	f800283a 	ret

02801e7c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2801e7c:	defff804 	addi	sp,sp,-32
 2801e80:	df000715 	stw	fp,28(sp)
 2801e84:	df000704 	addi	fp,sp,28
 2801e88:	e13ffb15 	stw	r4,-20(fp)
 2801e8c:	e17ffc15 	stw	r5,-16(fp)
 2801e90:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 2801e94:	00bff9c4 	movi	r2,-25
 2801e98:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 2801e9c:	e0bffc17 	ldw	r2,-16(fp)
 2801ea0:	e0bfff15 	stw	r2,-4(fp)
 2801ea4:	e0ffff17 	ldw	r3,-4(fp)
 2801ea8:	189a8060 	cmpeqi	r2,r3,27137
 2801eac:	1000041e 	bne	r2,zero,2801ec0 <altera_avalon_jtag_uart_ioctl+0x44>
 2801eb0:	e0ffff17 	ldw	r3,-4(fp)
 2801eb4:	189a80a0 	cmpeqi	r2,r3,27138
 2801eb8:	10001b1e 	bne	r2,zero,2801f28 <altera_avalon_jtag_uart_ioctl+0xac>
 2801ebc:	00002706 	br	2801f5c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2801ec0:	e0bffb17 	ldw	r2,-20(fp)
 2801ec4:	10c00117 	ldw	r3,4(r2)
 2801ec8:	00a00034 	movhi	r2,32768
 2801ecc:	10bfffc4 	addi	r2,r2,-1
 2801ed0:	18802226 	beq	r3,r2,2801f5c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 2801ed4:	e0bffd17 	ldw	r2,-12(fp)
 2801ed8:	10800017 	ldw	r2,0(r2)
 2801edc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2801ee0:	e0bff917 	ldw	r2,-28(fp)
 2801ee4:	10800090 	cmplti	r2,r2,2
 2801ee8:	1000071e 	bne	r2,zero,2801f08 <altera_avalon_jtag_uart_ioctl+0x8c>
 2801eec:	e0fff917 	ldw	r3,-28(fp)
 2801ef0:	00a00034 	movhi	r2,32768
 2801ef4:	10bfffc4 	addi	r2,r2,-1
 2801ef8:	18800326 	beq	r3,r2,2801f08 <altera_avalon_jtag_uart_ioctl+0x8c>
 2801efc:	e0bff917 	ldw	r2,-28(fp)
 2801f00:	e0bffe15 	stw	r2,-8(fp)
 2801f04:	00000306 	br	2801f14 <altera_avalon_jtag_uart_ioctl+0x98>
 2801f08:	00e00034 	movhi	r3,32768
 2801f0c:	18ffff84 	addi	r3,r3,-2
 2801f10:	e0fffe15 	stw	r3,-8(fp)
 2801f14:	e0bffb17 	ldw	r2,-20(fp)
 2801f18:	e0fffe17 	ldw	r3,-8(fp)
 2801f1c:	10c00115 	stw	r3,4(r2)
      rc = 0;
 2801f20:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 2801f24:	00000d06 	br	2801f5c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2801f28:	e0bffb17 	ldw	r2,-20(fp)
 2801f2c:	10c00117 	ldw	r3,4(r2)
 2801f30:	00a00034 	movhi	r2,32768
 2801f34:	10bfffc4 	addi	r2,r2,-1
 2801f38:	18800826 	beq	r3,r2,2801f5c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2801f3c:	e13ffd17 	ldw	r4,-12(fp)
 2801f40:	e0bffb17 	ldw	r2,-20(fp)
 2801f44:	10c00917 	ldw	r3,36(r2)
 2801f48:	e0bffb17 	ldw	r2,-20(fp)
 2801f4c:	10800117 	ldw	r2,4(r2)
 2801f50:	1885803a 	cmpltu	r2,r3,r2
 2801f54:	20800015 	stw	r2,0(r4)
      rc = 0;
 2801f58:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 2801f5c:	e0bffa17 	ldw	r2,-24(fp)
}
 2801f60:	e037883a 	mov	sp,fp
 2801f64:	df000017 	ldw	fp,0(sp)
 2801f68:	dec00104 	addi	sp,sp,4
 2801f6c:	f800283a 	ret

02801f70 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2801f70:	defff204 	addi	sp,sp,-56
 2801f74:	dfc00d15 	stw	ra,52(sp)
 2801f78:	df000c15 	stw	fp,48(sp)
 2801f7c:	df000c04 	addi	fp,sp,48
 2801f80:	e13ffb15 	stw	r4,-20(fp)
 2801f84:	e17ffc15 	stw	r5,-16(fp)
 2801f88:	e1bffd15 	stw	r6,-12(fp)
 2801f8c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 2801f90:	e0bffc17 	ldw	r2,-16(fp)
 2801f94:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2801f98:	00004806 	br	28020bc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2801f9c:	e0bffb17 	ldw	r2,-20(fp)
 2801fa0:	10800a17 	ldw	r2,40(r2)
 2801fa4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2801fa8:	e0bffb17 	ldw	r2,-20(fp)
 2801fac:	10800b17 	ldw	r2,44(r2)
 2801fb0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 2801fb4:	e0fff717 	ldw	r3,-36(fp)
 2801fb8:	e0bff617 	ldw	r2,-40(fp)
 2801fbc:	18800536 	bltu	r3,r2,2801fd4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2801fc0:	e0bff717 	ldw	r2,-36(fp)
 2801fc4:	e0fff617 	ldw	r3,-40(fp)
 2801fc8:	10c5c83a 	sub	r2,r2,r3
 2801fcc:	e0bff815 	stw	r2,-32(fp)
 2801fd0:	00000406 	br	2801fe4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2801fd4:	00820004 	movi	r2,2048
 2801fd8:	e0fff617 	ldw	r3,-40(fp)
 2801fdc:	10c5c83a 	sub	r2,r2,r3
 2801fe0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2801fe4:	e0bff817 	ldw	r2,-32(fp)
 2801fe8:	1005003a 	cmpeq	r2,r2,zero
 2801fec:	10001f1e 	bne	r2,zero,280206c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 2801ff0:	e0fffd17 	ldw	r3,-12(fp)
 2801ff4:	e0bff817 	ldw	r2,-32(fp)
 2801ff8:	1880022e 	bgeu	r3,r2,2802004 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 2801ffc:	e0bffd17 	ldw	r2,-12(fp)
 2802000:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2802004:	e0bffb17 	ldw	r2,-20(fp)
 2802008:	10c00e04 	addi	r3,r2,56
 280200c:	e0bff617 	ldw	r2,-40(fp)
 2802010:	1887883a 	add	r3,r3,r2
 2802014:	e0bffa17 	ldw	r2,-24(fp)
 2802018:	1009883a 	mov	r4,r2
 280201c:	180b883a 	mov	r5,r3
 2802020:	e1bff817 	ldw	r6,-32(fp)
 2802024:	28038140 	call	2803814 <memcpy>
      ptr   += n;
 2802028:	e0fff817 	ldw	r3,-32(fp)
 280202c:	e0bffa17 	ldw	r2,-24(fp)
 2802030:	10c5883a 	add	r2,r2,r3
 2802034:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 2802038:	e0fffd17 	ldw	r3,-12(fp)
 280203c:	e0bff817 	ldw	r2,-32(fp)
 2802040:	1885c83a 	sub	r2,r3,r2
 2802044:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2802048:	e0fff617 	ldw	r3,-40(fp)
 280204c:	e0bff817 	ldw	r2,-32(fp)
 2802050:	1885883a 	add	r2,r3,r2
 2802054:	10c1ffcc 	andi	r3,r2,2047
 2802058:	e0bffb17 	ldw	r2,-20(fp)
 280205c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2802060:	e0bffd17 	ldw	r2,-12(fp)
 2802064:	10800048 	cmpgei	r2,r2,1
 2802068:	103fcc1e 	bne	r2,zero,2801f9c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 280206c:	e0fffa17 	ldw	r3,-24(fp)
 2802070:	e0bffc17 	ldw	r2,-16(fp)
 2802074:	1880141e 	bne	r3,r2,28020c8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2802078:	e0bffe17 	ldw	r2,-8(fp)
 280207c:	1090000c 	andi	r2,r2,16384
 2802080:	1004c03a 	cmpne	r2,r2,zero
 2802084:	1000101e 	bne	r2,zero,28020c8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2802088:	e0bffb17 	ldw	r2,-20(fp)
 280208c:	10c00a17 	ldw	r3,40(r2)
 2802090:	e0bff717 	ldw	r2,-36(fp)
 2802094:	1880051e 	bne	r3,r2,28020ac <altera_avalon_jtag_uart_read+0x13c>
 2802098:	e0bffb17 	ldw	r2,-20(fp)
 280209c:	10c00917 	ldw	r3,36(r2)
 28020a0:	e0bffb17 	ldw	r2,-20(fp)
 28020a4:	10800117 	ldw	r2,4(r2)
 28020a8:	18bff736 	bltu	r3,r2,2802088 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 28020ac:	e0bffb17 	ldw	r2,-20(fp)
 28020b0:	10c00a17 	ldw	r3,40(r2)
 28020b4:	e0bff717 	ldw	r2,-36(fp)
 28020b8:	18800326 	beq	r3,r2,28020c8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 28020bc:	e0bffd17 	ldw	r2,-12(fp)
 28020c0:	10800048 	cmpgei	r2,r2,1
 28020c4:	103fb51e 	bne	r2,zero,2801f9c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 28020c8:	e0fffa17 	ldw	r3,-24(fp)
 28020cc:	e0bffc17 	ldw	r2,-16(fp)
 28020d0:	18801926 	beq	r3,r2,2802138 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 28020d4:	0005303a 	rdctl	r2,status
 28020d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 28020dc:	e0fff517 	ldw	r3,-44(fp)
 28020e0:	00bfff84 	movi	r2,-2
 28020e4:	1884703a 	and	r2,r3,r2
 28020e8:	1001703a 	wrctl	status,r2
  
  return context;
 28020ec:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 28020f0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 28020f4:	e0bffb17 	ldw	r2,-20(fp)
 28020f8:	10800817 	ldw	r2,32(r2)
 28020fc:	10c00054 	ori	r3,r2,1
 2802100:	e0bffb17 	ldw	r2,-20(fp)
 2802104:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2802108:	e0bffb17 	ldw	r2,-20(fp)
 280210c:	10800017 	ldw	r2,0(r2)
 2802110:	11000104 	addi	r4,r2,4
 2802114:	e0bffb17 	ldw	r2,-20(fp)
 2802118:	10800817 	ldw	r2,32(r2)
 280211c:	1007883a 	mov	r3,r2
 2802120:	2005883a 	mov	r2,r4
 2802124:	10c00035 	stwio	r3,0(r2)
 2802128:	e0bff917 	ldw	r2,-28(fp)
 280212c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2802130:	e0bff417 	ldw	r2,-48(fp)
 2802134:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2802138:	e0fffa17 	ldw	r3,-24(fp)
 280213c:	e0bffc17 	ldw	r2,-16(fp)
 2802140:	18800526 	beq	r3,r2,2802158 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 2802144:	e0fffa17 	ldw	r3,-24(fp)
 2802148:	e0bffc17 	ldw	r2,-16(fp)
 280214c:	1887c83a 	sub	r3,r3,r2
 2802150:	e0ffff15 	stw	r3,-4(fp)
 2802154:	00000906 	br	280217c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 2802158:	e0bffe17 	ldw	r2,-8(fp)
 280215c:	1090000c 	andi	r2,r2,16384
 2802160:	1005003a 	cmpeq	r2,r2,zero
 2802164:	1000031e 	bne	r2,zero,2802174 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 2802168:	00bffd44 	movi	r2,-11
 280216c:	e0bfff15 	stw	r2,-4(fp)
 2802170:	00000206 	br	280217c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 2802174:	00bffec4 	movi	r2,-5
 2802178:	e0bfff15 	stw	r2,-4(fp)
 280217c:	e0bfff17 	ldw	r2,-4(fp)
}
 2802180:	e037883a 	mov	sp,fp
 2802184:	dfc00117 	ldw	ra,4(sp)
 2802188:	df000017 	ldw	fp,0(sp)
 280218c:	dec00204 	addi	sp,sp,8
 2802190:	f800283a 	ret

02802194 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2802194:	defff204 	addi	sp,sp,-56
 2802198:	dfc00d15 	stw	ra,52(sp)
 280219c:	df000c15 	stw	fp,48(sp)
 28021a0:	df000c04 	addi	fp,sp,48
 28021a4:	e13ffb15 	stw	r4,-20(fp)
 28021a8:	e17ffc15 	stw	r5,-16(fp)
 28021ac:	e1bffd15 	stw	r6,-12(fp)
 28021b0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 28021b4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 28021b8:	e0bffc17 	ldw	r2,-16(fp)
 28021bc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 28021c0:	00003a06 	br	28022ac <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 28021c4:	e0bffb17 	ldw	r2,-20(fp)
 28021c8:	10800c17 	ldw	r2,48(r2)
 28021cc:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 28021d0:	e0bffb17 	ldw	r2,-20(fp)
 28021d4:	10800d17 	ldw	r2,52(r2)
 28021d8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 28021dc:	e0fffa17 	ldw	r3,-24(fp)
 28021e0:	e0bff917 	ldw	r2,-28(fp)
 28021e4:	1880062e 	bgeu	r3,r2,2802200 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 28021e8:	e0fff917 	ldw	r3,-28(fp)
 28021ec:	e0bffa17 	ldw	r2,-24(fp)
 28021f0:	1885c83a 	sub	r2,r3,r2
 28021f4:	10bfffc4 	addi	r2,r2,-1
 28021f8:	e0bff815 	stw	r2,-32(fp)
 28021fc:	00000c06 	br	2802230 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 2802200:	e0bff917 	ldw	r2,-28(fp)
 2802204:	1005003a 	cmpeq	r2,r2,zero
 2802208:	1000051e 	bne	r2,zero,2802220 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 280220c:	00820004 	movi	r2,2048
 2802210:	e0fffa17 	ldw	r3,-24(fp)
 2802214:	10c5c83a 	sub	r2,r2,r3
 2802218:	e0bff815 	stw	r2,-32(fp)
 280221c:	00000406 	br	2802230 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2802220:	0081ffc4 	movi	r2,2047
 2802224:	e0fffa17 	ldw	r3,-24(fp)
 2802228:	10c5c83a 	sub	r2,r2,r3
 280222c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2802230:	e0bff817 	ldw	r2,-32(fp)
 2802234:	1005003a 	cmpeq	r2,r2,zero
 2802238:	10001f1e 	bne	r2,zero,28022b8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 280223c:	e0fffd17 	ldw	r3,-12(fp)
 2802240:	e0bff817 	ldw	r2,-32(fp)
 2802244:	1880022e 	bgeu	r3,r2,2802250 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 2802248:	e0bffd17 	ldw	r2,-12(fp)
 280224c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2802250:	e0bffb17 	ldw	r2,-20(fp)
 2802254:	10c20e04 	addi	r3,r2,2104
 2802258:	e0bffa17 	ldw	r2,-24(fp)
 280225c:	1885883a 	add	r2,r3,r2
 2802260:	e0fffc17 	ldw	r3,-16(fp)
 2802264:	1009883a 	mov	r4,r2
 2802268:	180b883a 	mov	r5,r3
 280226c:	e1bff817 	ldw	r6,-32(fp)
 2802270:	28038140 	call	2803814 <memcpy>
      ptr   += n;
 2802274:	e0fff817 	ldw	r3,-32(fp)
 2802278:	e0bffc17 	ldw	r2,-16(fp)
 280227c:	10c5883a 	add	r2,r2,r3
 2802280:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 2802284:	e0fffd17 	ldw	r3,-12(fp)
 2802288:	e0bff817 	ldw	r2,-32(fp)
 280228c:	1885c83a 	sub	r2,r3,r2
 2802290:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2802294:	e0fffa17 	ldw	r3,-24(fp)
 2802298:	e0bff817 	ldw	r2,-32(fp)
 280229c:	1885883a 	add	r2,r3,r2
 28022a0:	10c1ffcc 	andi	r3,r2,2047
 28022a4:	e0bffb17 	ldw	r2,-20(fp)
 28022a8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 28022ac:	e0bffd17 	ldw	r2,-12(fp)
 28022b0:	10800048 	cmpgei	r2,r2,1
 28022b4:	103fc31e 	bne	r2,zero,28021c4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 28022b8:	0005303a 	rdctl	r2,status
 28022bc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 28022c0:	e0fff517 	ldw	r3,-44(fp)
 28022c4:	00bfff84 	movi	r2,-2
 28022c8:	1884703a 	and	r2,r3,r2
 28022cc:	1001703a 	wrctl	status,r2
  
  return context;
 28022d0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 28022d4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 28022d8:	e0bffb17 	ldw	r2,-20(fp)
 28022dc:	10800817 	ldw	r2,32(r2)
 28022e0:	10c00094 	ori	r3,r2,2
 28022e4:	e0bffb17 	ldw	r2,-20(fp)
 28022e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 28022ec:	e0bffb17 	ldw	r2,-20(fp)
 28022f0:	10800017 	ldw	r2,0(r2)
 28022f4:	11000104 	addi	r4,r2,4
 28022f8:	e0bffb17 	ldw	r2,-20(fp)
 28022fc:	10800817 	ldw	r2,32(r2)
 2802300:	1007883a 	mov	r3,r2
 2802304:	2005883a 	mov	r2,r4
 2802308:	10c00035 	stwio	r3,0(r2)
 280230c:	e0bff717 	ldw	r2,-36(fp)
 2802310:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2802314:	e0bff417 	ldw	r2,-48(fp)
 2802318:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 280231c:	e0bffd17 	ldw	r2,-12(fp)
 2802320:	10800050 	cmplti	r2,r2,1
 2802324:	1000111e 	bne	r2,zero,280236c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 2802328:	e0bffe17 	ldw	r2,-8(fp)
 280232c:	1090000c 	andi	r2,r2,16384
 2802330:	1004c03a 	cmpne	r2,r2,zero
 2802334:	1000101e 	bne	r2,zero,2802378 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2802338:	e0bffb17 	ldw	r2,-20(fp)
 280233c:	10c00d17 	ldw	r3,52(r2)
 2802340:	e0bff917 	ldw	r2,-28(fp)
 2802344:	1880051e 	bne	r3,r2,280235c <altera_avalon_jtag_uart_write+0x1c8>
 2802348:	e0bffb17 	ldw	r2,-20(fp)
 280234c:	10c00917 	ldw	r3,36(r2)
 2802350:	e0bffb17 	ldw	r2,-20(fp)
 2802354:	10800117 	ldw	r2,4(r2)
 2802358:	18bff736 	bltu	r3,r2,2802338 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 280235c:	e0bffb17 	ldw	r2,-20(fp)
 2802360:	10c00d17 	ldw	r3,52(r2)
 2802364:	e0bff917 	ldw	r2,-28(fp)
 2802368:	18800326 	beq	r3,r2,2802378 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 280236c:	e0bffd17 	ldw	r2,-12(fp)
 2802370:	10800048 	cmpgei	r2,r2,1
 2802374:	103fcd1e 	bne	r2,zero,28022ac <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2802378:	e0fffc17 	ldw	r3,-16(fp)
 280237c:	e0bff617 	ldw	r2,-40(fp)
 2802380:	18800526 	beq	r3,r2,2802398 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 2802384:	e0fffc17 	ldw	r3,-16(fp)
 2802388:	e0bff617 	ldw	r2,-40(fp)
 280238c:	1887c83a 	sub	r3,r3,r2
 2802390:	e0ffff15 	stw	r3,-4(fp)
 2802394:	00000906 	br	28023bc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 2802398:	e0bffe17 	ldw	r2,-8(fp)
 280239c:	1090000c 	andi	r2,r2,16384
 28023a0:	1005003a 	cmpeq	r2,r2,zero
 28023a4:	1000031e 	bne	r2,zero,28023b4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 28023a8:	00bffd44 	movi	r2,-11
 28023ac:	e0bfff15 	stw	r2,-4(fp)
 28023b0:	00000206 	br	28023bc <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 28023b4:	00bffec4 	movi	r2,-5
 28023b8:	e0bfff15 	stw	r2,-4(fp)
 28023bc:	e0bfff17 	ldw	r2,-4(fp)
}
 28023c0:	e037883a 	mov	sp,fp
 28023c4:	dfc00117 	ldw	ra,4(sp)
 28023c8:	df000017 	ldw	fp,0(sp)
 28023cc:	dec00204 	addi	sp,sp,8
 28023d0:	f800283a 	ret

028023d4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 28023d4:	defff404 	addi	sp,sp,-48
 28023d8:	df000b15 	stw	fp,44(sp)
 28023dc:	df000b04 	addi	fp,sp,44
 28023e0:	e13ffb15 	stw	r4,-20(fp)
 28023e4:	e17ffc15 	stw	r5,-16(fp)
 28023e8:	e1bffd15 	stw	r6,-12(fp)
 28023ec:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 28023f0:	e03ff915 	stw	zero,-28(fp)
 28023f4:	0080a034 	movhi	r2,640
 28023f8:	109de904 	addi	r2,r2,30628
 28023fc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 2802400:	1005003a 	cmpeq	r2,r2,zero
 2802404:	1000411e 	bne	r2,zero,280250c <alt_alarm_start+0x138>
  {
    if (alarm)
 2802408:	e0bffb17 	ldw	r2,-20(fp)
 280240c:	1005003a 	cmpeq	r2,r2,zero
 2802410:	10003b1e 	bne	r2,zero,2802500 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 2802414:	e0fffb17 	ldw	r3,-20(fp)
 2802418:	e0bffd17 	ldw	r2,-12(fp)
 280241c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 2802420:	e0fffb17 	ldw	r3,-20(fp)
 2802424:	e0bffe17 	ldw	r2,-8(fp)
 2802428:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 280242c:	0005303a 	rdctl	r2,status
 2802430:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2802434:	e0fff817 	ldw	r3,-32(fp)
 2802438:	00bfff84 	movi	r2,-2
 280243c:	1884703a 	and	r2,r3,r2
 2802440:	1001703a 	wrctl	status,r2
  
  return context;
 2802444:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 2802448:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 280244c:	0080a034 	movhi	r2,640
 2802450:	109dea04 	addi	r2,r2,30632
 2802454:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 2802458:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 280245c:	e0fffc17 	ldw	r3,-16(fp)
 2802460:	e0bff917 	ldw	r2,-28(fp)
 2802464:	1885883a 	add	r2,r3,r2
 2802468:	10c00044 	addi	r3,r2,1
 280246c:	e0bffb17 	ldw	r2,-20(fp)
 2802470:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2802474:	e0bffb17 	ldw	r2,-20(fp)
 2802478:	10c00217 	ldw	r3,8(r2)
 280247c:	e0bff917 	ldw	r2,-28(fp)
 2802480:	1880042e 	bgeu	r3,r2,2802494 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 2802484:	e0fffb17 	ldw	r3,-20(fp)
 2802488:	00800044 	movi	r2,1
 280248c:	18800405 	stb	r2,16(r3)
 2802490:	00000206 	br	280249c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 2802494:	e0bffb17 	ldw	r2,-20(fp)
 2802498:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 280249c:	e0fffb17 	ldw	r3,-20(fp)
 28024a0:	0080a034 	movhi	r2,640
 28024a4:	1096b004 	addi	r2,r2,23232
 28024a8:	e0bff615 	stw	r2,-40(fp)
 28024ac:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 28024b0:	e0fff717 	ldw	r3,-36(fp)
 28024b4:	e0bff617 	ldw	r2,-40(fp)
 28024b8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 28024bc:	e0bff617 	ldw	r2,-40(fp)
 28024c0:	10c00017 	ldw	r3,0(r2)
 28024c4:	e0bff717 	ldw	r2,-36(fp)
 28024c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 28024cc:	e0bff617 	ldw	r2,-40(fp)
 28024d0:	10c00017 	ldw	r3,0(r2)
 28024d4:	e0bff717 	ldw	r2,-36(fp)
 28024d8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 28024dc:	e0fff617 	ldw	r3,-40(fp)
 28024e0:	e0bff717 	ldw	r2,-36(fp)
 28024e4:	18800015 	stw	r2,0(r3)
 28024e8:	e0bffa17 	ldw	r2,-24(fp)
 28024ec:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 28024f0:	e0bff517 	ldw	r2,-44(fp)
 28024f4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 28024f8:	e03fff15 	stw	zero,-4(fp)
 28024fc:	00000506 	br	2802514 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 2802500:	00bffa84 	movi	r2,-22
 2802504:	e0bfff15 	stw	r2,-4(fp)
 2802508:	00000206 	br	2802514 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 280250c:	00bfde84 	movi	r2,-134
 2802510:	e0bfff15 	stw	r2,-4(fp)
 2802514:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 2802518:	e037883a 	mov	sp,fp
 280251c:	df000017 	ldw	fp,0(sp)
 2802520:	dec00104 	addi	sp,sp,4
 2802524:	f800283a 	ret

02802528 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 2802528:	defffa04 	addi	sp,sp,-24
 280252c:	dfc00515 	stw	ra,20(sp)
 2802530:	df000415 	stw	fp,16(sp)
 2802534:	df000404 	addi	fp,sp,16
 2802538:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 280253c:	00800244 	movi	r2,9
 2802540:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2802544:	e13ffc17 	ldw	r4,-16(fp)
 2802548:	014003f4 	movhi	r5,15
 280254c:	29509004 	addi	r5,r5,16960
 2802550:	28008300 	call	2800830 <__mulsi3>
 2802554:	100b883a 	mov	r5,r2
 2802558:	0101fcf4 	movhi	r4,2035
 280255c:	21205404 	addi	r4,r4,-32432
 2802560:	2803d4c0 	call	2803d4c <__udivsi3>
 2802564:	100b883a 	mov	r5,r2
 2802568:	01200034 	movhi	r4,32768
 280256c:	213fffc4 	addi	r4,r4,-1
 2802570:	2803d4c0 	call	2803d4c <__udivsi3>
 2802574:	100b883a 	mov	r5,r2
 2802578:	e13fff17 	ldw	r4,-4(fp)
 280257c:	2803d4c0 	call	2803d4c <__udivsi3>
 2802580:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 2802584:	e0bffd17 	ldw	r2,-12(fp)
 2802588:	1005003a 	cmpeq	r2,r2,zero
 280258c:	10002a1e 	bne	r2,zero,2802638 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
 2802590:	e03ffe15 	stw	zero,-8(fp)
 2802594:	00001706 	br	28025f4 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2802598:	00a00034 	movhi	r2,32768
 280259c:	10bfffc4 	addi	r2,r2,-1
 28025a0:	10bfffc4 	addi	r2,r2,-1
 28025a4:	103ffe1e 	bne	r2,zero,28025a0 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 28025a8:	e13ffc17 	ldw	r4,-16(fp)
 28025ac:	014003f4 	movhi	r5,15
 28025b0:	29509004 	addi	r5,r5,16960
 28025b4:	28008300 	call	2800830 <__mulsi3>
 28025b8:	100b883a 	mov	r5,r2
 28025bc:	0101fcf4 	movhi	r4,2035
 28025c0:	21205404 	addi	r4,r4,-32432
 28025c4:	2803d4c0 	call	2803d4c <__udivsi3>
 28025c8:	100b883a 	mov	r5,r2
 28025cc:	01200034 	movhi	r4,32768
 28025d0:	213fffc4 	addi	r4,r4,-1
 28025d4:	2803d4c0 	call	2803d4c <__udivsi3>
 28025d8:	1007883a 	mov	r3,r2
 28025dc:	e0bfff17 	ldw	r2,-4(fp)
 28025e0:	10c5c83a 	sub	r2,r2,r3
 28025e4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 28025e8:	e0bffe17 	ldw	r2,-8(fp)
 28025ec:	10800044 	addi	r2,r2,1
 28025f0:	e0bffe15 	stw	r2,-8(fp)
 28025f4:	e0fffe17 	ldw	r3,-8(fp)
 28025f8:	e0bffd17 	ldw	r2,-12(fp)
 28025fc:	18bfe616 	blt	r3,r2,2802598 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2802600:	e13ffc17 	ldw	r4,-16(fp)
 2802604:	014003f4 	movhi	r5,15
 2802608:	29509004 	addi	r5,r5,16960
 280260c:	28008300 	call	2800830 <__mulsi3>
 2802610:	100b883a 	mov	r5,r2
 2802614:	0101fcf4 	movhi	r4,2035
 2802618:	21205404 	addi	r4,r4,-32432
 280261c:	2803d4c0 	call	2803d4c <__udivsi3>
 2802620:	1009883a 	mov	r4,r2
 2802624:	e17fff17 	ldw	r5,-4(fp)
 2802628:	28008300 	call	2800830 <__mulsi3>
 280262c:	10bfffc4 	addi	r2,r2,-1
 2802630:	103ffe1e 	bne	r2,zero,280262c <alt_busy_sleep+0x104>
 2802634:	00000d06 	br	280266c <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2802638:	e13ffc17 	ldw	r4,-16(fp)
 280263c:	014003f4 	movhi	r5,15
 2802640:	29509004 	addi	r5,r5,16960
 2802644:	28008300 	call	2800830 <__mulsi3>
 2802648:	100b883a 	mov	r5,r2
 280264c:	0101fcf4 	movhi	r4,2035
 2802650:	21205404 	addi	r4,r4,-32432
 2802654:	2803d4c0 	call	2803d4c <__udivsi3>
 2802658:	1009883a 	mov	r4,r2
 280265c:	e17fff17 	ldw	r5,-4(fp)
 2802660:	28008300 	call	2800830 <__mulsi3>
 2802664:	10bfffc4 	addi	r2,r2,-1
 2802668:	00bffe16 	blt	zero,r2,2802664 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 280266c:	0005883a 	mov	r2,zero
}
 2802670:	e037883a 	mov	sp,fp
 2802674:	dfc00117 	ldw	ra,4(sp)
 2802678:	df000017 	ldw	fp,0(sp)
 280267c:	dec00204 	addi	sp,sp,8
 2802680:	f800283a 	ret

02802684 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2802684:	defff804 	addi	sp,sp,-32
 2802688:	dfc00715 	stw	ra,28(sp)
 280268c:	df000615 	stw	fp,24(sp)
 2802690:	df000604 	addi	fp,sp,24
 2802694:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2802698:	e0bffc17 	ldw	r2,-16(fp)
 280269c:	1004803a 	cmplt	r2,r2,zero
 28026a0:	1000091e 	bne	r2,zero,28026c8 <close+0x44>
 28026a4:	e13ffc17 	ldw	r4,-16(fp)
 28026a8:	01400304 	movi	r5,12
 28026ac:	28008300 	call	2800830 <__mulsi3>
 28026b0:	1007883a 	mov	r3,r2
 28026b4:	0080a034 	movhi	r2,640
 28026b8:	10964304 	addi	r2,r2,22796
 28026bc:	1887883a 	add	r3,r3,r2
 28026c0:	e0ffff15 	stw	r3,-4(fp)
 28026c4:	00000106 	br	28026cc <close+0x48>
 28026c8:	e03fff15 	stw	zero,-4(fp)
 28026cc:	e0bfff17 	ldw	r2,-4(fp)
 28026d0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 28026d4:	e0bffb17 	ldw	r2,-20(fp)
 28026d8:	1005003a 	cmpeq	r2,r2,zero
 28026dc:	10001d1e 	bne	r2,zero,2802754 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 28026e0:	e0bffb17 	ldw	r2,-20(fp)
 28026e4:	10800017 	ldw	r2,0(r2)
 28026e8:	10800417 	ldw	r2,16(r2)
 28026ec:	1005003a 	cmpeq	r2,r2,zero
 28026f0:	1000071e 	bne	r2,zero,2802710 <close+0x8c>
 28026f4:	e0bffb17 	ldw	r2,-20(fp)
 28026f8:	10800017 	ldw	r2,0(r2)
 28026fc:	10800417 	ldw	r2,16(r2)
 2802700:	e13ffb17 	ldw	r4,-20(fp)
 2802704:	103ee83a 	callr	r2
 2802708:	e0bffe15 	stw	r2,-8(fp)
 280270c:	00000106 	br	2802714 <close+0x90>
 2802710:	e03ffe15 	stw	zero,-8(fp)
 2802714:	e0bffe17 	ldw	r2,-8(fp)
 2802718:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 280271c:	e13ffc17 	ldw	r4,-16(fp)
 2802720:	28033280 	call	2803328 <alt_release_fd>
    if (rval < 0)
 2802724:	e0bffa17 	ldw	r2,-24(fp)
 2802728:	1004403a 	cmpge	r2,r2,zero
 280272c:	1000071e 	bne	r2,zero,280274c <close+0xc8>
    {
      ALT_ERRNO = -rval;
 2802730:	28027840 	call	2802784 <alt_get_errno>
 2802734:	e0fffa17 	ldw	r3,-24(fp)
 2802738:	00c7c83a 	sub	r3,zero,r3
 280273c:	10c00015 	stw	r3,0(r2)
      return -1;
 2802740:	00bfffc4 	movi	r2,-1
 2802744:	e0bffd15 	stw	r2,-12(fp)
 2802748:	00000806 	br	280276c <close+0xe8>
    }
    return 0;
 280274c:	e03ffd15 	stw	zero,-12(fp)
 2802750:	00000606 	br	280276c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2802754:	28027840 	call	2802784 <alt_get_errno>
 2802758:	1007883a 	mov	r3,r2
 280275c:	00801444 	movi	r2,81
 2802760:	18800015 	stw	r2,0(r3)
    return -1;
 2802764:	00bfffc4 	movi	r2,-1
 2802768:	e0bffd15 	stw	r2,-12(fp)
 280276c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 2802770:	e037883a 	mov	sp,fp
 2802774:	dfc00117 	ldw	ra,4(sp)
 2802778:	df000017 	ldw	fp,0(sp)
 280277c:	dec00204 	addi	sp,sp,8
 2802780:	f800283a 	ret

02802784 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2802784:	defffd04 	addi	sp,sp,-12
 2802788:	dfc00215 	stw	ra,8(sp)
 280278c:	df000115 	stw	fp,4(sp)
 2802790:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2802794:	0080a034 	movhi	r2,640
 2802798:	1096ae04 	addi	r2,r2,23224
 280279c:	10800017 	ldw	r2,0(r2)
 28027a0:	1005003a 	cmpeq	r2,r2,zero
 28027a4:	1000061e 	bne	r2,zero,28027c0 <alt_get_errno+0x3c>
 28027a8:	0080a034 	movhi	r2,640
 28027ac:	1096ae04 	addi	r2,r2,23224
 28027b0:	10800017 	ldw	r2,0(r2)
 28027b4:	103ee83a 	callr	r2
 28027b8:	e0bfff15 	stw	r2,-4(fp)
 28027bc:	00000306 	br	28027cc <alt_get_errno+0x48>
 28027c0:	0080a034 	movhi	r2,640
 28027c4:	109deb04 	addi	r2,r2,30636
 28027c8:	e0bfff15 	stw	r2,-4(fp)
 28027cc:	e0bfff17 	ldw	r2,-4(fp)
}
 28027d0:	e037883a 	mov	sp,fp
 28027d4:	dfc00117 	ldw	ra,4(sp)
 28027d8:	df000017 	ldw	fp,0(sp)
 28027dc:	dec00204 	addi	sp,sp,8
 28027e0:	f800283a 	ret

028027e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 28027e4:	deffff04 	addi	sp,sp,-4
 28027e8:	df000015 	stw	fp,0(sp)
 28027ec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 28027f0:	e037883a 	mov	sp,fp
 28027f4:	df000017 	ldw	fp,0(sp)
 28027f8:	dec00104 	addi	sp,sp,4
 28027fc:	f800283a 	ret

02802800 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2802800:	defffc04 	addi	sp,sp,-16
 2802804:	df000315 	stw	fp,12(sp)
 2802808:	df000304 	addi	fp,sp,12
 280280c:	e13ffd15 	stw	r4,-12(fp)
 2802810:	e17ffe15 	stw	r5,-8(fp)
 2802814:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2802818:	e0bfff17 	ldw	r2,-4(fp)
}
 280281c:	e037883a 	mov	sp,fp
 2802820:	df000017 	ldw	fp,0(sp)
 2802824:	dec00104 	addi	sp,sp,4
 2802828:	f800283a 	ret

0280282c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 280282c:	defff904 	addi	sp,sp,-28
 2802830:	dfc00615 	stw	ra,24(sp)
 2802834:	df000515 	stw	fp,20(sp)
 2802838:	df000504 	addi	fp,sp,20
 280283c:	e13ffd15 	stw	r4,-12(fp)
 2802840:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2802844:	e0bffd17 	ldw	r2,-12(fp)
 2802848:	1005003a 	cmpeq	r2,r2,zero
 280284c:	1000041e 	bne	r2,zero,2802860 <alt_dev_llist_insert+0x34>
 2802850:	e0bffd17 	ldw	r2,-12(fp)
 2802854:	10800217 	ldw	r2,8(r2)
 2802858:	1004c03a 	cmpne	r2,r2,zero
 280285c:	1000071e 	bne	r2,zero,280287c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 2802860:	28028e00 	call	28028e0 <alt_get_errno>
 2802864:	1007883a 	mov	r3,r2
 2802868:	00800584 	movi	r2,22
 280286c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 2802870:	00bffa84 	movi	r2,-22
 2802874:	e0bfff15 	stw	r2,-4(fp)
 2802878:	00001306 	br	28028c8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 280287c:	e0fffd17 	ldw	r3,-12(fp)
 2802880:	e0bffe17 	ldw	r2,-8(fp)
 2802884:	e0bffb15 	stw	r2,-20(fp)
 2802888:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 280288c:	e0fffc17 	ldw	r3,-16(fp)
 2802890:	e0bffb17 	ldw	r2,-20(fp)
 2802894:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 2802898:	e0bffb17 	ldw	r2,-20(fp)
 280289c:	10c00017 	ldw	r3,0(r2)
 28028a0:	e0bffc17 	ldw	r2,-16(fp)
 28028a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 28028a8:	e0bffb17 	ldw	r2,-20(fp)
 28028ac:	10c00017 	ldw	r3,0(r2)
 28028b0:	e0bffc17 	ldw	r2,-16(fp)
 28028b4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 28028b8:	e0fffb17 	ldw	r3,-20(fp)
 28028bc:	e0bffc17 	ldw	r2,-16(fp)
 28028c0:	18800015 	stw	r2,0(r3)

  return 0;  
 28028c4:	e03fff15 	stw	zero,-4(fp)
 28028c8:	e0bfff17 	ldw	r2,-4(fp)
}
 28028cc:	e037883a 	mov	sp,fp
 28028d0:	dfc00117 	ldw	ra,4(sp)
 28028d4:	df000017 	ldw	fp,0(sp)
 28028d8:	dec00204 	addi	sp,sp,8
 28028dc:	f800283a 	ret

028028e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 28028e0:	defffd04 	addi	sp,sp,-12
 28028e4:	dfc00215 	stw	ra,8(sp)
 28028e8:	df000115 	stw	fp,4(sp)
 28028ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 28028f0:	0080a034 	movhi	r2,640
 28028f4:	1096ae04 	addi	r2,r2,23224
 28028f8:	10800017 	ldw	r2,0(r2)
 28028fc:	1005003a 	cmpeq	r2,r2,zero
 2802900:	1000061e 	bne	r2,zero,280291c <alt_get_errno+0x3c>
 2802904:	0080a034 	movhi	r2,640
 2802908:	1096ae04 	addi	r2,r2,23224
 280290c:	10800017 	ldw	r2,0(r2)
 2802910:	103ee83a 	callr	r2
 2802914:	e0bfff15 	stw	r2,-4(fp)
 2802918:	00000306 	br	2802928 <alt_get_errno+0x48>
 280291c:	0080a034 	movhi	r2,640
 2802920:	109deb04 	addi	r2,r2,30636
 2802924:	e0bfff15 	stw	r2,-4(fp)
 2802928:	e0bfff17 	ldw	r2,-4(fp)
}
 280292c:	e037883a 	mov	sp,fp
 2802930:	dfc00117 	ldw	ra,4(sp)
 2802934:	df000017 	ldw	fp,0(sp)
 2802938:	dec00204 	addi	sp,sp,8
 280293c:	f800283a 	ret

02802940 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
 2802940:	defffc04 	addi	sp,sp,-16
 2802944:	dfc00315 	stw	ra,12(sp)
 2802948:	df000215 	stw	fp,8(sp)
 280294c:	df000204 	addi	fp,sp,8
 2802950:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
 2802954:	e13fff17 	ldw	r4,-4(fp)
 2802958:	d1600704 	addi	r5,gp,-32740
 280295c:	2802b780 	call	2802b78 <alt_find_dev>
 2802960:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
 2802964:	e0bffe17 	ldw	r2,-8(fp)
 2802968:	1004c03a 	cmpne	r2,r2,zero
 280296c:	1000041e 	bne	r2,zero,2802980 <alt_dma_rxchan_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 2802970:	28029980 	call	2802998 <alt_get_errno>
 2802974:	1007883a 	mov	r3,r2
 2802978:	008004c4 	movi	r2,19
 280297c:	18800015 	stw	r2,0(r3)
  }

  return dev;
 2802980:	e0bffe17 	ldw	r2,-8(fp)
}
 2802984:	e037883a 	mov	sp,fp
 2802988:	dfc00117 	ldw	ra,4(sp)
 280298c:	df000017 	ldw	fp,0(sp)
 2802990:	dec00204 	addi	sp,sp,8
 2802994:	f800283a 	ret

02802998 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2802998:	defffd04 	addi	sp,sp,-12
 280299c:	dfc00215 	stw	ra,8(sp)
 28029a0:	df000115 	stw	fp,4(sp)
 28029a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 28029a8:	0080a034 	movhi	r2,640
 28029ac:	1096ae04 	addi	r2,r2,23224
 28029b0:	10800017 	ldw	r2,0(r2)
 28029b4:	1005003a 	cmpeq	r2,r2,zero
 28029b8:	1000061e 	bne	r2,zero,28029d4 <alt_get_errno+0x3c>
 28029bc:	0080a034 	movhi	r2,640
 28029c0:	1096ae04 	addi	r2,r2,23224
 28029c4:	10800017 	ldw	r2,0(r2)
 28029c8:	103ee83a 	callr	r2
 28029cc:	e0bfff15 	stw	r2,-4(fp)
 28029d0:	00000306 	br	28029e0 <alt_get_errno+0x48>
 28029d4:	0080a034 	movhi	r2,640
 28029d8:	109deb04 	addi	r2,r2,30636
 28029dc:	e0bfff15 	stw	r2,-4(fp)
 28029e0:	e0bfff17 	ldw	r2,-4(fp)
}
 28029e4:	e037883a 	mov	sp,fp
 28029e8:	dfc00117 	ldw	ra,4(sp)
 28029ec:	df000017 	ldw	fp,0(sp)
 28029f0:	dec00204 	addi	sp,sp,8
 28029f4:	f800283a 	ret

028029f8 <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
 28029f8:	defffc04 	addi	sp,sp,-16
 28029fc:	dfc00315 	stw	ra,12(sp)
 2802a00:	df000215 	stw	fp,8(sp)
 2802a04:	df000204 	addi	fp,sp,8
 2802a08:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
 2802a0c:	e13fff17 	ldw	r4,-4(fp)
 2802a10:	d1600904 	addi	r5,gp,-32732
 2802a14:	2802b780 	call	2802b78 <alt_find_dev>
 2802a18:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
 2802a1c:	e0bffe17 	ldw	r2,-8(fp)
 2802a20:	1004c03a 	cmpne	r2,r2,zero
 2802a24:	1000041e 	bne	r2,zero,2802a38 <alt_dma_txchan_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 2802a28:	2802a500 	call	2802a50 <alt_get_errno>
 2802a2c:	1007883a 	mov	r3,r2
 2802a30:	008004c4 	movi	r2,19
 2802a34:	18800015 	stw	r2,0(r3)
  }

  return dev;
 2802a38:	e0bffe17 	ldw	r2,-8(fp)
}
 2802a3c:	e037883a 	mov	sp,fp
 2802a40:	dfc00117 	ldw	ra,4(sp)
 2802a44:	df000017 	ldw	fp,0(sp)
 2802a48:	dec00204 	addi	sp,sp,8
 2802a4c:	f800283a 	ret

02802a50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2802a50:	defffd04 	addi	sp,sp,-12
 2802a54:	dfc00215 	stw	ra,8(sp)
 2802a58:	df000115 	stw	fp,4(sp)
 2802a5c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2802a60:	0080a034 	movhi	r2,640
 2802a64:	1096ae04 	addi	r2,r2,23224
 2802a68:	10800017 	ldw	r2,0(r2)
 2802a6c:	1005003a 	cmpeq	r2,r2,zero
 2802a70:	1000061e 	bne	r2,zero,2802a8c <alt_get_errno+0x3c>
 2802a74:	0080a034 	movhi	r2,640
 2802a78:	1096ae04 	addi	r2,r2,23224
 2802a7c:	10800017 	ldw	r2,0(r2)
 2802a80:	103ee83a 	callr	r2
 2802a84:	e0bfff15 	stw	r2,-4(fp)
 2802a88:	00000306 	br	2802a98 <alt_get_errno+0x48>
 2802a8c:	0080a034 	movhi	r2,640
 2802a90:	109deb04 	addi	r2,r2,30636
 2802a94:	e0bfff15 	stw	r2,-4(fp)
 2802a98:	e0bfff17 	ldw	r2,-4(fp)
}
 2802a9c:	e037883a 	mov	sp,fp
 2802aa0:	dfc00117 	ldw	ra,4(sp)
 2802aa4:	df000017 	ldw	fp,0(sp)
 2802aa8:	dec00204 	addi	sp,sp,8
 2802aac:	f800283a 	ret

02802ab0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2802ab0:	defffd04 	addi	sp,sp,-12
 2802ab4:	dfc00215 	stw	ra,8(sp)
 2802ab8:	df000115 	stw	fp,4(sp)
 2802abc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2802ac0:	00bfff04 	movi	r2,-4
 2802ac4:	00c0a034 	movhi	r3,640
 2802ac8:	18cf7004 	addi	r3,r3,15808
 2802acc:	1885883a 	add	r2,r3,r2
 2802ad0:	e0bfff15 	stw	r2,-4(fp)
 2802ad4:	00000606 	br	2802af0 <_do_ctors+0x40>
        (*ctor) (); 
 2802ad8:	e0bfff17 	ldw	r2,-4(fp)
 2802adc:	10800017 	ldw	r2,0(r2)
 2802ae0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2802ae4:	e0bfff17 	ldw	r2,-4(fp)
 2802ae8:	10bfff04 	addi	r2,r2,-4
 2802aec:	e0bfff15 	stw	r2,-4(fp)
 2802af0:	e0ffff17 	ldw	r3,-4(fp)
 2802af4:	0080a034 	movhi	r2,640
 2802af8:	108f6f04 	addi	r2,r2,15804
 2802afc:	18bff62e 	bgeu	r3,r2,2802ad8 <_do_ctors+0x28>
        (*ctor) (); 
}
 2802b00:	e037883a 	mov	sp,fp
 2802b04:	dfc00117 	ldw	ra,4(sp)
 2802b08:	df000017 	ldw	fp,0(sp)
 2802b0c:	dec00204 	addi	sp,sp,8
 2802b10:	f800283a 	ret

02802b14 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2802b14:	defffd04 	addi	sp,sp,-12
 2802b18:	dfc00215 	stw	ra,8(sp)
 2802b1c:	df000115 	stw	fp,4(sp)
 2802b20:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2802b24:	00bfff04 	movi	r2,-4
 2802b28:	00c0a034 	movhi	r3,640
 2802b2c:	18cf7004 	addi	r3,r3,15808
 2802b30:	1885883a 	add	r2,r3,r2
 2802b34:	e0bfff15 	stw	r2,-4(fp)
 2802b38:	00000606 	br	2802b54 <_do_dtors+0x40>
        (*dtor) (); 
 2802b3c:	e0bfff17 	ldw	r2,-4(fp)
 2802b40:	10800017 	ldw	r2,0(r2)
 2802b44:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2802b48:	e0bfff17 	ldw	r2,-4(fp)
 2802b4c:	10bfff04 	addi	r2,r2,-4
 2802b50:	e0bfff15 	stw	r2,-4(fp)
 2802b54:	e0ffff17 	ldw	r3,-4(fp)
 2802b58:	0080a034 	movhi	r2,640
 2802b5c:	108f7004 	addi	r2,r2,15808
 2802b60:	18bff62e 	bgeu	r3,r2,2802b3c <_do_dtors+0x28>
        (*dtor) (); 
}
 2802b64:	e037883a 	mov	sp,fp
 2802b68:	dfc00117 	ldw	ra,4(sp)
 2802b6c:	df000017 	ldw	fp,0(sp)
 2802b70:	dec00204 	addi	sp,sp,8
 2802b74:	f800283a 	ret

02802b78 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2802b78:	defff904 	addi	sp,sp,-28
 2802b7c:	dfc00615 	stw	ra,24(sp)
 2802b80:	df000515 	stw	fp,20(sp)
 2802b84:	df000504 	addi	fp,sp,20
 2802b88:	e13ffd15 	stw	r4,-12(fp)
 2802b8c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2802b90:	e0bffe17 	ldw	r2,-8(fp)
 2802b94:	10800017 	ldw	r2,0(r2)
 2802b98:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2802b9c:	e13ffd17 	ldw	r4,-12(fp)
 2802ba0:	28038b40 	call	28038b4 <strlen>
 2802ba4:	10800044 	addi	r2,r2,1
 2802ba8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2802bac:	00000d06 	br	2802be4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2802bb0:	e0bffc17 	ldw	r2,-16(fp)
 2802bb4:	11000217 	ldw	r4,8(r2)
 2802bb8:	e1bffb17 	ldw	r6,-20(fp)
 2802bbc:	e17ffd17 	ldw	r5,-12(fp)
 2802bc0:	28037a00 	call	28037a0 <memcmp>
 2802bc4:	1004c03a 	cmpne	r2,r2,zero
 2802bc8:	1000031e 	bne	r2,zero,2802bd8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2802bcc:	e0bffc17 	ldw	r2,-16(fp)
 2802bd0:	e0bfff15 	stw	r2,-4(fp)
 2802bd4:	00000706 	br	2802bf4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2802bd8:	e0bffc17 	ldw	r2,-16(fp)
 2802bdc:	10800017 	ldw	r2,0(r2)
 2802be0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2802be4:	e0fffe17 	ldw	r3,-8(fp)
 2802be8:	e0bffc17 	ldw	r2,-16(fp)
 2802bec:	10fff01e 	bne	r2,r3,2802bb0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2802bf0:	e03fff15 	stw	zero,-4(fp)
 2802bf4:	e0bfff17 	ldw	r2,-4(fp)
}
 2802bf8:	e037883a 	mov	sp,fp
 2802bfc:	dfc00117 	ldw	ra,4(sp)
 2802c00:	df000017 	ldw	fp,0(sp)
 2802c04:	dec00204 	addi	sp,sp,8
 2802c08:	f800283a 	ret

02802c0c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2802c0c:	deffff04 	addi	sp,sp,-4
 2802c10:	df000015 	stw	fp,0(sp)
 2802c14:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 2802c18:	e037883a 	mov	sp,fp
 2802c1c:	df000017 	ldw	fp,0(sp)
 2802c20:	dec00104 	addi	sp,sp,4
 2802c24:	f800283a 	ret

02802c28 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2802c28:	defff904 	addi	sp,sp,-28
 2802c2c:	dfc00615 	stw	ra,24(sp)
 2802c30:	df000515 	stw	fp,20(sp)
 2802c34:	df000504 	addi	fp,sp,20
 2802c38:	e13ffc15 	stw	r4,-16(fp)
 2802c3c:	e17ffd15 	stw	r5,-12(fp)
 2802c40:	e1bffe15 	stw	r6,-8(fp)
 2802c44:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2802c48:	e0800217 	ldw	r2,8(fp)
 2802c4c:	d8800015 	stw	r2,0(sp)
 2802c50:	e13ffc17 	ldw	r4,-16(fp)
 2802c54:	e17ffd17 	ldw	r5,-12(fp)
 2802c58:	e1bffe17 	ldw	r6,-8(fp)
 2802c5c:	e1ffff17 	ldw	r7,-4(fp)
 2802c60:	2802dfc0 	call	2802dfc <alt_iic_isr_register>
}  
 2802c64:	e037883a 	mov	sp,fp
 2802c68:	dfc00117 	ldw	ra,4(sp)
 2802c6c:	df000017 	ldw	fp,0(sp)
 2802c70:	dec00204 	addi	sp,sp,8
 2802c74:	f800283a 	ret

02802c78 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2802c78:	defff904 	addi	sp,sp,-28
 2802c7c:	df000615 	stw	fp,24(sp)
 2802c80:	df000604 	addi	fp,sp,24
 2802c84:	e13ffe15 	stw	r4,-8(fp)
 2802c88:	e17fff15 	stw	r5,-4(fp)
 2802c8c:	e0bfff17 	ldw	r2,-4(fp)
 2802c90:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2802c94:	0005303a 	rdctl	r2,status
 2802c98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2802c9c:	e0fffb17 	ldw	r3,-20(fp)
 2802ca0:	00bfff84 	movi	r2,-2
 2802ca4:	1884703a 	and	r2,r3,r2
 2802ca8:	1001703a 	wrctl	status,r2
  
  return context;
 2802cac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2802cb0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 2802cb4:	e0fffc17 	ldw	r3,-16(fp)
 2802cb8:	00800044 	movi	r2,1
 2802cbc:	10c4983a 	sll	r2,r2,r3
 2802cc0:	1007883a 	mov	r3,r2
 2802cc4:	0080a034 	movhi	r2,640
 2802cc8:	109de804 	addi	r2,r2,30624
 2802ccc:	10800017 	ldw	r2,0(r2)
 2802cd0:	1886b03a 	or	r3,r3,r2
 2802cd4:	0080a034 	movhi	r2,640
 2802cd8:	109de804 	addi	r2,r2,30624
 2802cdc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2802ce0:	0080a034 	movhi	r2,640
 2802ce4:	109de804 	addi	r2,r2,30624
 2802ce8:	10800017 	ldw	r2,0(r2)
 2802cec:	100170fa 	wrctl	ienable,r2
 2802cf0:	e0bffd17 	ldw	r2,-12(fp)
 2802cf4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2802cf8:	e0bffa17 	ldw	r2,-24(fp)
 2802cfc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2802d00:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 2802d04:	e037883a 	mov	sp,fp
 2802d08:	df000017 	ldw	fp,0(sp)
 2802d0c:	dec00104 	addi	sp,sp,4
 2802d10:	f800283a 	ret

02802d14 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2802d14:	defff904 	addi	sp,sp,-28
 2802d18:	df000615 	stw	fp,24(sp)
 2802d1c:	df000604 	addi	fp,sp,24
 2802d20:	e13ffe15 	stw	r4,-8(fp)
 2802d24:	e17fff15 	stw	r5,-4(fp)
 2802d28:	e0bfff17 	ldw	r2,-4(fp)
 2802d2c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2802d30:	0005303a 	rdctl	r2,status
 2802d34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2802d38:	e0fffb17 	ldw	r3,-20(fp)
 2802d3c:	00bfff84 	movi	r2,-2
 2802d40:	1884703a 	and	r2,r3,r2
 2802d44:	1001703a 	wrctl	status,r2
  
  return context;
 2802d48:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2802d4c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 2802d50:	e0fffc17 	ldw	r3,-16(fp)
 2802d54:	00800044 	movi	r2,1
 2802d58:	10c4983a 	sll	r2,r2,r3
 2802d5c:	0084303a 	nor	r2,zero,r2
 2802d60:	1007883a 	mov	r3,r2
 2802d64:	0080a034 	movhi	r2,640
 2802d68:	109de804 	addi	r2,r2,30624
 2802d6c:	10800017 	ldw	r2,0(r2)
 2802d70:	1886703a 	and	r3,r3,r2
 2802d74:	0080a034 	movhi	r2,640
 2802d78:	109de804 	addi	r2,r2,30624
 2802d7c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2802d80:	0080a034 	movhi	r2,640
 2802d84:	109de804 	addi	r2,r2,30624
 2802d88:	10800017 	ldw	r2,0(r2)
 2802d8c:	100170fa 	wrctl	ienable,r2
 2802d90:	e0bffd17 	ldw	r2,-12(fp)
 2802d94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2802d98:	e0bffa17 	ldw	r2,-24(fp)
 2802d9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2802da0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 2802da4:	e037883a 	mov	sp,fp
 2802da8:	df000017 	ldw	fp,0(sp)
 2802dac:	dec00104 	addi	sp,sp,4
 2802db0:	f800283a 	ret

02802db4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2802db4:	defffc04 	addi	sp,sp,-16
 2802db8:	df000315 	stw	fp,12(sp)
 2802dbc:	df000304 	addi	fp,sp,12
 2802dc0:	e13ffe15 	stw	r4,-8(fp)
 2802dc4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2802dc8:	000530fa 	rdctl	r2,ienable
 2802dcc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2802dd0:	e0ffff17 	ldw	r3,-4(fp)
 2802dd4:	00800044 	movi	r2,1
 2802dd8:	10c4983a 	sll	r2,r2,r3
 2802ddc:	1007883a 	mov	r3,r2
 2802de0:	e0bffd17 	ldw	r2,-12(fp)
 2802de4:	1884703a 	and	r2,r3,r2
 2802de8:	1004c03a 	cmpne	r2,r2,zero
}
 2802dec:	e037883a 	mov	sp,fp
 2802df0:	df000017 	ldw	fp,0(sp)
 2802df4:	dec00104 	addi	sp,sp,4
 2802df8:	f800283a 	ret

02802dfc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2802dfc:	defff404 	addi	sp,sp,-48
 2802e00:	dfc00b15 	stw	ra,44(sp)
 2802e04:	df000a15 	stw	fp,40(sp)
 2802e08:	df000a04 	addi	fp,sp,40
 2802e0c:	e13ffb15 	stw	r4,-20(fp)
 2802e10:	e17ffc15 	stw	r5,-16(fp)
 2802e14:	e1bffd15 	stw	r6,-12(fp)
 2802e18:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 2802e1c:	00bffa84 	movi	r2,-22
 2802e20:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2802e24:	e0bffc17 	ldw	r2,-16(fp)
 2802e28:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2802e2c:	e0bff917 	ldw	r2,-28(fp)
 2802e30:	10800808 	cmpgei	r2,r2,32
 2802e34:	1000291e 	bne	r2,zero,2802edc <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2802e38:	0005303a 	rdctl	r2,status
 2802e3c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2802e40:	e0fff717 	ldw	r3,-36(fp)
 2802e44:	00bfff84 	movi	r2,-2
 2802e48:	1884703a 	and	r2,r3,r2
 2802e4c:	1001703a 	wrctl	status,r2
  
  return context;
 2802e50:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2802e54:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 2802e58:	e0bff917 	ldw	r2,-28(fp)
 2802e5c:	00c0a034 	movhi	r3,640
 2802e60:	18ddec04 	addi	r3,r3,30640
 2802e64:	100490fa 	slli	r2,r2,3
 2802e68:	10c7883a 	add	r3,r2,r3
 2802e6c:	e0bffd17 	ldw	r2,-12(fp)
 2802e70:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 2802e74:	e0bff917 	ldw	r2,-28(fp)
 2802e78:	00c0a034 	movhi	r3,640
 2802e7c:	18ddec04 	addi	r3,r3,30640
 2802e80:	100490fa 	slli	r2,r2,3
 2802e84:	10c5883a 	add	r2,r2,r3
 2802e88:	10c00104 	addi	r3,r2,4
 2802e8c:	e0bffe17 	ldw	r2,-8(fp)
 2802e90:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2802e94:	e0bffd17 	ldw	r2,-12(fp)
 2802e98:	1005003a 	cmpeq	r2,r2,zero
 2802e9c:	1000051e 	bne	r2,zero,2802eb4 <alt_iic_isr_register+0xb8>
 2802ea0:	e17ff917 	ldw	r5,-28(fp)
 2802ea4:	e13ffb17 	ldw	r4,-20(fp)
 2802ea8:	2802c780 	call	2802c78 <alt_ic_irq_enable>
 2802eac:	e0bfff15 	stw	r2,-4(fp)
 2802eb0:	00000406 	br	2802ec4 <alt_iic_isr_register+0xc8>
 2802eb4:	e17ff917 	ldw	r5,-28(fp)
 2802eb8:	e13ffb17 	ldw	r4,-20(fp)
 2802ebc:	2802d140 	call	2802d14 <alt_ic_irq_disable>
 2802ec0:	e0bfff15 	stw	r2,-4(fp)
 2802ec4:	e0bfff17 	ldw	r2,-4(fp)
 2802ec8:	e0bffa15 	stw	r2,-24(fp)
 2802ecc:	e0bff817 	ldw	r2,-32(fp)
 2802ed0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2802ed4:	e0bff617 	ldw	r2,-40(fp)
 2802ed8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2802edc:	e0bffa17 	ldw	r2,-24(fp)
}
 2802ee0:	e037883a 	mov	sp,fp
 2802ee4:	dfc00117 	ldw	ra,4(sp)
 2802ee8:	df000017 	ldw	fp,0(sp)
 2802eec:	dec00204 	addi	sp,sp,8
 2802ef0:	f800283a 	ret

02802ef4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2802ef4:	defff804 	addi	sp,sp,-32
 2802ef8:	dfc00715 	stw	ra,28(sp)
 2802efc:	df000615 	stw	fp,24(sp)
 2802f00:	dc000515 	stw	r16,20(sp)
 2802f04:	df000504 	addi	fp,sp,20
 2802f08:	e13ffc15 	stw	r4,-16(fp)
 2802f0c:	e17ffd15 	stw	r5,-12(fp)
 2802f10:	e1bffe15 	stw	r6,-8(fp)
 2802f14:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2802f18:	e13ffd17 	ldw	r4,-12(fp)
 2802f1c:	e17ffe17 	ldw	r5,-8(fp)
 2802f20:	e1bfff17 	ldw	r6,-4(fp)
 2802f24:	280313c0 	call	280313c <open>
 2802f28:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 2802f2c:	e0bffb17 	ldw	r2,-20(fp)
 2802f30:	1004803a 	cmplt	r2,r2,zero
 2802f34:	10001f1e 	bne	r2,zero,2802fb4 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 2802f38:	e13ffb17 	ldw	r4,-20(fp)
 2802f3c:	0400a034 	movhi	r16,640
 2802f40:	84164304 	addi	r16,r16,22796
 2802f44:	01400304 	movi	r5,12
 2802f48:	28008300 	call	2800830 <__mulsi3>
 2802f4c:	1405883a 	add	r2,r2,r16
 2802f50:	10c00017 	ldw	r3,0(r2)
 2802f54:	e0bffc17 	ldw	r2,-16(fp)
 2802f58:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2802f5c:	e13ffb17 	ldw	r4,-20(fp)
 2802f60:	0400a034 	movhi	r16,640
 2802f64:	84164304 	addi	r16,r16,22796
 2802f68:	01400304 	movi	r5,12
 2802f6c:	28008300 	call	2800830 <__mulsi3>
 2802f70:	1405883a 	add	r2,r2,r16
 2802f74:	10800104 	addi	r2,r2,4
 2802f78:	10c00017 	ldw	r3,0(r2)
 2802f7c:	e0bffc17 	ldw	r2,-16(fp)
 2802f80:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2802f84:	e13ffb17 	ldw	r4,-20(fp)
 2802f88:	0400a034 	movhi	r16,640
 2802f8c:	84164304 	addi	r16,r16,22796
 2802f90:	01400304 	movi	r5,12
 2802f94:	28008300 	call	2800830 <__mulsi3>
 2802f98:	1405883a 	add	r2,r2,r16
 2802f9c:	10800204 	addi	r2,r2,8
 2802fa0:	10c00017 	ldw	r3,0(r2)
 2802fa4:	e0bffc17 	ldw	r2,-16(fp)
 2802fa8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2802fac:	e13ffb17 	ldw	r4,-20(fp)
 2802fb0:	28033280 	call	2803328 <alt_release_fd>
  }
} 
 2802fb4:	e037883a 	mov	sp,fp
 2802fb8:	dfc00217 	ldw	ra,8(sp)
 2802fbc:	df000117 	ldw	fp,4(sp)
 2802fc0:	dc000017 	ldw	r16,0(sp)
 2802fc4:	dec00304 	addi	sp,sp,12
 2802fc8:	f800283a 	ret

02802fcc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2802fcc:	defffb04 	addi	sp,sp,-20
 2802fd0:	dfc00415 	stw	ra,16(sp)
 2802fd4:	df000315 	stw	fp,12(sp)
 2802fd8:	df000304 	addi	fp,sp,12
 2802fdc:	e13ffd15 	stw	r4,-12(fp)
 2802fe0:	e17ffe15 	stw	r5,-8(fp)
 2802fe4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2802fe8:	0100a034 	movhi	r4,640
 2802fec:	21164604 	addi	r4,r4,22808
 2802ff0:	e17ffd17 	ldw	r5,-12(fp)
 2802ff4:	01800044 	movi	r6,1
 2802ff8:	01c07fc4 	movi	r7,511
 2802ffc:	2802ef40 	call	2802ef4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2803000:	0100a034 	movhi	r4,640
 2803004:	21164304 	addi	r4,r4,22796
 2803008:	e17ffe17 	ldw	r5,-8(fp)
 280300c:	000d883a 	mov	r6,zero
 2803010:	01c07fc4 	movi	r7,511
 2803014:	2802ef40 	call	2802ef4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2803018:	0100a034 	movhi	r4,640
 280301c:	21164904 	addi	r4,r4,22820
 2803020:	e17fff17 	ldw	r5,-4(fp)
 2803024:	01800044 	movi	r6,1
 2803028:	01c07fc4 	movi	r7,511
 280302c:	2802ef40 	call	2802ef4 <alt_open_fd>
}  
 2803030:	e037883a 	mov	sp,fp
 2803034:	dfc00117 	ldw	ra,4(sp)
 2803038:	df000017 	ldw	fp,0(sp)
 280303c:	dec00204 	addi	sp,sp,8
 2803040:	f800283a 	ret

02803044 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2803044:	defffa04 	addi	sp,sp,-24
 2803048:	dfc00515 	stw	ra,20(sp)
 280304c:	df000415 	stw	fp,16(sp)
 2803050:	dc000315 	stw	r16,12(sp)
 2803054:	df000304 	addi	fp,sp,12
 2803058:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 280305c:	e0bffe17 	ldw	r2,-8(fp)
 2803060:	10800217 	ldw	r2,8(r2)
 2803064:	10d00034 	orhi	r3,r2,16384
 2803068:	e0bffe17 	ldw	r2,-8(fp)
 280306c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2803070:	e03ffd15 	stw	zero,-12(fp)
 2803074:	00002306 	br	2803104 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2803078:	e13ffd17 	ldw	r4,-12(fp)
 280307c:	0400a034 	movhi	r16,640
 2803080:	84164304 	addi	r16,r16,22796
 2803084:	01400304 	movi	r5,12
 2803088:	28008300 	call	2800830 <__mulsi3>
 280308c:	1405883a 	add	r2,r2,r16
 2803090:	10c00017 	ldw	r3,0(r2)
 2803094:	e0bffe17 	ldw	r2,-8(fp)
 2803098:	10800017 	ldw	r2,0(r2)
 280309c:	1880161e 	bne	r3,r2,28030f8 <alt_file_locked+0xb4>
 28030a0:	e13ffd17 	ldw	r4,-12(fp)
 28030a4:	0400a034 	movhi	r16,640
 28030a8:	84164304 	addi	r16,r16,22796
 28030ac:	01400304 	movi	r5,12
 28030b0:	28008300 	call	2800830 <__mulsi3>
 28030b4:	1405883a 	add	r2,r2,r16
 28030b8:	10800204 	addi	r2,r2,8
 28030bc:	10800017 	ldw	r2,0(r2)
 28030c0:	1004403a 	cmpge	r2,r2,zero
 28030c4:	10000c1e 	bne	r2,zero,28030f8 <alt_file_locked+0xb4>
 28030c8:	e13ffd17 	ldw	r4,-12(fp)
 28030cc:	01400304 	movi	r5,12
 28030d0:	28008300 	call	2800830 <__mulsi3>
 28030d4:	1007883a 	mov	r3,r2
 28030d8:	0080a034 	movhi	r2,640
 28030dc:	10964304 	addi	r2,r2,22796
 28030e0:	1887883a 	add	r3,r3,r2
 28030e4:	e0bffe17 	ldw	r2,-8(fp)
 28030e8:	18800326 	beq	r3,r2,28030f8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 28030ec:	00bffcc4 	movi	r2,-13
 28030f0:	e0bfff15 	stw	r2,-4(fp)
 28030f4:	00000a06 	br	2803120 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 28030f8:	e0bffd17 	ldw	r2,-12(fp)
 28030fc:	10800044 	addi	r2,r2,1
 2803100:	e0bffd15 	stw	r2,-12(fp)
 2803104:	0080a034 	movhi	r2,640
 2803108:	1096a904 	addi	r2,r2,23204
 280310c:	10800017 	ldw	r2,0(r2)
 2803110:	1007883a 	mov	r3,r2
 2803114:	e0bffd17 	ldw	r2,-12(fp)
 2803118:	18bfd72e 	bgeu	r3,r2,2803078 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 280311c:	e03fff15 	stw	zero,-4(fp)
 2803120:	e0bfff17 	ldw	r2,-4(fp)
}
 2803124:	e037883a 	mov	sp,fp
 2803128:	dfc00217 	ldw	ra,8(sp)
 280312c:	df000117 	ldw	fp,4(sp)
 2803130:	dc000017 	ldw	r16,0(sp)
 2803134:	dec00304 	addi	sp,sp,12
 2803138:	f800283a 	ret

0280313c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 280313c:	defff404 	addi	sp,sp,-48
 2803140:	dfc00b15 	stw	ra,44(sp)
 2803144:	df000a15 	stw	fp,40(sp)
 2803148:	df000a04 	addi	fp,sp,40
 280314c:	e13ffb15 	stw	r4,-20(fp)
 2803150:	e17ffc15 	stw	r5,-16(fp)
 2803154:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2803158:	00bfffc4 	movi	r2,-1
 280315c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 2803160:	00bffb44 	movi	r2,-19
 2803164:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 2803168:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 280316c:	e13ffb17 	ldw	r4,-20(fp)
 2803170:	0140a034 	movhi	r5,640
 2803174:	2956a704 	addi	r5,r5,23196
 2803178:	2802b780 	call	2802b78 <alt_find_dev>
 280317c:	e0bffa15 	stw	r2,-24(fp)
 2803180:	e0bffa17 	ldw	r2,-24(fp)
 2803184:	1004c03a 	cmpne	r2,r2,zero
 2803188:	1000051e 	bne	r2,zero,28031a0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 280318c:	e13ffb17 	ldw	r4,-20(fp)
 2803190:	28035640 	call	2803564 <alt_find_file>
 2803194:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 2803198:	00800044 	movi	r2,1
 280319c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 28031a0:	e0bffa17 	ldw	r2,-24(fp)
 28031a4:	1005003a 	cmpeq	r2,r2,zero
 28031a8:	1000311e 	bne	r2,zero,2803270 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 28031ac:	e13ffa17 	ldw	r4,-24(fp)
 28031b0:	28036840 	call	2803684 <alt_get_fd>
 28031b4:	e0bff815 	stw	r2,-32(fp)
 28031b8:	e0bff817 	ldw	r2,-32(fp)
 28031bc:	1004403a 	cmpge	r2,r2,zero
 28031c0:	1000031e 	bne	r2,zero,28031d0 <open+0x94>
    {
      status = index;
 28031c4:	e0bff817 	ldw	r2,-32(fp)
 28031c8:	e0bff715 	stw	r2,-36(fp)
 28031cc:	00002a06 	br	2803278 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 28031d0:	e13ff817 	ldw	r4,-32(fp)
 28031d4:	01400304 	movi	r5,12
 28031d8:	28008300 	call	2800830 <__mulsi3>
 28031dc:	1007883a 	mov	r3,r2
 28031e0:	0080a034 	movhi	r2,640
 28031e4:	10964304 	addi	r2,r2,22796
 28031e8:	1885883a 	add	r2,r3,r2
 28031ec:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 28031f0:	e0fffc17 	ldw	r3,-16(fp)
 28031f4:	00900034 	movhi	r2,16384
 28031f8:	10bfffc4 	addi	r2,r2,-1
 28031fc:	1886703a 	and	r3,r3,r2
 2803200:	e0bff917 	ldw	r2,-28(fp)
 2803204:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2803208:	e0bff617 	ldw	r2,-40(fp)
 280320c:	1004c03a 	cmpne	r2,r2,zero
 2803210:	1000061e 	bne	r2,zero,280322c <open+0xf0>
 2803214:	e13ff917 	ldw	r4,-28(fp)
 2803218:	28030440 	call	2803044 <alt_file_locked>
 280321c:	e0bff715 	stw	r2,-36(fp)
 2803220:	e0bff717 	ldw	r2,-36(fp)
 2803224:	1004803a 	cmplt	r2,r2,zero
 2803228:	1000131e 	bne	r2,zero,2803278 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 280322c:	e0bffa17 	ldw	r2,-24(fp)
 2803230:	10800317 	ldw	r2,12(r2)
 2803234:	1005003a 	cmpeq	r2,r2,zero
 2803238:	1000091e 	bne	r2,zero,2803260 <open+0x124>
 280323c:	e0bffa17 	ldw	r2,-24(fp)
 2803240:	10800317 	ldw	r2,12(r2)
 2803244:	e13ff917 	ldw	r4,-28(fp)
 2803248:	e17ffb17 	ldw	r5,-20(fp)
 280324c:	e1bffc17 	ldw	r6,-16(fp)
 2803250:	e1fffd17 	ldw	r7,-12(fp)
 2803254:	103ee83a 	callr	r2
 2803258:	e0bfff15 	stw	r2,-4(fp)
 280325c:	00000106 	br	2803264 <open+0x128>
 2803260:	e03fff15 	stw	zero,-4(fp)
 2803264:	e0bfff17 	ldw	r2,-4(fp)
 2803268:	e0bff715 	stw	r2,-36(fp)
 280326c:	00000206 	br	2803278 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2803270:	00bffb44 	movi	r2,-19
 2803274:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2803278:	e0bff717 	ldw	r2,-36(fp)
 280327c:	1004403a 	cmpge	r2,r2,zero
 2803280:	1000091e 	bne	r2,zero,28032a8 <open+0x16c>
  {
    alt_release_fd (index);  
 2803284:	e13ff817 	ldw	r4,-32(fp)
 2803288:	28033280 	call	2803328 <alt_release_fd>
    ALT_ERRNO = -status;
 280328c:	28032c80 	call	28032c8 <alt_get_errno>
 2803290:	e0fff717 	ldw	r3,-36(fp)
 2803294:	00c7c83a 	sub	r3,zero,r3
 2803298:	10c00015 	stw	r3,0(r2)
    return -1;
 280329c:	00bfffc4 	movi	r2,-1
 28032a0:	e0bffe15 	stw	r2,-8(fp)
 28032a4:	00000206 	br	28032b0 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 28032a8:	e0bff817 	ldw	r2,-32(fp)
 28032ac:	e0bffe15 	stw	r2,-8(fp)
 28032b0:	e0bffe17 	ldw	r2,-8(fp)
}
 28032b4:	e037883a 	mov	sp,fp
 28032b8:	dfc00117 	ldw	ra,4(sp)
 28032bc:	df000017 	ldw	fp,0(sp)
 28032c0:	dec00204 	addi	sp,sp,8
 28032c4:	f800283a 	ret

028032c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 28032c8:	defffd04 	addi	sp,sp,-12
 28032cc:	dfc00215 	stw	ra,8(sp)
 28032d0:	df000115 	stw	fp,4(sp)
 28032d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 28032d8:	0080a034 	movhi	r2,640
 28032dc:	1096ae04 	addi	r2,r2,23224
 28032e0:	10800017 	ldw	r2,0(r2)
 28032e4:	1005003a 	cmpeq	r2,r2,zero
 28032e8:	1000061e 	bne	r2,zero,2803304 <alt_get_errno+0x3c>
 28032ec:	0080a034 	movhi	r2,640
 28032f0:	1096ae04 	addi	r2,r2,23224
 28032f4:	10800017 	ldw	r2,0(r2)
 28032f8:	103ee83a 	callr	r2
 28032fc:	e0bfff15 	stw	r2,-4(fp)
 2803300:	00000306 	br	2803310 <alt_get_errno+0x48>
 2803304:	0080a034 	movhi	r2,640
 2803308:	109deb04 	addi	r2,r2,30636
 280330c:	e0bfff15 	stw	r2,-4(fp)
 2803310:	e0bfff17 	ldw	r2,-4(fp)
}
 2803314:	e037883a 	mov	sp,fp
 2803318:	dfc00117 	ldw	ra,4(sp)
 280331c:	df000017 	ldw	fp,0(sp)
 2803320:	dec00204 	addi	sp,sp,8
 2803324:	f800283a 	ret

02803328 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2803328:	defffc04 	addi	sp,sp,-16
 280332c:	dfc00315 	stw	ra,12(sp)
 2803330:	df000215 	stw	fp,8(sp)
 2803334:	dc000115 	stw	r16,4(sp)
 2803338:	df000104 	addi	fp,sp,4
 280333c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2803340:	e0bfff17 	ldw	r2,-4(fp)
 2803344:	108000d0 	cmplti	r2,r2,3
 2803348:	10000f1e 	bne	r2,zero,2803388 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 280334c:	e13fff17 	ldw	r4,-4(fp)
 2803350:	0400a034 	movhi	r16,640
 2803354:	84164304 	addi	r16,r16,22796
 2803358:	01400304 	movi	r5,12
 280335c:	28008300 	call	2800830 <__mulsi3>
 2803360:	1405883a 	add	r2,r2,r16
 2803364:	10800204 	addi	r2,r2,8
 2803368:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 280336c:	e13fff17 	ldw	r4,-4(fp)
 2803370:	0400a034 	movhi	r16,640
 2803374:	84164304 	addi	r16,r16,22796
 2803378:	01400304 	movi	r5,12
 280337c:	28008300 	call	2800830 <__mulsi3>
 2803380:	1405883a 	add	r2,r2,r16
 2803384:	10000015 	stw	zero,0(r2)
  }
}
 2803388:	e037883a 	mov	sp,fp
 280338c:	dfc00217 	ldw	ra,8(sp)
 2803390:	df000117 	ldw	fp,4(sp)
 2803394:	dc000017 	ldw	r16,0(sp)
 2803398:	dec00304 	addi	sp,sp,12
 280339c:	f800283a 	ret

028033a0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 28033a0:	defffa04 	addi	sp,sp,-24
 28033a4:	df000515 	stw	fp,20(sp)
 28033a8:	df000504 	addi	fp,sp,20
 28033ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 28033b0:	0005303a 	rdctl	r2,status
 28033b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 28033b8:	e0fffd17 	ldw	r3,-12(fp)
 28033bc:	00bfff84 	movi	r2,-2
 28033c0:	1884703a 	and	r2,r3,r2
 28033c4:	1001703a 	wrctl	status,r2
  
  return context;
 28033c8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 28033cc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 28033d0:	e0bfff17 	ldw	r2,-4(fp)
 28033d4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 28033d8:	e0bffc17 	ldw	r2,-16(fp)
 28033dc:	10c00017 	ldw	r3,0(r2)
 28033e0:	e0bffc17 	ldw	r2,-16(fp)
 28033e4:	10800117 	ldw	r2,4(r2)
 28033e8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 28033ec:	e0bffc17 	ldw	r2,-16(fp)
 28033f0:	10c00117 	ldw	r3,4(r2)
 28033f4:	e0bffc17 	ldw	r2,-16(fp)
 28033f8:	10800017 	ldw	r2,0(r2)
 28033fc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2803400:	e0fffc17 	ldw	r3,-16(fp)
 2803404:	e0bffc17 	ldw	r2,-16(fp)
 2803408:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 280340c:	e0fffc17 	ldw	r3,-16(fp)
 2803410:	e0bffc17 	ldw	r2,-16(fp)
 2803414:	18800015 	stw	r2,0(r3)
 2803418:	e0bffe17 	ldw	r2,-8(fp)
 280341c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2803420:	e0bffb17 	ldw	r2,-20(fp)
 2803424:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2803428:	e037883a 	mov	sp,fp
 280342c:	df000017 	ldw	fp,0(sp)
 2803430:	dec00104 	addi	sp,sp,4
 2803434:	f800283a 	ret

02803438 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2803438:	defffb04 	addi	sp,sp,-20
 280343c:	dfc00415 	stw	ra,16(sp)
 2803440:	df000315 	stw	fp,12(sp)
 2803444:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2803448:	d0a00d17 	ldw	r2,-32716(gp)
 280344c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2803450:	d0a74717 	ldw	r2,-25316(gp)
 2803454:	10800044 	addi	r2,r2,1
 2803458:	d0a74715 	stw	r2,-25316(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 280345c:	00003106 	br	2803524 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 2803460:	e0bffe17 	ldw	r2,-8(fp)
 2803464:	10800017 	ldw	r2,0(r2)
 2803468:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 280346c:	e0bffe17 	ldw	r2,-8(fp)
 2803470:	10800403 	ldbu	r2,16(r2)
 2803474:	10803fcc 	andi	r2,r2,255
 2803478:	1005003a 	cmpeq	r2,r2,zero
 280347c:	1000051e 	bne	r2,zero,2803494 <alt_tick+0x5c>
 2803480:	d0a74717 	ldw	r2,-25316(gp)
 2803484:	1004c03a 	cmpne	r2,r2,zero
 2803488:	1000021e 	bne	r2,zero,2803494 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 280348c:	e0bffe17 	ldw	r2,-8(fp)
 2803490:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2803494:	e0bffe17 	ldw	r2,-8(fp)
 2803498:	10c00217 	ldw	r3,8(r2)
 280349c:	d0a74717 	ldw	r2,-25316(gp)
 28034a0:	10c01e36 	bltu	r2,r3,280351c <alt_tick+0xe4>
 28034a4:	e0bffe17 	ldw	r2,-8(fp)
 28034a8:	10800403 	ldbu	r2,16(r2)
 28034ac:	10803fcc 	andi	r2,r2,255
 28034b0:	1004c03a 	cmpne	r2,r2,zero
 28034b4:	1000191e 	bne	r2,zero,280351c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 28034b8:	e0bffe17 	ldw	r2,-8(fp)
 28034bc:	10c00317 	ldw	r3,12(r2)
 28034c0:	e0bffe17 	ldw	r2,-8(fp)
 28034c4:	11000517 	ldw	r4,20(r2)
 28034c8:	183ee83a 	callr	r3
 28034cc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 28034d0:	e0bffd17 	ldw	r2,-12(fp)
 28034d4:	1004c03a 	cmpne	r2,r2,zero
 28034d8:	1000031e 	bne	r2,zero,28034e8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 28034dc:	e13ffe17 	ldw	r4,-8(fp)
 28034e0:	28033a00 	call	28033a0 <alt_alarm_stop>
 28034e4:	00000d06 	br	280351c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 28034e8:	e0bffe17 	ldw	r2,-8(fp)
 28034ec:	10c00217 	ldw	r3,8(r2)
 28034f0:	e0bffd17 	ldw	r2,-12(fp)
 28034f4:	1887883a 	add	r3,r3,r2
 28034f8:	e0bffe17 	ldw	r2,-8(fp)
 28034fc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2803500:	e0bffe17 	ldw	r2,-8(fp)
 2803504:	10c00217 	ldw	r3,8(r2)
 2803508:	d0a74717 	ldw	r2,-25316(gp)
 280350c:	1880032e 	bgeu	r3,r2,280351c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 2803510:	e0fffe17 	ldw	r3,-8(fp)
 2803514:	00800044 	movi	r2,1
 2803518:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 280351c:	e0bfff17 	ldw	r2,-4(fp)
 2803520:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2803524:	d0e00d04 	addi	r3,gp,-32716
 2803528:	e0bffe17 	ldw	r2,-8(fp)
 280352c:	10ffcc1e 	bne	r2,r3,2803460 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 2803530:	e037883a 	mov	sp,fp
 2803534:	dfc00117 	ldw	ra,4(sp)
 2803538:	df000017 	ldw	fp,0(sp)
 280353c:	dec00204 	addi	sp,sp,8
 2803540:	f800283a 	ret

02803544 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 2803544:	deffff04 	addi	sp,sp,-4
 2803548:	df000015 	stw	fp,0(sp)
 280354c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2803550:	000170fa 	wrctl	ienable,zero
}
 2803554:	e037883a 	mov	sp,fp
 2803558:	df000017 	ldw	fp,0(sp)
 280355c:	dec00104 	addi	sp,sp,4
 2803560:	f800283a 	ret

02803564 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2803564:	defffa04 	addi	sp,sp,-24
 2803568:	dfc00515 	stw	ra,20(sp)
 280356c:	df000415 	stw	fp,16(sp)
 2803570:	df000404 	addi	fp,sp,16
 2803574:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2803578:	0080a034 	movhi	r2,640
 280357c:	1096a504 	addi	r2,r2,23188
 2803580:	10800017 	ldw	r2,0(r2)
 2803584:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2803588:	00003306 	br	2803658 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 280358c:	e0bffd17 	ldw	r2,-12(fp)
 2803590:	11000217 	ldw	r4,8(r2)
 2803594:	28038b40 	call	28038b4 <strlen>
 2803598:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 280359c:	e0bffd17 	ldw	r2,-12(fp)
 28035a0:	10c00217 	ldw	r3,8(r2)
 28035a4:	e0bffc17 	ldw	r2,-16(fp)
 28035a8:	1885883a 	add	r2,r3,r2
 28035ac:	10bfffc4 	addi	r2,r2,-1
 28035b0:	10800003 	ldbu	r2,0(r2)
 28035b4:	10803fcc 	andi	r2,r2,255
 28035b8:	1080201c 	xori	r2,r2,128
 28035bc:	10bfe004 	addi	r2,r2,-128
 28035c0:	10800bd8 	cmpnei	r2,r2,47
 28035c4:	1000031e 	bne	r2,zero,28035d4 <alt_find_file+0x70>
    {
      len -= 1;
 28035c8:	e0bffc17 	ldw	r2,-16(fp)
 28035cc:	10bfffc4 	addi	r2,r2,-1
 28035d0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 28035d4:	e0bffc17 	ldw	r2,-16(fp)
 28035d8:	1007883a 	mov	r3,r2
 28035dc:	e0bffe17 	ldw	r2,-8(fp)
 28035e0:	1885883a 	add	r2,r3,r2
 28035e4:	10800003 	ldbu	r2,0(r2)
 28035e8:	10803fcc 	andi	r2,r2,255
 28035ec:	1080201c 	xori	r2,r2,128
 28035f0:	10bfe004 	addi	r2,r2,-128
 28035f4:	10800be0 	cmpeqi	r2,r2,47
 28035f8:	10000a1e 	bne	r2,zero,2803624 <alt_find_file+0xc0>
 28035fc:	e0bffc17 	ldw	r2,-16(fp)
 2803600:	1007883a 	mov	r3,r2
 2803604:	e0bffe17 	ldw	r2,-8(fp)
 2803608:	1885883a 	add	r2,r3,r2
 280360c:	10800003 	ldbu	r2,0(r2)
 2803610:	10803fcc 	andi	r2,r2,255
 2803614:	1080201c 	xori	r2,r2,128
 2803618:	10bfe004 	addi	r2,r2,-128
 280361c:	1004c03a 	cmpne	r2,r2,zero
 2803620:	10000a1e 	bne	r2,zero,280364c <alt_find_file+0xe8>
 2803624:	e0bffd17 	ldw	r2,-12(fp)
 2803628:	11000217 	ldw	r4,8(r2)
 280362c:	e1bffc17 	ldw	r6,-16(fp)
 2803630:	e17ffe17 	ldw	r5,-8(fp)
 2803634:	28037a00 	call	28037a0 <memcmp>
 2803638:	1004c03a 	cmpne	r2,r2,zero
 280363c:	1000031e 	bne	r2,zero,280364c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2803640:	e0bffd17 	ldw	r2,-12(fp)
 2803644:	e0bfff15 	stw	r2,-4(fp)
 2803648:	00000806 	br	280366c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 280364c:	e0bffd17 	ldw	r2,-12(fp)
 2803650:	10800017 	ldw	r2,0(r2)
 2803654:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2803658:	00c0a034 	movhi	r3,640
 280365c:	18d6a504 	addi	r3,r3,23188
 2803660:	e0bffd17 	ldw	r2,-12(fp)
 2803664:	10ffc91e 	bne	r2,r3,280358c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2803668:	e03fff15 	stw	zero,-4(fp)
 280366c:	e0bfff17 	ldw	r2,-4(fp)
}
 2803670:	e037883a 	mov	sp,fp
 2803674:	dfc00117 	ldw	ra,4(sp)
 2803678:	df000017 	ldw	fp,0(sp)
 280367c:	dec00204 	addi	sp,sp,8
 2803680:	f800283a 	ret

02803684 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2803684:	defffa04 	addi	sp,sp,-24
 2803688:	dfc00515 	stw	ra,20(sp)
 280368c:	df000415 	stw	fp,16(sp)
 2803690:	dc000315 	stw	r16,12(sp)
 2803694:	df000304 	addi	fp,sp,12
 2803698:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 280369c:	00bffa04 	movi	r2,-24
 28036a0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 28036a4:	e03ffe15 	stw	zero,-8(fp)
 28036a8:	00002006 	br	280372c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 28036ac:	e13ffe17 	ldw	r4,-8(fp)
 28036b0:	0400a034 	movhi	r16,640
 28036b4:	84164304 	addi	r16,r16,22796
 28036b8:	01400304 	movi	r5,12
 28036bc:	28008300 	call	2800830 <__mulsi3>
 28036c0:	1405883a 	add	r2,r2,r16
 28036c4:	10800017 	ldw	r2,0(r2)
 28036c8:	1004c03a 	cmpne	r2,r2,zero
 28036cc:	1000141e 	bne	r2,zero,2803720 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 28036d0:	e13ffe17 	ldw	r4,-8(fp)
 28036d4:	0400a034 	movhi	r16,640
 28036d8:	84164304 	addi	r16,r16,22796
 28036dc:	01400304 	movi	r5,12
 28036e0:	28008300 	call	2800830 <__mulsi3>
 28036e4:	1407883a 	add	r3,r2,r16
 28036e8:	e0bfff17 	ldw	r2,-4(fp)
 28036ec:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 28036f0:	0080a034 	movhi	r2,640
 28036f4:	1096a904 	addi	r2,r2,23204
 28036f8:	10c00017 	ldw	r3,0(r2)
 28036fc:	e0bffe17 	ldw	r2,-8(fp)
 2803700:	1880040e 	bge	r3,r2,2803714 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 2803704:	00c0a034 	movhi	r3,640
 2803708:	18d6a904 	addi	r3,r3,23204
 280370c:	e0bffe17 	ldw	r2,-8(fp)
 2803710:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 2803714:	e0bffe17 	ldw	r2,-8(fp)
 2803718:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 280371c:	00000606 	br	2803738 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2803720:	e0bffe17 	ldw	r2,-8(fp)
 2803724:	10800044 	addi	r2,r2,1
 2803728:	e0bffe15 	stw	r2,-8(fp)
 280372c:	e0bffe17 	ldw	r2,-8(fp)
 2803730:	10800810 	cmplti	r2,r2,32
 2803734:	103fdd1e 	bne	r2,zero,28036ac <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2803738:	e0bffd17 	ldw	r2,-12(fp)
}
 280373c:	e037883a 	mov	sp,fp
 2803740:	dfc00217 	ldw	ra,8(sp)
 2803744:	df000117 	ldw	fp,4(sp)
 2803748:	dc000017 	ldw	r16,0(sp)
 280374c:	dec00304 	addi	sp,sp,12
 2803750:	f800283a 	ret

02803754 <atexit>:
 2803754:	200b883a 	mov	r5,r4
 2803758:	000d883a 	mov	r6,zero
 280375c:	0009883a 	mov	r4,zero
 2803760:	000f883a 	mov	r7,zero
 2803764:	28039281 	jmpi	2803928 <__register_exitproc>

02803768 <exit>:
 2803768:	defffe04 	addi	sp,sp,-8
 280376c:	000b883a 	mov	r5,zero
 2803770:	dc000015 	stw	r16,0(sp)
 2803774:	dfc00115 	stw	ra,4(sp)
 2803778:	2021883a 	mov	r16,r4
 280377c:	2803a600 	call	2803a60 <__call_exitprocs>
 2803780:	0080a034 	movhi	r2,640
 2803784:	1096a404 	addi	r2,r2,23184
 2803788:	11000017 	ldw	r4,0(r2)
 280378c:	20800f17 	ldw	r2,60(r4)
 2803790:	10000126 	beq	r2,zero,2803798 <exit+0x30>
 2803794:	103ee83a 	callr	r2
 2803798:	8009883a 	mov	r4,r16
 280379c:	2803d9c0 	call	2803d9c <_exit>

028037a0 <memcmp>:
 28037a0:	00c000c4 	movi	r3,3
 28037a4:	1980032e 	bgeu	r3,r6,28037b4 <memcmp+0x14>
 28037a8:	2144b03a 	or	r2,r4,r5
 28037ac:	10c4703a 	and	r2,r2,r3
 28037b0:	10000f26 	beq	r2,zero,28037f0 <memcmp+0x50>
 28037b4:	31ffffc4 	addi	r7,r6,-1
 28037b8:	3000061e 	bne	r6,zero,28037d4 <memcmp+0x34>
 28037bc:	00000a06 	br	28037e8 <memcmp+0x48>
 28037c0:	39ffffc4 	addi	r7,r7,-1
 28037c4:	00bfffc4 	movi	r2,-1
 28037c8:	21000044 	addi	r4,r4,1
 28037cc:	29400044 	addi	r5,r5,1
 28037d0:	38800526 	beq	r7,r2,28037e8 <memcmp+0x48>
 28037d4:	20c00003 	ldbu	r3,0(r4)
 28037d8:	28800003 	ldbu	r2,0(r5)
 28037dc:	18bff826 	beq	r3,r2,28037c0 <memcmp+0x20>
 28037e0:	1885c83a 	sub	r2,r3,r2
 28037e4:	f800283a 	ret
 28037e8:	0005883a 	mov	r2,zero
 28037ec:	f800283a 	ret
 28037f0:	180f883a 	mov	r7,r3
 28037f4:	20c00017 	ldw	r3,0(r4)
 28037f8:	28800017 	ldw	r2,0(r5)
 28037fc:	18bfed1e 	bne	r3,r2,28037b4 <memcmp+0x14>
 2803800:	31bfff04 	addi	r6,r6,-4
 2803804:	21000104 	addi	r4,r4,4
 2803808:	29400104 	addi	r5,r5,4
 280380c:	39bff936 	bltu	r7,r6,28037f4 <memcmp+0x54>
 2803810:	003fe806 	br	28037b4 <memcmp+0x14>

02803814 <memcpy>:
 2803814:	01c003c4 	movi	r7,15
 2803818:	2007883a 	mov	r3,r4
 280381c:	3980032e 	bgeu	r7,r6,280382c <memcpy+0x18>
 2803820:	2904b03a 	or	r2,r5,r4
 2803824:	108000cc 	andi	r2,r2,3
 2803828:	10000926 	beq	r2,zero,2803850 <memcpy+0x3c>
 280382c:	30000626 	beq	r6,zero,2803848 <memcpy+0x34>
 2803830:	30cd883a 	add	r6,r6,r3
 2803834:	28800003 	ldbu	r2,0(r5)
 2803838:	29400044 	addi	r5,r5,1
 280383c:	18800005 	stb	r2,0(r3)
 2803840:	18c00044 	addi	r3,r3,1
 2803844:	30fffb1e 	bne	r6,r3,2803834 <memcpy+0x20>
 2803848:	2005883a 	mov	r2,r4
 280384c:	f800283a 	ret
 2803850:	3811883a 	mov	r8,r7
 2803854:	200f883a 	mov	r7,r4
 2803858:	28c00017 	ldw	r3,0(r5)
 280385c:	31bffc04 	addi	r6,r6,-16
 2803860:	38c00015 	stw	r3,0(r7)
 2803864:	28800117 	ldw	r2,4(r5)
 2803868:	38800115 	stw	r2,4(r7)
 280386c:	28c00217 	ldw	r3,8(r5)
 2803870:	38c00215 	stw	r3,8(r7)
 2803874:	28800317 	ldw	r2,12(r5)
 2803878:	29400404 	addi	r5,r5,16
 280387c:	38800315 	stw	r2,12(r7)
 2803880:	39c00404 	addi	r7,r7,16
 2803884:	41bff436 	bltu	r8,r6,2803858 <memcpy+0x44>
 2803888:	008000c4 	movi	r2,3
 280388c:	1180072e 	bgeu	r2,r6,28038ac <memcpy+0x98>
 2803890:	1007883a 	mov	r3,r2
 2803894:	28800017 	ldw	r2,0(r5)
 2803898:	31bfff04 	addi	r6,r6,-4
 280389c:	29400104 	addi	r5,r5,4
 28038a0:	38800015 	stw	r2,0(r7)
 28038a4:	39c00104 	addi	r7,r7,4
 28038a8:	19bffa36 	bltu	r3,r6,2803894 <memcpy+0x80>
 28038ac:	3807883a 	mov	r3,r7
 28038b0:	003fde06 	br	280382c <memcpy+0x18>

028038b4 <strlen>:
 28038b4:	208000cc 	andi	r2,r4,3
 28038b8:	2011883a 	mov	r8,r4
 28038bc:	1000161e 	bne	r2,zero,2803918 <strlen+0x64>
 28038c0:	20c00017 	ldw	r3,0(r4)
 28038c4:	017fbff4 	movhi	r5,65279
 28038c8:	297fbfc4 	addi	r5,r5,-257
 28038cc:	01e02074 	movhi	r7,32897
 28038d0:	39e02004 	addi	r7,r7,-32640
 28038d4:	1945883a 	add	r2,r3,r5
 28038d8:	11c4703a 	and	r2,r2,r7
 28038dc:	00c6303a 	nor	r3,zero,r3
 28038e0:	1886703a 	and	r3,r3,r2
 28038e4:	18000c1e 	bne	r3,zero,2803918 <strlen+0x64>
 28038e8:	280d883a 	mov	r6,r5
 28038ec:	380b883a 	mov	r5,r7
 28038f0:	21000104 	addi	r4,r4,4
 28038f4:	20800017 	ldw	r2,0(r4)
 28038f8:	1187883a 	add	r3,r2,r6
 28038fc:	1946703a 	and	r3,r3,r5
 2803900:	0084303a 	nor	r2,zero,r2
 2803904:	10c4703a 	and	r2,r2,r3
 2803908:	103ff926 	beq	r2,zero,28038f0 <strlen+0x3c>
 280390c:	20800007 	ldb	r2,0(r4)
 2803910:	10000326 	beq	r2,zero,2803920 <strlen+0x6c>
 2803914:	21000044 	addi	r4,r4,1
 2803918:	20800007 	ldb	r2,0(r4)
 280391c:	103ffd1e 	bne	r2,zero,2803914 <strlen+0x60>
 2803920:	2205c83a 	sub	r2,r4,r8
 2803924:	f800283a 	ret

02803928 <__register_exitproc>:
 2803928:	defffa04 	addi	sp,sp,-24
 280392c:	0080a034 	movhi	r2,640
 2803930:	1096a404 	addi	r2,r2,23184
 2803934:	dc000015 	stw	r16,0(sp)
 2803938:	14000017 	ldw	r16,0(r2)
 280393c:	dd000415 	stw	r20,16(sp)
 2803940:	2829883a 	mov	r20,r5
 2803944:	81405217 	ldw	r5,328(r16)
 2803948:	dcc00315 	stw	r19,12(sp)
 280394c:	dc800215 	stw	r18,8(sp)
 2803950:	dc400115 	stw	r17,4(sp)
 2803954:	dfc00515 	stw	ra,20(sp)
 2803958:	2023883a 	mov	r17,r4
 280395c:	3027883a 	mov	r19,r6
 2803960:	3825883a 	mov	r18,r7
 2803964:	28002526 	beq	r5,zero,28039fc <__register_exitproc+0xd4>
 2803968:	29000117 	ldw	r4,4(r5)
 280396c:	008007c4 	movi	r2,31
 2803970:	11002716 	blt	r2,r4,2803a10 <__register_exitproc+0xe8>
 2803974:	8800101e 	bne	r17,zero,28039b8 <__register_exitproc+0x90>
 2803978:	2105883a 	add	r2,r4,r4
 280397c:	1085883a 	add	r2,r2,r2
 2803980:	20c00044 	addi	r3,r4,1
 2803984:	1145883a 	add	r2,r2,r5
 2803988:	0009883a 	mov	r4,zero
 280398c:	15000215 	stw	r20,8(r2)
 2803990:	28c00115 	stw	r3,4(r5)
 2803994:	2005883a 	mov	r2,r4
 2803998:	dfc00517 	ldw	ra,20(sp)
 280399c:	dd000417 	ldw	r20,16(sp)
 28039a0:	dcc00317 	ldw	r19,12(sp)
 28039a4:	dc800217 	ldw	r18,8(sp)
 28039a8:	dc400117 	ldw	r17,4(sp)
 28039ac:	dc000017 	ldw	r16,0(sp)
 28039b0:	dec00604 	addi	sp,sp,24
 28039b4:	f800283a 	ret
 28039b8:	29802204 	addi	r6,r5,136
 28039bc:	00800044 	movi	r2,1
 28039c0:	110e983a 	sll	r7,r2,r4
 28039c4:	30c04017 	ldw	r3,256(r6)
 28039c8:	2105883a 	add	r2,r4,r4
 28039cc:	1085883a 	add	r2,r2,r2
 28039d0:	1185883a 	add	r2,r2,r6
 28039d4:	19c6b03a 	or	r3,r3,r7
 28039d8:	14802015 	stw	r18,128(r2)
 28039dc:	14c00015 	stw	r19,0(r2)
 28039e0:	00800084 	movi	r2,2
 28039e4:	30c04015 	stw	r3,256(r6)
 28039e8:	88bfe31e 	bne	r17,r2,2803978 <__register_exitproc+0x50>
 28039ec:	30804117 	ldw	r2,260(r6)
 28039f0:	11c4b03a 	or	r2,r2,r7
 28039f4:	30804115 	stw	r2,260(r6)
 28039f8:	003fdf06 	br	2803978 <__register_exitproc+0x50>
 28039fc:	0080a034 	movhi	r2,640
 2803a00:	109e2c04 	addi	r2,r2,30896
 2803a04:	100b883a 	mov	r5,r2
 2803a08:	80805215 	stw	r2,328(r16)
 2803a0c:	003fd606 	br	2803968 <__register_exitproc+0x40>
 2803a10:	00800034 	movhi	r2,0
 2803a14:	10800004 	addi	r2,r2,0
 2803a18:	1000021e 	bne	r2,zero,2803a24 <__register_exitproc+0xfc>
 2803a1c:	013fffc4 	movi	r4,-1
 2803a20:	003fdc06 	br	2803994 <__register_exitproc+0x6c>
 2803a24:	01006404 	movi	r4,400
 2803a28:	103ee83a 	callr	r2
 2803a2c:	1007883a 	mov	r3,r2
 2803a30:	103ffa26 	beq	r2,zero,2803a1c <__register_exitproc+0xf4>
 2803a34:	80805217 	ldw	r2,328(r16)
 2803a38:	180b883a 	mov	r5,r3
 2803a3c:	18000115 	stw	zero,4(r3)
 2803a40:	18800015 	stw	r2,0(r3)
 2803a44:	80c05215 	stw	r3,328(r16)
 2803a48:	18006215 	stw	zero,392(r3)
 2803a4c:	18006315 	stw	zero,396(r3)
 2803a50:	0009883a 	mov	r4,zero
 2803a54:	883fc826 	beq	r17,zero,2803978 <__register_exitproc+0x50>
 2803a58:	003fd706 	br	28039b8 <__register_exitproc+0x90>

02803a5c <register_fini>:
 2803a5c:	f800283a 	ret

02803a60 <__call_exitprocs>:
 2803a60:	0080a034 	movhi	r2,640
 2803a64:	1096a404 	addi	r2,r2,23184
 2803a68:	10800017 	ldw	r2,0(r2)
 2803a6c:	defff304 	addi	sp,sp,-52
 2803a70:	df000b15 	stw	fp,44(sp)
 2803a74:	d8800115 	stw	r2,4(sp)
 2803a78:	00800034 	movhi	r2,0
 2803a7c:	10800004 	addi	r2,r2,0
 2803a80:	1005003a 	cmpeq	r2,r2,zero
 2803a84:	d8800215 	stw	r2,8(sp)
 2803a88:	d8800117 	ldw	r2,4(sp)
 2803a8c:	dd400815 	stw	r21,32(sp)
 2803a90:	dd000715 	stw	r20,28(sp)
 2803a94:	10805204 	addi	r2,r2,328
 2803a98:	dfc00c15 	stw	ra,48(sp)
 2803a9c:	ddc00a15 	stw	r23,40(sp)
 2803aa0:	dd800915 	stw	r22,36(sp)
 2803aa4:	dcc00615 	stw	r19,24(sp)
 2803aa8:	dc800515 	stw	r18,20(sp)
 2803aac:	dc400415 	stw	r17,16(sp)
 2803ab0:	dc000315 	stw	r16,12(sp)
 2803ab4:	282b883a 	mov	r21,r5
 2803ab8:	2039883a 	mov	fp,r4
 2803abc:	d8800015 	stw	r2,0(sp)
 2803ac0:	2829003a 	cmpeq	r20,r5,zero
 2803ac4:	d8800117 	ldw	r2,4(sp)
 2803ac8:	14405217 	ldw	r17,328(r2)
 2803acc:	88001026 	beq	r17,zero,2803b10 <__call_exitprocs+0xb0>
 2803ad0:	ddc00017 	ldw	r23,0(sp)
 2803ad4:	88800117 	ldw	r2,4(r17)
 2803ad8:	8c802204 	addi	r18,r17,136
 2803adc:	143fffc4 	addi	r16,r2,-1
 2803ae0:	80000916 	blt	r16,zero,2803b08 <__call_exitprocs+0xa8>
 2803ae4:	05bfffc4 	movi	r22,-1
 2803ae8:	a000151e 	bne	r20,zero,2803b40 <__call_exitprocs+0xe0>
 2803aec:	8409883a 	add	r4,r16,r16
 2803af0:	2105883a 	add	r2,r4,r4
 2803af4:	1485883a 	add	r2,r2,r18
 2803af8:	10c02017 	ldw	r3,128(r2)
 2803afc:	a8c01126 	beq	r21,r3,2803b44 <__call_exitprocs+0xe4>
 2803b00:	843fffc4 	addi	r16,r16,-1
 2803b04:	85bff81e 	bne	r16,r22,2803ae8 <__call_exitprocs+0x88>
 2803b08:	d8800217 	ldw	r2,8(sp)
 2803b0c:	10003126 	beq	r2,zero,2803bd4 <__call_exitprocs+0x174>
 2803b10:	dfc00c17 	ldw	ra,48(sp)
 2803b14:	df000b17 	ldw	fp,44(sp)
 2803b18:	ddc00a17 	ldw	r23,40(sp)
 2803b1c:	dd800917 	ldw	r22,36(sp)
 2803b20:	dd400817 	ldw	r21,32(sp)
 2803b24:	dd000717 	ldw	r20,28(sp)
 2803b28:	dcc00617 	ldw	r19,24(sp)
 2803b2c:	dc800517 	ldw	r18,20(sp)
 2803b30:	dc400417 	ldw	r17,16(sp)
 2803b34:	dc000317 	ldw	r16,12(sp)
 2803b38:	dec00d04 	addi	sp,sp,52
 2803b3c:	f800283a 	ret
 2803b40:	8409883a 	add	r4,r16,r16
 2803b44:	88c00117 	ldw	r3,4(r17)
 2803b48:	2105883a 	add	r2,r4,r4
 2803b4c:	1445883a 	add	r2,r2,r17
 2803b50:	18ffffc4 	addi	r3,r3,-1
 2803b54:	11800217 	ldw	r6,8(r2)
 2803b58:	1c001526 	beq	r3,r16,2803bb0 <__call_exitprocs+0x150>
 2803b5c:	10000215 	stw	zero,8(r2)
 2803b60:	303fe726 	beq	r6,zero,2803b00 <__call_exitprocs+0xa0>
 2803b64:	00c00044 	movi	r3,1
 2803b68:	1c06983a 	sll	r3,r3,r16
 2803b6c:	90804017 	ldw	r2,256(r18)
 2803b70:	8cc00117 	ldw	r19,4(r17)
 2803b74:	1884703a 	and	r2,r3,r2
 2803b78:	10001426 	beq	r2,zero,2803bcc <__call_exitprocs+0x16c>
 2803b7c:	90804117 	ldw	r2,260(r18)
 2803b80:	1884703a 	and	r2,r3,r2
 2803b84:	10000c1e 	bne	r2,zero,2803bb8 <__call_exitprocs+0x158>
 2803b88:	2105883a 	add	r2,r4,r4
 2803b8c:	1485883a 	add	r2,r2,r18
 2803b90:	11400017 	ldw	r5,0(r2)
 2803b94:	e009883a 	mov	r4,fp
 2803b98:	303ee83a 	callr	r6
 2803b9c:	88800117 	ldw	r2,4(r17)
 2803ba0:	98bfc81e 	bne	r19,r2,2803ac4 <__call_exitprocs+0x64>
 2803ba4:	b8800017 	ldw	r2,0(r23)
 2803ba8:	147fd526 	beq	r2,r17,2803b00 <__call_exitprocs+0xa0>
 2803bac:	003fc506 	br	2803ac4 <__call_exitprocs+0x64>
 2803bb0:	8c000115 	stw	r16,4(r17)
 2803bb4:	003fea06 	br	2803b60 <__call_exitprocs+0x100>
 2803bb8:	2105883a 	add	r2,r4,r4
 2803bbc:	1485883a 	add	r2,r2,r18
 2803bc0:	11000017 	ldw	r4,0(r2)
 2803bc4:	303ee83a 	callr	r6
 2803bc8:	003ff406 	br	2803b9c <__call_exitprocs+0x13c>
 2803bcc:	303ee83a 	callr	r6
 2803bd0:	003ff206 	br	2803b9c <__call_exitprocs+0x13c>
 2803bd4:	88800117 	ldw	r2,4(r17)
 2803bd8:	1000081e 	bne	r2,zero,2803bfc <__call_exitprocs+0x19c>
 2803bdc:	89000017 	ldw	r4,0(r17)
 2803be0:	20000726 	beq	r4,zero,2803c00 <__call_exitprocs+0x1a0>
 2803be4:	b9000015 	stw	r4,0(r23)
 2803be8:	8809883a 	mov	r4,r17
 2803bec:	00000000 	call	0 <__alt_mem_sdram_ctrl-0x2800000>
 2803bf0:	bc400017 	ldw	r17,0(r23)
 2803bf4:	883fb71e 	bne	r17,zero,2803ad4 <__call_exitprocs+0x74>
 2803bf8:	003fc506 	br	2803b10 <__call_exitprocs+0xb0>
 2803bfc:	89000017 	ldw	r4,0(r17)
 2803c00:	882f883a 	mov	r23,r17
 2803c04:	2023883a 	mov	r17,r4
 2803c08:	883fb21e 	bne	r17,zero,2803ad4 <__call_exitprocs+0x74>
 2803c0c:	003fc006 	br	2803b10 <__call_exitprocs+0xb0>

02803c10 <udivmodsi4>:
 2803c10:	29001b2e 	bgeu	r5,r4,2803c80 <udivmodsi4+0x70>
 2803c14:	28001a16 	blt	r5,zero,2803c80 <udivmodsi4+0x70>
 2803c18:	00800044 	movi	r2,1
 2803c1c:	0007883a 	mov	r3,zero
 2803c20:	01c007c4 	movi	r7,31
 2803c24:	00000306 	br	2803c34 <udivmodsi4+0x24>
 2803c28:	19c01326 	beq	r3,r7,2803c78 <udivmodsi4+0x68>
 2803c2c:	18c00044 	addi	r3,r3,1
 2803c30:	28000416 	blt	r5,zero,2803c44 <udivmodsi4+0x34>
 2803c34:	294b883a 	add	r5,r5,r5
 2803c38:	1085883a 	add	r2,r2,r2
 2803c3c:	293ffa36 	bltu	r5,r4,2803c28 <udivmodsi4+0x18>
 2803c40:	10000d26 	beq	r2,zero,2803c78 <udivmodsi4+0x68>
 2803c44:	0007883a 	mov	r3,zero
 2803c48:	21400236 	bltu	r4,r5,2803c54 <udivmodsi4+0x44>
 2803c4c:	2149c83a 	sub	r4,r4,r5
 2803c50:	1886b03a 	or	r3,r3,r2
 2803c54:	1004d07a 	srli	r2,r2,1
 2803c58:	280ad07a 	srli	r5,r5,1
 2803c5c:	103ffa1e 	bne	r2,zero,2803c48 <udivmodsi4+0x38>
 2803c60:	30000226 	beq	r6,zero,2803c6c <udivmodsi4+0x5c>
 2803c64:	2005883a 	mov	r2,r4
 2803c68:	f800283a 	ret
 2803c6c:	1809883a 	mov	r4,r3
 2803c70:	2005883a 	mov	r2,r4
 2803c74:	f800283a 	ret
 2803c78:	0007883a 	mov	r3,zero
 2803c7c:	003ff806 	br	2803c60 <udivmodsi4+0x50>
 2803c80:	00800044 	movi	r2,1
 2803c84:	0007883a 	mov	r3,zero
 2803c88:	003fef06 	br	2803c48 <udivmodsi4+0x38>

02803c8c <__divsi3>:
 2803c8c:	defffe04 	addi	sp,sp,-8
 2803c90:	dc000015 	stw	r16,0(sp)
 2803c94:	dfc00115 	stw	ra,4(sp)
 2803c98:	0021883a 	mov	r16,zero
 2803c9c:	20000c16 	blt	r4,zero,2803cd0 <__divsi3+0x44>
 2803ca0:	000d883a 	mov	r6,zero
 2803ca4:	28000e16 	blt	r5,zero,2803ce0 <__divsi3+0x54>
 2803ca8:	2803c100 	call	2803c10 <udivmodsi4>
 2803cac:	1007883a 	mov	r3,r2
 2803cb0:	8005003a 	cmpeq	r2,r16,zero
 2803cb4:	1000011e 	bne	r2,zero,2803cbc <__divsi3+0x30>
 2803cb8:	00c7c83a 	sub	r3,zero,r3
 2803cbc:	1805883a 	mov	r2,r3
 2803cc0:	dfc00117 	ldw	ra,4(sp)
 2803cc4:	dc000017 	ldw	r16,0(sp)
 2803cc8:	dec00204 	addi	sp,sp,8
 2803ccc:	f800283a 	ret
 2803cd0:	0109c83a 	sub	r4,zero,r4
 2803cd4:	04000044 	movi	r16,1
 2803cd8:	000d883a 	mov	r6,zero
 2803cdc:	283ff20e 	bge	r5,zero,2803ca8 <__divsi3+0x1c>
 2803ce0:	014bc83a 	sub	r5,zero,r5
 2803ce4:	8021003a 	cmpeq	r16,r16,zero
 2803ce8:	003fef06 	br	2803ca8 <__divsi3+0x1c>

02803cec <__modsi3>:
 2803cec:	deffff04 	addi	sp,sp,-4
 2803cf0:	dfc00015 	stw	ra,0(sp)
 2803cf4:	01800044 	movi	r6,1
 2803cf8:	2807883a 	mov	r3,r5
 2803cfc:	20000416 	blt	r4,zero,2803d10 <__modsi3+0x24>
 2803d00:	28000c16 	blt	r5,zero,2803d34 <__modsi3+0x48>
 2803d04:	dfc00017 	ldw	ra,0(sp)
 2803d08:	dec00104 	addi	sp,sp,4
 2803d0c:	2803c101 	jmpi	2803c10 <udivmodsi4>
 2803d10:	0109c83a 	sub	r4,zero,r4
 2803d14:	28000b16 	blt	r5,zero,2803d44 <__modsi3+0x58>
 2803d18:	180b883a 	mov	r5,r3
 2803d1c:	01800044 	movi	r6,1
 2803d20:	2803c100 	call	2803c10 <udivmodsi4>
 2803d24:	0085c83a 	sub	r2,zero,r2
 2803d28:	dfc00017 	ldw	ra,0(sp)
 2803d2c:	dec00104 	addi	sp,sp,4
 2803d30:	f800283a 	ret
 2803d34:	014bc83a 	sub	r5,zero,r5
 2803d38:	dfc00017 	ldw	ra,0(sp)
 2803d3c:	dec00104 	addi	sp,sp,4
 2803d40:	2803c101 	jmpi	2803c10 <udivmodsi4>
 2803d44:	0147c83a 	sub	r3,zero,r5
 2803d48:	003ff306 	br	2803d18 <__modsi3+0x2c>

02803d4c <__udivsi3>:
 2803d4c:	000d883a 	mov	r6,zero
 2803d50:	2803c101 	jmpi	2803c10 <udivmodsi4>

02803d54 <__umodsi3>:
 2803d54:	01800044 	movi	r6,1
 2803d58:	2803c101 	jmpi	2803c10 <udivmodsi4>

02803d5c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 2803d5c:	defffd04 	addi	sp,sp,-12
 2803d60:	df000215 	stw	fp,8(sp)
 2803d64:	df000204 	addi	fp,sp,8
 2803d68:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 2803d6c:	e0bfff17 	ldw	r2,-4(fp)
 2803d70:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2803d74:	e0bffe17 	ldw	r2,-8(fp)
 2803d78:	1005003a 	cmpeq	r2,r2,zero
 2803d7c:	1000021e 	bne	r2,zero,2803d88 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 2803d80:	002af070 	cmpltui	zero,zero,43969
 2803d84:	00000106 	br	2803d8c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 2803d88:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 2803d8c:	e037883a 	mov	sp,fp
 2803d90:	df000017 	ldw	fp,0(sp)
 2803d94:	dec00104 	addi	sp,sp,4
 2803d98:	f800283a 	ret

02803d9c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2803d9c:	defffd04 	addi	sp,sp,-12
 2803da0:	dfc00215 	stw	ra,8(sp)
 2803da4:	df000115 	stw	fp,4(sp)
 2803da8:	df000104 	addi	fp,sp,4
 2803dac:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 2803db0:	e13fff17 	ldw	r4,-4(fp)
 2803db4:	2803d5c0 	call	2803d5c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2803db8:	003fff06 	br	2803db8 <_exit+0x1c>
 2803dbc:	02803a5c 	xori	r10,zero,233
